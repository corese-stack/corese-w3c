package fr.inria.corese.w3c.rdf11trig;

import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-25, Time: 16:31:54 Europe/Paris
 */
public class rdf11trigTest {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/rdf11trig/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            Files.createDirectories(testReportPath.getParent());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.createDirectories(testReportPath.getParent());
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // HYPHEN_MINUS_in_localName
    // HYPHEN-MINUS in local name
    @Test
    public void rdf11rdftrigmanifestttlhyphen_minus_in_localnamehyphen_minus_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.nq"));
        
        Path convertedActionFilePath = Path.of("HYPHEN_MINUS_in_localName.trig");
        Path canonConvertedActionFilePath = Path.of("HYPHEN_MINUS_in_localName.trig");
        Path canonConvertedResultFilePath = Path.of("HYPHEN_MINUS_in_localName.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-01
    // IRI resolution (RFC3986 original cases)
    @Test
    public void rdf11rdftrigmanifestttliriresolution01iriresolution01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.nq"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-01.trig");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-01.trig");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-01.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-02
    // IRI resolution (RFC3986 using base IRI with trailing slash)
    @Test
    public void rdf11rdftrigmanifestttliriresolution02iriresolution02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.nq"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-02.trig");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-02.trig");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-02.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-07
    // IRI resolution (RFC3986 using base IRI with file path)
    @Test
    public void rdf11rdftrigmanifestttliriresolution07iriresolution07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.nq"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-07.trig");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-07.trig");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-07.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-08
    // IRI resolution (miscellaneous cases)
    @Test
    public void rdf11rdftrigmanifestttliriresolution08iriresolution08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.nq"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-08.trig");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-08.trig");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-08.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRIREF_datatype
    // IRIREF datatype ""^^<t>
    @Test
    public void rdf11rdftrigmanifestttliriref_datatypeiriref_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Path.of("IRIREF_datatype.trig");
        Path canonConvertedActionFilePath = Path.of("IRIREF_datatype.trig");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_subject
    // IRI subject
    @Test
    public void rdf11rdftrigmanifestttliri_subjectiri_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("IRI_subject.trig");
        Path canonConvertedActionFilePath = Path.of("IRI_subject.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_all_punctuation
    // IRI with all punctuation
    @Test
    public void rdf11rdftrigmanifestttliri_with_all_punctuationiri_with_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.nq"));
        
        Path convertedActionFilePath = Path.of("IRI_with_all_punctuation.trig");
        Path canonConvertedActionFilePath = Path.of("IRI_with_all_punctuation.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_with_all_punctuation.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_eight_digit_numeric_escape
    // IRI with eight digit numeric escape ('slash'u)
    @Test
    public void rdf11rdftrigmanifestttliri_with_eight_digit_numeric_escapeiri_with_eight_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("IRI_with_eight_digit_numeric_escape.trig");
        Path canonConvertedActionFilePath = Path.of("IRI_with_eight_digit_numeric_escape.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_four_digit_numeric_escape
    // IRI with four digit numeric escape ('slash'u)
    @Test
    public void rdf11rdftrigmanifestttliri_with_four_digit_numeric_escapeiri_with_four_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("IRI_with_four_digit_numeric_escape.trig");
        Path canonConvertedActionFilePath = Path.of("IRI_with_four_digit_numeric_escape.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1
    // LITERAL1 'x'
    @Test
    public void rdf11rdftrigmanifestttlliteral1literal1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL1.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL1.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_controls
    // LITERAL1_all_controls '\x00\x01\x02\x03\x04...'
    @Test
    public void rdf11rdftrigmanifestttlliteral1_all_controlsliteral1_all_controls() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_all_controls.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_all_controls.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_all_controls.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_punctuation
    // LITERAL1_all_punctuation '!"#$%&()...'
    @Test
    public void rdf11rdftrigmanifestttlliteral1_all_punctuationliteral1_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_all_punctuation.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_all_punctuation.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_all_punctuation.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_ascii_boundaries
    // LITERAL1_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x26\x28...'
    @Test
    public void rdf11rdftrigmanifestttlliteral1_ascii_boundariesliteral1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_ascii_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_ascii_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_ascii_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_with_UTF8_boundaries
    // LITERAL1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdftrigmanifestttlliteral1_with_utf8_boundariesliteral1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_with_UTF8_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_with_UTF8_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2
    // LITERAL2 "x"
    @Test
    public void rdf11rdftrigmanifestttlliteral2literal2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL2.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL2.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_ascii_boundaries
    // LITERAL2_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x21\x23...'
    @Test
    public void rdf11rdftrigmanifestttlliteral2_ascii_boundariesliteral2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL2_ascii_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL2_ascii_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL2_ascii_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_with_UTF8_boundaries
    // LITERAL2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdftrigmanifestttlliteral2_with_utf8_boundariesliteral2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL2_with_UTF8_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL2_with_UTF8_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1
    // LITERAL_LONG1 '''x'''
    @Test
    public void rdf11rdftrigmanifestttlliteral_long1literal_long1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_ascii_boundaries
    // LITERAL_LONG1_ascii_boundaries '\x00\x26\x28...'
    @Test
    public void rdf11rdftrigmanifestttlliteral_long1_ascii_boundariesliteral_long1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_1_squote
    // LITERAL_LONG1 with 1 squote '''a'b'''
    @Test
    public void rdf11rdftrigmanifestttlliteral_long1_with_1_squoteliteral_long1_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_1_squote.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_1_squote.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_with_1_squote.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_2_squotes
    // LITERAL_LONG1 with 2 squotes '''a''b'''
    @Test
    public void rdf11rdftrigmanifestttlliteral_long1_with_2_squotesliteral_long1_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_2_squotes.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_2_squotes.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_with_2_squotes.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_UTF8_boundaries
    // LITERAL_LONG1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdftrigmanifestttlliteral_long1_with_utf8_boundariesliteral_long1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_UTF8_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_UTF8_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2
    // LITERAL_LONG2 """x"""
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2literal_long2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_ascii_boundaries
    // LITERAL_LONG2_ascii_boundaries '\x00\x21\x23...'
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2_ascii_boundariesliteral_long2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_1_squote
    // LITERAL_LONG2 with 1 squote """a"b"""
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2_with_1_squoteliteral_long2_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_1_squote.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_1_squote.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_1_squote.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_2_squotes
    // LITERAL_LONG2 with 2 squotes """a""b"""
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2_with_2_squotesliteral_long2_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_2_squotes.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_2_squotes.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_2_squotes.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_REVERSE_SOLIDUS
    // REVERSE SOLIDUS at end of LITERAL_LONG2
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2_with_reverse_solidusliteral_long2_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_UTF8_boundaries
    // LITERAL_LONG2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdftrigmanifestttlliteral_long2_with_utf8_boundariesliteral_long2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_UTF8_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_UTF8_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_base
    // SPARQL-style base
    @Test
    public void rdf11rdftrigmanifestttlsparql_style_basesparql_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("SPARQL_style_base.trig");
        Path canonConvertedActionFilePath = Path.of("SPARQL_style_base.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_prefix
    // SPARQL-style prefix
    @Test
    public void rdf11rdftrigmanifestttlsparql_style_prefixsparql_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("SPARQL_style_prefix.trig");
        Path canonConvertedActionFilePath = Path.of("SPARQL_style_prefix.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // alternating_bnode_graphs
    // alternating graphs with BNode names
    @Test
    public void rdf11rdftrigmanifestttlalternating_bnode_graphsalternating_bnode_graphs() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.nq"));
        
        Path convertedActionFilePath = Path.of("alternating_bnode_graphs.trig");
        Path canonConvertedActionFilePath = Path.of("alternating_bnode_graphs.trig");
        Path canonConvertedResultFilePath = Path.of("alternating_bnode_graphs.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // alternating_iri_graphs
    // alternating graphs with IRI names
    @Test
    public void rdf11rdftrigmanifestttlalternating_iri_graphsalternating_iri_graphs() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.nq"));
        
        Path convertedActionFilePath = Path.of("alternating_iri_graphs.trig");
        Path canonConvertedActionFilePath = Path.of("alternating_iri_graphs.trig");
        Path canonConvertedResultFilePath = Path.of("alternating_iri_graphs.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_graph
    // anonymous blank node graph
    @Test
    public void rdf11rdftrigmanifestttlanonymous_blank_node_graphanonymous_blank_node_graph() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));
        
        Path convertedActionFilePath = Path.of("anonymous_blank_node_graph.trig");
        Path canonConvertedActionFilePath = Path.of("anonymous_blank_node_graph.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_graph.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_object
    // anonymous blank node object
    @Test
    public void rdf11rdftrigmanifestttlanonymous_blank_node_objectanonymous_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("anonymous_blank_node_object.trig");
        Path canonConvertedActionFilePath = Path.of("anonymous_blank_node_object.trig");
        Path canonConvertedResultFilePath = Path.of("anonymous_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_subject
    // anonymous blank node subject
    @Test
    public void rdf11rdftrigmanifestttlanonymous_blank_node_subjectanonymous_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.nq"));
        
        Path convertedActionFilePath = Path.of("anonymous_blank_node_subject.trig");
        Path canonConvertedActionFilePath = Path.of("anonymous_blank_node_subject.trig");
        Path canonConvertedResultFilePath = Path.of("anonymous_blank_node_subject.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_a_predicate
    // bareword a predicate
    @Test
    public void rdf11rdftrigmanifestttlbareword_a_predicatebareword_a_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.nq"));
        
        Path convertedActionFilePath = Path.of("bareword_a_predicate.trig");
        Path canonConvertedActionFilePath = Path.of("bareword_a_predicate.trig");
        Path canonConvertedResultFilePath = Path.of("bareword_a_predicate.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_decimal
    // bareword decimal
    @Test
    public void rdf11rdftrigmanifestttlbareword_decimalbareword_decimal() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.nq"));
        
        Path convertedActionFilePath = Path.of("bareword_decimal.trig");
        Path canonConvertedActionFilePath = Path.of("bareword_decimal.trig");
        Path canonConvertedResultFilePath = Path.of("bareword_decimal.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_double
    // bareword double
    @Test
    public void rdf11rdftrigmanifestttlbareword_doublebareword_double() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.nq"));
        
        Path convertedActionFilePath = Path.of("bareword_double.trig");
        Path canonConvertedActionFilePath = Path.of("bareword_double.trig");
        Path canonConvertedResultFilePath = Path.of("bareword_double.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_integer
    // bareword integer
    @Test
    public void rdf11rdftrigmanifestttlbareword_integerbareword_integer() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Path.of("bareword_integer.trig");
        Path canonConvertedActionFilePath = Path.of("bareword_integer.trig");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_object
    // blankNodePropertyList as object <s> <p> [ … ] .
    @Test
    public void rdf11rdftrigmanifestttlblanknodepropertylist_as_objectblanknodepropertylist_as_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.nq"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_object.trig");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_object.trig");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_subject
    // blankNodePropertyList as subject [ … ] <p> <o> .
    @Test
    public void rdf11rdftrigmanifestttlblanknodepropertylist_as_subjectblanknodepropertylist_as_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.nq"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_subject.trig");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_subject.trig");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_subject.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_containing_collection
    // blankNodePropertyList containing collection [ <p1> ( … ) ]
    @Test
    public void rdf11rdftrigmanifestttlblanknodepropertylist_containing_collectionblanknodepropertylist_containing_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.nq"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_containing_collection.trig");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_containing_collection.trig");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_containing_collection.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_with_multiple_triples
    // blankNodePropertyList with multiple triples [ <s> <p> ; <s2> <p2> ]
    @Test
    public void rdf11rdftrigmanifestttlblanknodepropertylist_with_multiple_triplesblanknodepropertylist_with_multiple_triples() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.nq"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_with_multiple_triples.trig");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_with_multiple_triples.trig");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_with_multiple_triples.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_object
    // collection object
    @Test
    public void rdf11rdftrigmanifestttlcollection_objectcollection_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.nq"));
        
        Path convertedActionFilePath = Path.of("collection_object.trig");
        Path canonConvertedActionFilePath = Path.of("collection_object.trig");
        Path canonConvertedResultFilePath = Path.of("collection_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_subject
    // collection subject
    @Test
    public void rdf11rdftrigmanifestttlcollection_subjectcollection_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.nq"));
        
        Path convertedActionFilePath = Path.of("collection_subject.trig");
        Path canonConvertedActionFilePath = Path.of("collection_subject.trig");
        Path canonConvertedResultFilePath = Path.of("collection_subject.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_PNAME_NS
    // comment following PNAME_NS
    @Test
    public void rdf11rdftrigmanifestttlcomment_following_pname_nscomment_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.nq"));
        
        Path convertedActionFilePath = Path.of("comment_following_PNAME_NS.trig");
        Path canonConvertedActionFilePath = Path.of("comment_following_PNAME_NS.trig");
        Path canonConvertedResultFilePath = Path.of("comment_following_PNAME_NS.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_localName
    // comment following localName
    @Test
    public void rdf11rdftrigmanifestttlcomment_following_localnamecomment_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("comment_following_localName.trig");
        Path canonConvertedActionFilePath = Path.of("comment_following_localName.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // default_namespace_IRI
    // default namespace IRI (:ln)
    @Test
    public void rdf11rdftrigmanifestttldefault_namespace_iridefault_namespace_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("default_namespace_IRI.trig");
        Path canonConvertedActionFilePath = Path.of("default_namespace_IRI.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // double_lower_case_e
    // double lower case e
    @Test
    public void rdf11rdftrigmanifestttldouble_lower_case_edouble_lower_case_e() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.nq"));
        
        Path convertedActionFilePath = Path.of("double_lower_case_e.trig");
        Path canonConvertedActionFilePath = Path.of("double_lower_case_e.trig");
        Path canonConvertedResultFilePath = Path.of("double_lower_case_e.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // empty_collection
    // empty collection ()
    @Test
    public void rdf11rdftrigmanifestttlempty_collectionempty_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.nq"));
        
        Path convertedActionFilePath = Path.of("empty_collection.trig");
        Path canonConvertedActionFilePath = Path.of("empty_collection.trig");
        Path canonConvertedResultFilePath = Path.of("empty_collection.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // first
    // first, not last, non-empty nested collection
    @Test
    public void rdf11rdftrigmanifestttlfirstfirst() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.nq"));
        
        Path convertedActionFilePath = Path.of("first.trig");
        Path canonConvertedActionFilePath = Path.of("first.trig");
        Path canonConvertedResultFilePath = Path.of("first.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_graph
    // labeled blank node graph
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_graphlabeled_blank_node_graph() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_graph.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_graph.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_graph.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_object
    // labeled blank node object
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_objectlabeled_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_object.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_object.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_subject
    // labeled blank node subject
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_subjectlabeled_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_subject.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_subject.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_subject.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_PN_CHARS_BASE_character_boundaries
    // labeled blank node with PN_CHARS_BASE character boundaries (_:AZazÀÖØöø...)
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_with_pn_chars_base_character_boundarieslabeled_blank_node_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_digit
    // labeled blank node with_leading_digit (_:0)
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_with_leading_digitlabeled_blank_node_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_leading_digit.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_leading_digit.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_underscore
    // labeled blank node with_leading_underscore (_:_)
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_with_leading_underscorelabeled_blank_node_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_leading_underscore.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_leading_underscore.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_non_leading_extras
    // labeled blank node with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdftrigmanifestttllabeled_blank_node_with_non_leading_extraslabeled_blank_node_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_non_leading_extras.trig");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_non_leading_extras.trig");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG
    // langtagged LONG """x"""@en
    @Test
    public void rdf11rdftrigmanifestttllangtagged_longlangtagged_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));
        
        Path convertedActionFilePath = Path.of("langtagged_LONG.trig");
        Path canonConvertedActionFilePath = Path.of("langtagged_LONG.trig");
        Path canonConvertedResultFilePath = Path.of("langtagged_non_LONG.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG_with_subtag
    // langtagged LONG with subtag """Cheers"""@en-UK
    @Test
    public void rdf11rdftrigmanifestttllangtagged_long_with_subtaglangtagged_long_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.nq"));
        
        Path convertedActionFilePath = Path.of("langtagged_LONG_with_subtag.trig");
        Path canonConvertedActionFilePath = Path.of("langtagged_LONG_with_subtag.trig");
        Path canonConvertedResultFilePath = Path.of("langtagged_LONG_with_subtag.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_non_LONG
    // langtagged non-LONG "x"@en
    @Test
    public void rdf11rdftrigmanifestttllangtagged_non_longlangtagged_non_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));
        
        Path convertedActionFilePath = Path.of("langtagged_non_LONG.trig");
        Path canonConvertedActionFilePath = Path.of("langtagged_non_LONG.trig");
        Path canonConvertedResultFilePath = Path.of("langtagged_non_LONG.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // lantag_with_subtag
    // lantag with subtag "x"@en-us
    @Test
    public void rdf11rdftrigmanifestttllantag_with_subtaglantag_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.nq"));
        
        Path convertedActionFilePath = Path.of("lantag_with_subtag.trig");
        Path canonConvertedActionFilePath = Path.of("lantag_with_subtag.trig");
        Path canonConvertedResultFilePath = Path.of("lantag_with_subtag.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // last
    // last, not first, non-empty nested collection
    @Test
    public void rdf11rdftrigmanifestttllastlast() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.nq"));
        
        Path convertedActionFilePath = Path.of("last.trig");
        Path canonConvertedActionFilePath = Path.of("last.trig");
        Path canonConvertedResultFilePath = Path.of("last.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_false
    // literal false
    @Test
    public void rdf11rdftrigmanifestttlliteral_falseliteral_false() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.nq"));
        
        Path convertedActionFilePath = Path.of("literal_false.trig");
        Path canonConvertedActionFilePath = Path.of("literal_false.trig");
        Path canonConvertedResultFilePath = Path.of("literal_false.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_true
    // literal true
    @Test
    public void rdf11rdftrigmanifestttlliteral_trueliteral_true() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.nq"));
        
        Path convertedActionFilePath = Path.of("literal_true.trig");
        Path canonConvertedActionFilePath = Path.of("literal_true.trig");
        Path canonConvertedResultFilePath = Path.of("literal_true.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_BACKSPACE
    // literal with BACKSPACE
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_backspaceliteral_with_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_BACKSPACE.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_BACKSPACE.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_BACKSPACE.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CARRIAGE_RETURN
    // literal with CARRIAGE RETURN
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_carriage_returnliteral_with_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_CARRIAGE_RETURN.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_CARRIAGE_RETURN.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_CARRIAGE_RETURN.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CHARACTER_TABULATION
    // literal with CHARACTER TABULATION
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_character_tabulationliteral_with_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_CHARACTER_TABULATION.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_CHARACTER_TABULATION.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_CHARACTER_TABULATION.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_FORM_FEED
    // literal with FORM FEED
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_form_feedliteral_with_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_FORM_FEED.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_FORM_FEED.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_FORM_FEED.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_LINE_FEED
    // literal with LINE FEED
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_line_feedliteral_with_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_LINE_FEED.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_LINE_FEED.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_LINE_FEED.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_REVERSE_SOLIDUS
    // literal with REVERSE SOLIDUS
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_reverse_solidusliteral_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_REVERSE_SOLIDUS.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_REVERSE_SOLIDUS.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_REVERSE_SOLIDUS.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_BACKSPACE
    // literal with escaped BACKSPACE
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_escaped_backspaceliteral_with_escaped_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_BACKSPACE.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_BACKSPACE.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_BACKSPACE.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CARRIAGE_RETURN
    // literal with escaped CARRIAGE RETURN
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_escaped_carriage_returnliteral_with_escaped_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_CARRIAGE_RETURN.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_CARRIAGE_RETURN.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_CARRIAGE_RETURN.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CHARACTER_TABULATION
    // literal with escaped CHARACTER TABULATION
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_escaped_character_tabulationliteral_with_escaped_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_CHARACTER_TABULATION.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_CHARACTER_TABULATION.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_CHARACTER_TABULATION.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_FORM_FEED
    // literal with escaped FORM FEED
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_escaped_form_feedliteral_with_escaped_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_FORM_FEED.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_FORM_FEED.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_FORM_FEED.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_LINE_FEED
    // literal with escaped LINE FEED
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_escaped_line_feedliteral_with_escaped_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_LINE_FEED.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_LINE_FEED.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_LINE_FEED.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape4
    // literal with numeric escape4 'slash'u
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_numeric_escape4literal_with_numeric_escape4() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_numeric_escape4.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_numeric_escape4.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_numeric_escape4.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape8
    // literal with numeric escape8 'slash'u
    @Test
    public void rdf11rdftrigmanifestttlliteral_with_numeric_escape8literal_with_numeric_escape8() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));
        
        Path convertedActionFilePath = Path.of("literal_with_numeric_escape8.trig");
        Path canonConvertedActionFilePath = Path.of("literal_with_numeric_escape8.trig");
        Path canonConvertedResultFilePath = Path.of("literal_with_numeric_escape4.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_assigned_nfc_pn_chars_base_character_boundarieslocalname_with_assigned_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized, basic-multilingual-plane PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_assigned_nfc_bmp_pn_chars_base_character_boundarieslocalname_with_assigned_nfc_bmp_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_digit
    // localName with leading digit (p:_)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_leading_digitlocalname_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_leading_digit.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_leading_digit.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_leading_digit.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_underscore
    // localName with leading underscore (p:_)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_leading_underscorelocalname_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_leading_underscore.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_leading_underscore.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_leading_underscore.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_nfc_PN_CHARS_BASE_character_boundaries
    // localName with nfc-normalize PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_nfc_pn_chars_base_character_boundarieslocalname_with_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_non_leading_extras
    // localName with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_non_leading_extraslocalname_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.nq"));
        
        Path convertedActionFilePath = Path.of("localName_with_non_leading_extras.trig");
        Path canonConvertedActionFilePath = Path.of("localName_with_non_leading_extras.trig");
        Path canonConvertedResultFilePath = Path.of("localName_with_non_leading_extras.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localname_with_COLON
    // localname with COLON
    @Test
    public void rdf11rdftrigmanifestttllocalname_with_colonlocalname_with_colon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.nq"));
        
        Path convertedActionFilePath = Path.of("localname_with_COLON.trig");
        Path canonConvertedActionFilePath = Path.of("localname_with_COLON.trig");
        Path canonConvertedResultFilePath = Path.of("localname_with_COLON.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // negative_numeric
    // negative numeric
    @Test
    public void rdf11rdftrigmanifestttlnegative_numericnegative_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.nq"));
        
        Path convertedActionFilePath = Path.of("negative_numeric.trig");
        Path canonConvertedActionFilePath = Path.of("negative_numeric.trig");
        Path canonConvertedResultFilePath = Path.of("negative_numeric.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_blankNodePropertyLists
    // nested blankNodePropertyLists [ <p1> [ <p2> <o2> ] ; <p3> <o3> ]
    @Test
    public void rdf11rdftrigmanifestttlnested_blanknodepropertylistsnested_blanknodepropertylists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.nq"));
        
        Path convertedActionFilePath = Path.of("nested_blankNodePropertyLists.trig");
        Path canonConvertedActionFilePath = Path.of("nested_blankNodePropertyLists.trig");
        Path canonConvertedResultFilePath = Path.of("nested_blankNodePropertyLists.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_collection
    // nested collection (())
    @Test
    public void rdf11rdftrigmanifestttlnested_collectionnested_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.nq"));
        
        Path convertedActionFilePath = Path.of("nested_collection.trig");
        Path canonConvertedActionFilePath = Path.of("nested_collection.trig");
        Path canonConvertedResultFilePath = Path.of("nested_collection.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_PNAME_NS
    // number sign following PNAME_NS
    @Test
    public void rdf11rdftrigmanifestttlnumber_sign_following_pname_nsnumber_sign_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.nq"));
        
        Path convertedActionFilePath = Path.of("number_sign_following_PNAME_NS.trig");
        Path canonConvertedActionFilePath = Path.of("number_sign_following_PNAME_NS.trig");
        Path canonConvertedResultFilePath = Path.of("number_sign_following_PNAME_NS.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_localName
    // number sign following localName
    @Test
    public void rdf11rdftrigmanifestttlnumber_sign_following_localnamenumber_sign_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.nq"));
        
        Path convertedActionFilePath = Path.of("number_sign_following_localName.trig");
        Path canonConvertedActionFilePath = Path.of("number_sign_following_localName.trig");
        Path canonConvertedResultFilePath = Path.of("number_sign_following_localName.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // numeric_with_leading_0
    // numeric with leading 0
    @Test
    public void rdf11rdftrigmanifestttlnumeric_with_leading_0numeric_with_leading_0() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.nq"));
        
        Path convertedActionFilePath = Path.of("numeric_with_leading_0.trig");
        Path canonConvertedActionFilePath = Path.of("numeric_with_leading_0.trig");
        Path canonConvertedResultFilePath = Path.of("numeric_with_leading_0.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // objectList_with_two_objects
    // objectList with two objects … <o1>,<o2>
    @Test
    public void rdf11rdftrigmanifestttlobjectlist_with_two_objectsobjectlist_with_two_objects() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.nq"));
        
        Path convertedActionFilePath = Path.of("objectList_with_two_objects.trig");
        Path canonConvertedActionFilePath = Path.of("objectList_with_two_objects.trig");
        Path canonConvertedResultFilePath = Path.of("objectList_with_two_objects.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_base
    // old-style base
    @Test
    public void rdf11rdftrigmanifestttlold_style_baseold_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("old_style_base.trig");
        Path canonConvertedActionFilePath = Path.of("old_style_base.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_prefix
    // old-style prefix
    @Test
    public void rdf11rdftrigmanifestttlold_style_prefixold_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("old_style_prefix.trig");
        Path canonConvertedActionFilePath = Path.of("old_style_prefix.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // percent_escaped_localName
    // percent-escaped local name
    @Test
    public void rdf11rdftrigmanifestttlpercent_escaped_localnamepercent_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.nq"));
        
        Path convertedActionFilePath = Path.of("percent_escaped_localName.trig");
        Path canonConvertedActionFilePath = Path.of("percent_escaped_localName.trig");
        Path canonConvertedResultFilePath = Path.of("percent_escaped_localName.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // positive_numeric
    // positive numeric
    @Test
    public void rdf11rdftrigmanifestttlpositive_numericpositive_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.nq"));
        
        Path convertedActionFilePath = Path.of("positive_numeric.trig");
        Path canonConvertedActionFilePath = Path.of("positive_numeric.trig");
        Path canonConvertedResultFilePath = Path.of("positive_numeric.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // predicateObjectList_with_two_objectLists
    // predicateObjectList with two objectLists … <o1>,<o2>
    @Test
    public void rdf11rdftrigmanifestttlpredicateobjectlist_with_two_objectlistspredicateobjectlist_with_two_objectlists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));
        
        Path convertedActionFilePath = Path.of("predicateObjectList_with_two_objectLists.trig");
        Path canonConvertedActionFilePath = Path.of("predicateObjectList_with_two_objectLists.trig");
        Path canonConvertedResultFilePath = Path.of("predicateObjectList_with_two_objectLists.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_only_IRI
    // prefix-only IRI (p:)
    @Test
    public void rdf11rdftrigmanifestttlprefix_only_iriprefix_only_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("prefix_only_IRI.trig");
        Path canonConvertedActionFilePath = Path.of("prefix_only_IRI.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_reassigned_and_used
    // prefix reassigned and used
    @Test
    public void rdf11rdftrigmanifestttlprefix_reassigned_and_usedprefix_reassigned_and_used() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.nq"));
        
        Path convertedActionFilePath = Path.of("prefix_reassigned_and_used.trig");
        Path canonConvertedActionFilePath = Path.of("prefix_reassigned_and_used.trig");
        Path canonConvertedResultFilePath = Path.of("prefix_reassigned_and_used.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_PN_CHARS_BASE_character_boundaries
    // prefix with PN CHARS BASE character boundaries (prefix: AZazÀÖØöø...:)
    @Test
    public void rdf11rdftrigmanifestttlprefix_with_pn_chars_base_character_boundariesprefix_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("prefix_with_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedActionFilePath = Path.of("prefix_with_PN_CHARS_BASE_character_boundaries.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_non_leading_extras
    // prefix with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdftrigmanifestttlprefix_with_non_leading_extrasprefix_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("prefix_with_non_leading_extras.trig");
        Path canonConvertedActionFilePath = Path.of("prefix_with_non_leading_extras.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_object
    // prefixed IRI object
    @Test
    public void rdf11rdftrigmanifestttlprefixed_iri_objectprefixed_iri_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("prefixed_IRI_object.trig");
        Path canonConvertedActionFilePath = Path.of("prefixed_IRI_object.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_predicate
    // prefixed IRI predicate
    @Test
    public void rdf11rdftrigmanifestttlprefixed_iri_predicateprefixed_iri_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Path.of("prefixed_IRI_predicate.trig");
        Path canonConvertedActionFilePath = Path.of("prefixed_IRI_predicate.trig");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_name_datatype
    // prefixed name datatype ""^^p:t
    @Test
    public void rdf11rdftrigmanifestttlprefixed_name_datatypeprefixed_name_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Path.of("prefixed_name_datatype.trig");
        Path canonConvertedActionFilePath = Path.of("prefixed_name_datatype.trig");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_at_end
    // repeated semis at end <s> <p> <o> ;; <p2> <o2> .
    @Test
    public void rdf11rdftrigmanifestttlrepeated_semis_at_endrepeated_semis_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));
        
        Path convertedActionFilePath = Path.of("repeated_semis_at_end.trig");
        Path canonConvertedActionFilePath = Path.of("repeated_semis_at_end.trig");
        Path canonConvertedResultFilePath = Path.of("predicateObjectList_with_two_objectLists.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_not_at_end
    // repeated semis not at end <s> <p> <o> ;;.
    @Test
    public void rdf11rdftrigmanifestttlrepeated_semis_not_at_endrepeated_semis_not_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.nq"));
        
        Path convertedActionFilePath = Path.of("repeated_semis_not_at_end.trig");
        Path canonConvertedActionFilePath = Path.of("repeated_semis_not_at_end.trig");
        Path canonConvertedResultFilePath = Path.of("repeated_semis_not_at_end.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // reserved_escaped_localName
    // reserved-escaped local name
    @Test
    public void rdf11rdftrigmanifestttlreserved_escaped_localnamereserved_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.nq"));
        
        Path convertedActionFilePath = Path.of("reserved_escaped_localName.trig");
        Path canonConvertedActionFilePath = Path.of("reserved_escaped_localName.trig");
        Path canonConvertedResultFilePath = Path.of("reserved_escaped_localName.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // sole_blankNodePropertyList
    // sole blankNodePropertyList [ <p> <o> ] .
    @Test
    public void rdf11rdftrigmanifestttlsole_blanknodepropertylistsole_blanknodepropertylist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.nq"));
        
        Path convertedActionFilePath = Path.of("sole_blankNodePropertyList.trig");
        Path canonConvertedActionFilePath = Path.of("sole_blankNodePropertyList.trig");
        Path canonConvertedResultFilePath = Path.of("sole_blankNodePropertyList.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-bnodeplist-graph-bad-01
    // A graph may not be named with a blankNodePropertyList
    @Test
    public void rdf11rdftrigmanifestttltrigbnodeplistgraph01trigbnodeplistgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-bnodeplist-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-collection-graph-bad-01
    // A graph may not be named with an empty collection
    @Test
    public void rdf11rdftrigmanifestttltrigcollectiongraph01trigcollectiongraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-collection-graph-bad-02
    // A graph may not be named with a collection
    @Test
    public void rdf11rdftrigmanifestttltrigcollectiongraph02trigcollectiongraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-01
    // Bad IRI : good escape, bad charcater (negative evaluation test)
    @Test
    public void rdf11rdftrigmanifestttltrigevalbad01trigevalbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-02
    // Bad IRI : hex 3C is < (negative evaluation test)
    @Test
    public void rdf11rdftrigmanifestttltrigevalbad02trigevalbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-03
    // Bad IRI : hex 3E is  (negative evaluation test)
    @Test
    public void rdf11rdftrigmanifestttltrigevalbad03trigevalbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-04
    // Bad IRI : {abc} (negative evaluation test)
    @Test
    public void rdf11rdftrigmanifestttltrigevalbad04trigevalbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-struct-01
    // triple with IRIs
    @Test
    public void rdf11rdftrigmanifestttltrigevalstruct01trigevalstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.nq"));
        
        Path convertedActionFilePath = Path.of("trig-eval-struct-01.trig");
        Path canonConvertedActionFilePath = Path.of("trig-eval-struct-01.trig");
        Path canonConvertedResultFilePath = Path.of("trig-eval-struct-01.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-eval-struct-02
    // triple with IRIs and embedded whitespace
    @Test
    public void rdf11rdftrigmanifestttltrigevalstruct02trigevalstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.nq"));
        
        Path convertedActionFilePath = Path.of("trig-eval-struct-02.trig");
        Path canonConvertedActionFilePath = Path.of("trig-eval-struct-02.trig");
        Path canonConvertedResultFilePath = Path.of("trig-eval-struct-02.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-graph-bad-01
    // GRAPH but no name - GRAPH is not used with the default graph
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad01triggraphbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-02
    // GRAPH not followed by DOT
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad02triggraphbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-03
    // GRAPH needs {}
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad03triggraphbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-04
    // GRAPH needs {}
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad04triggraphbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-05
    // GRAPH and a name, not several
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad05triggraphbad05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-06
    // GRAPH - Must close {}
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad06triggraphbad06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-07
    // GRAPH may not include a GRAPH
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad07triggraphbad07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-08
    // @graph is not a keyword
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad08triggraphbad08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-09
    // Directives not allowed inside GRAPH
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad09triggraphbad09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-10
    // A graph may not be named with an empty collection
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad10triggraphbad10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-11
    // A graph may not be named with a collection
    @Test
    public void rdf11rdftrigmanifestttltriggraphbad11triggraphbad11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-kw-graph-01
    // Named graphs can be proceeded by GRAPH
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph01trigkwgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-02
    // Trailing . not necessary inside {}
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph02trigkwgraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-03
    // Named graph may be empty
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph03trigkwgraph03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-04
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph04trigkwgraph04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-05
    // Use of empty prefix inside named graph
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph05trigkwgraph05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-06
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph06trigkwgraph06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-07
    // Named graph may be named with BNode _:a
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph07trigkwgraph07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-08
    // Named graph may be named with BNode []
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph08trigkwgraph08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-09
    // Named graph may be named with PNAME
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph09trigkwgraph09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-10
    // Named graph with PNAME and empty graph
    @Test
    public void rdf11rdftrigmanifestttltrigkwgraph10trigkwgraph10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-subm-01
    // Blank subject
    @Test
    public void rdf11rdftrigmanifestttltrigsubm01trigsubm01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-01.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-01.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-01.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-02
    // @prefix and qnames
    @Test
    public void rdf11rdftrigmanifestttltrigsubm02trigsubm02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-02.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-02.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-02.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-03
    // , operator
    @Test
    public void rdf11rdftrigmanifestttltrigsubm03trigsubm03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-03.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-03.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-03.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-04
    // ; operator
    @Test
    public void rdf11rdftrigmanifestttltrigsubm04trigsubm04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-04.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-04.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-04.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-05
    // empty [] as subject and object
    @Test
    public void rdf11rdftrigmanifestttltrigsubm05trigsubm05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-05.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-05.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-05.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-06
    // non-empty [] as subject and object
    @Test
    public void rdf11rdftrigmanifestttltrigsubm06trigsubm06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-06.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-06.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-06.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-07
    // 'a' as predicate
    @Test
    public void rdf11rdftrigmanifestttltrigsubm07trigsubm07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-07.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-07.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-07.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-08
    // simple collection
    @Test
    public void rdf11rdftrigmanifestttltrigsubm08trigsubm08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-08.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-08.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-08.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-09
    // empty collection
    @Test
    public void rdf11rdftrigmanifestttltrigsubm09trigsubm09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-09.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-09.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-09.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-10
    // integer datatyped literal
    @Test
    public void rdf11rdftrigmanifestttltrigsubm10trigsubm10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-10.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-10.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-10.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-11
    // decimal integer canonicalization
    @Test
    public void rdf11rdftrigmanifestttltrigsubm11trigsubm11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-11.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-11.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-11.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-12
    // - and _ in names and qnames
    @Test
    public void rdf11rdftrigmanifestttltrigsubm12trigsubm12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-12.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-12.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-12.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-13
    // tests for rdf:_<numbers> and other qnames starting with _
    @Test
    public void rdf11rdftrigmanifestttltrigsubm13trigsubm13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-13.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-13.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-13.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-14
    // bare : allowed
    @Test
    public void rdf11rdftrigmanifestttltrigsubm14trigsubm14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-14.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-14.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-14.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-15
    // simple long literal
    @Test
    public void rdf11rdftrigmanifestttltrigsubm15trigsubm15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-15.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-15.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-15.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-16
    // long literals with escapes
    @Test
    public void rdf11rdftrigmanifestttltrigsubm16trigsubm16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-16.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-16.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-16.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-17
    // floating point number
    @Test
    public void rdf11rdftrigmanifestttltrigsubm17trigsubm17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-17.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-17.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-17.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-18
    // empty literals, normal and long variant
    @Test
    public void rdf11rdftrigmanifestttltrigsubm18trigsubm18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-18.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-18.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-18.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-19
    // positive integer, decimal and doubles
    @Test
    public void rdf11rdftrigmanifestttltrigsubm19trigsubm19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-19.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-19.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-19.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-20
    // negative integer, decimal and doubles
    @Test
    public void rdf11rdftrigmanifestttltrigsubm20trigsubm20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-20.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-20.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-20.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-21
    // long literal ending in double quote
    @Test
    public void rdf11rdftrigmanifestttltrigsubm21trigsubm21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-21.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-21.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-21.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-22
    // boolean literals
    @Test
    public void rdf11rdftrigmanifestttltrigsubm22trigsubm22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-22.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-22.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-22.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-23
    // comments
    @Test
    public void rdf11rdftrigmanifestttltrigsubm23trigsubm23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-23.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-23.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-23.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-24
    // no final mewline
    @Test
    public void rdf11rdftrigmanifestttltrigsubm24trigsubm24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-24.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-24.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-24.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-25
    // repeating a @prefix changes pname definition
    @Test
    public void rdf11rdftrigmanifestttltrigsubm25trigsubm25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-25.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-25.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-25.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-26
    // Variations on decimal canonicalization
    @Test
    public void rdf11rdftrigmanifestttltrigsubm26trigsubm26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-26.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-26.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-26.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-27
    // Repeating @base changes base for relative IRI lookup
    @Test
    public void rdf11rdftrigmanifestttltrigsubm27trigsubm27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.nq"));
        
        Path convertedActionFilePath = Path.of("trig-subm-27.trig");
        Path canonConvertedActionFilePath = Path.of("trig-subm-27.trig");
        Path canonConvertedResultFilePath = Path.of("trig-subm-27.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadliteral2_with_langtag_and_datatypetrigsyntaxbadliteral2_with_langtag_and_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-LITERAL2_with_langtag_and_datatype.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-01
    // @base without URI (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbase01trigsyntaxbadbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-02
    // @base in wrong case (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbase02trigsyntaxbadbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-03
    // BASE without URI (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbase03trigsyntaxbadbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-04
    // @base inside graph (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbase04trigsyntaxbadbase04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-05
    // BASE inside graph (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbase05trigsyntaxbadbase05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-blank-label-dot-end
    // Blank node label must not end in dot
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadblanklabeldotendtrigsyntaxbadblanklabeldotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-blank-label-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-bnode-01
    // Colon in bnode label not allowed (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbnode01trigsyntaxbadbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-bnode-02
    // Colon in bnode label not allowed (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadbnode02trigsyntaxbadbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-01
    // Bad string escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadesc01trigsyntaxbadesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-02
    // Bad string escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadesc02trigsyntaxbadesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-03
    // Bad string escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadesc03trigsyntaxbadesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-04
    // Bad string escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadesc04trigsyntaxbadesc04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-01
    // 'A' is not a keyword (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadkw01trigsyntaxbadkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-02
    // 'a' cannot be used as subject (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadkw02trigsyntaxbadkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-03
    // 'a' cannot be used as object (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadkw03trigsyntaxbadkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-04
    // 'true' cannot be used as subject (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadkw04trigsyntaxbadkw04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-05
    // 'true' cannot be used as object (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadkw05trigsyntaxbadkw05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-lang-01
    // langString with bad lang (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlang01trigsyntaxbadlang01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-lang-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-01
    // Free-standing list outside {} : bad syntax
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlist01trigsyntaxbadlist01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-02
    // Free-standing list of zero-elements outside {} : bad syntax
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlist02trigsyntaxbadlist02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-03
    // Free-standing list inside {} : bad syntax
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlist03trigsyntaxbadlist03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-04
    // Free-standing list of zero elements : bad syntax
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlist04trigsyntaxbadlist04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-dash-start
    // Local name must not begin with dash
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlndashstarttrigsyntaxbadlndashstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-dash-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-escape
    // Bad hex escape in local name
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlnescapetrigsyntaxbadlnescape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-escape-start
    // Bad hex escape at start of local name
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadlnescapestarttrigsyntaxbadlnescapestart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-missing-ns-dot-end
    // Prefix must not end in dot (error in triple, not prefix directive like trig-syntax-bad-ns-dot-end)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadmissingnsdotendtrigsyntaxbadmissingnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-missing-ns-dot-start
    // Prefix must not start with dot (error in triple, not prefix directive like trig-syntax-bad-ns-dot-end)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadmissingnsdotstarttrigsyntaxbadmissingnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-01
    // {} fomulae not in TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras01trigsyntaxbadn3extras01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-02
    // = is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras02trigsyntaxbadn3extras02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-03
    // N3 paths not in TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras03trigsyntaxbadn3extras03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-04
    // N3 paths not in TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras04trigsyntaxbadn3extras04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-05
    // N3 is...of not in TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras05trigsyntaxbadn3extras05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-06
    // N3 paths not in TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras06trigsyntaxbadn3extras06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-07
    // @keywords is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras07trigsyntaxbadn3extras07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-08
    // @keywords is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras08trigsyntaxbadn3extras08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-09
    // => is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras09trigsyntaxbadn3extras09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-10
    // <= is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras10trigsyntaxbadn3extras10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-11
    // @forSome is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras11trigsyntaxbadn3extras11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-12
    // @forAll is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras12trigsyntaxbadn3extras12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-12.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-13
    // @keywords is not TriG (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadn3extras13trigsyntaxbadn3extras13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-13.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ns-dot-end
    // Prefix must not end in dot
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnsdotendtrigsyntaxbadnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ns-dot-start
    // Prefix must not start with dot
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnsdotstarttrigsyntaxbadnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-01
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnum01trigsyntaxbadnum01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-02
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnum02trigsyntaxbadnum02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-03
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnum03trigsyntaxbadnum03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-04
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnum04trigsyntaxbadnum04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnum05trigsyntaxbadnum05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-number-dot-in-anon
    // Dot delimeter may not appear in anonymous nodes
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadnumberdotinanontrigsyntaxbadnumberdotinanon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-number-dot-in-anon.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-01
    // '~' must be escaped in pname (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadpname01trigsyntaxbadpname01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-02
    // Bad %-sequence in pname (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadpname02trigsyntaxbadpname02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-03
    // Bad unicode escape in pname (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadpname03trigsyntaxbadpname03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-01
    // No prefix (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix01trigsyntaxbadprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-02
    // No prefix (2) (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix02trigsyntaxbadprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-03
    // @prefix without URI (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix03trigsyntaxbadprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-04
    // @prefix without prefix name (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix04trigsyntaxbadprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-05
    // @prefix without ':' (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix05trigsyntaxbadprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-06
    // @prefix inside graph (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix06trigsyntaxbadprefix06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-07
    // PREFIX inside graph (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadprefix07trigsyntaxbadprefix07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-01
    // mismatching string literal open/close (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring01trigsyntaxbadstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-02
    // mismatching string literal open/close (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring02trigsyntaxbadstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-03
    // mismatching string literal long/short (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring03trigsyntaxbadstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-04
    // mismatching long string literal open/close (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring04trigsyntaxbadstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-05
    // Long literal with missing end (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring05trigsyntaxbadstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-06
    // Long literal with extra quote (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring06trigsyntaxbadstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-07
    // Long literal with extra squote (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstring07trigsyntaxbadstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-02
    // Turtle is not N3 (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct02trigsyntaxbadstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-03
    // Turtle is not NQuads (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct03trigsyntaxbadstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-04
    // Turtle does not allow literals-as-subjects (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct04trigsyntaxbadstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-05
    // Turtle does not allow literals-as-predicates (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct05trigsyntaxbadstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-06
    // Turtle does not allow bnodes-as-predicates (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct06trigsyntaxbadstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-07
    // Turtle does not allow labeled bnodes-as-predicates (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct07trigsyntaxbadstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-09
    // extra '.' (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct09trigsyntaxbadstruct09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-10
    // extra '.' (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct10trigsyntaxbadstruct10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-12
    // subject, predicate, no object (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct12trigsyntaxbadstruct12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-12.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-13
    // subject, predicate, no object (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct13trigsyntaxbadstruct13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-13.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-14
    // literal as subject (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct14trigsyntaxbadstruct14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-14.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-15
    // literal as predicate (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct15trigsyntaxbadstruct15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-15.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-16
    // bnode as predicate (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct16trigsyntaxbadstruct16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-16.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-17
    // labeled bnode as predicate (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbadstruct17trigsyntaxbadstruct17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-17.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-01
    // Bad IRI : space (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbaduri01trigsyntaxbaduri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-02
    // Bad IRI : bad escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbaduri02trigsyntaxbaduri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-03
    // Bad IRI : bad long escape (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbaduri03trigsyntaxbaduri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-04
    // Bad IRI : character escapes not allowed (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbaduri04trigsyntaxbaduri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-05
    // Bad IRI : character escapes not allowed (2) (negative test)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbaduri05trigsyntaxbaduri05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-base-01
    // @base
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbase01trigsyntaxbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-02
    // BASE
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbase02trigsyntaxbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-03
    // @base with relative IRIs
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbase03trigsyntaxbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-04
    // base with relative IRIs
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbase04trigsyntaxbase04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-blank-label
    // Characters allowed in blank node labels
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxblanklabeltrigsyntaxblanklabel() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-blank-label.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-01
    // bnode subject
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode01trigsyntaxbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-02
    // bnode object
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode02trigsyntaxbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-03
    // bnode property list object
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode03trigsyntaxbnode03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-04
    // bnode property list object (2)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode04trigsyntaxbnode04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-05
    // bnode property list subject
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode05trigsyntaxbnode05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-06
    // labeled bnode subject
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode06trigsyntaxbnode06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-07
    // labeled bnode subject and object
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode07trigsyntaxbnode07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-08
    // bare bnode property list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode08trigsyntaxbnode08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-09
    // bnode property list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode09trigsyntaxbnode09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-10
    // mixed bnode property list and triple
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxbnode10trigsyntaxbnode10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-datatypes-01
    // xsd:byte literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxdatatypes01trigsyntaxdatatypes01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-datatypes-02
    // integer as xsd:string
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxdatatypes02trigsyntaxdatatypes02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-01
    // Empty file
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxfile01trigsyntaxfile01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-02
    // Only comment
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxfile02trigsyntaxfile02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-03
    // One comment, one empty line
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxfile03trigsyntaxfile03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-01
    // boolean literal (true)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxkw01trigsyntaxkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-02
    // boolean literal (false)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxkw02trigsyntaxkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-03
    // 'a' as keyword
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxkw03trigsyntaxkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-01
    // empty list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlists01trigsyntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-02
    // mixed list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlists02trigsyntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-03
    // isomorphic list as subject and object
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlists03trigsyntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-04
    // lists of lists
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlists04trigsyntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-05
    // mixed lists with embedded lists
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlists05trigsyntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ln-colons
    // Colons in pname local names
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlncolonstrigsyntaxlncolons() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-colons.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ln-dots
    // Dots in pname local names
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxlndotstrigsyntaxlndots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-dots.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-minimal-whitespace-01
    // tests absense of whitespace in various positions
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxminimalwhitespace01trigsyntaxminimalwhitespace01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-minimal-whitespace-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ns-dots
    // Dots in namespace names
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnsdotstrigsyntaxnsdots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ns-dots.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-01
    // integer literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber01trigsyntaxnumber01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-02
    // negative integer literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber02trigsyntaxnumber02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-03
    // positive integer literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber03trigsyntaxnumber03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-04
    // decimal literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber04trigsyntaxnumber04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-05
    // decimal literal (no leading digits)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber05trigsyntaxnumber05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-06
    // negative decimal literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber06trigsyntaxnumber06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-07
    // positive decimal literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber07trigsyntaxnumber07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-08
    // integer literal with decimal lexical confusion
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber08trigsyntaxnumber08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-09
    // double literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber09trigsyntaxnumber09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-10
    // negative double literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber10trigsyntaxnumber10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-11
    // double literal no fraction
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxnumber11trigsyntaxnumber11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-01
    // pname with back-slash escapes
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxpnameesc01trigsyntaxpnameesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-02
    // pname with back-slash escapes (2)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxpnameesc02trigsyntaxpnameesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-03
    // pname with back-slash escapes (3)
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxpnameesc03trigsyntaxpnameesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-01
    // @prefix
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix01trigsyntaxprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-02
    // PreFIX
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix02trigsyntaxprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-03
    // Empty PREFIX
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix03trigsyntaxprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-04
    // Empty @prefix with % escape
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix04trigsyntaxprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-05
    // @prefix with no suffix
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix05trigsyntaxprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-06
    // colon is a legal pname character
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix06trigsyntaxprefix06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-07
    // dash is a legal pname character
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix07trigsyntaxprefix07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-08
    // underscore is a legal pname character
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix08trigsyntaxprefix08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-09
    // percents in pnames
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxprefix09trigsyntaxprefix09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-01
    // string literal with escaped newline
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstresc01trigsyntaxstresc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-02
    // string literal with Unicode escape
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstresc02trigsyntaxstresc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-03
    // string literal with long Unicode escape
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstresc03trigsyntaxstresc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-01
    // string literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring01trigsyntaxstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-02
    // langString literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring02trigsyntaxstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-03
    // langString literal with region
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring03trigsyntaxstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-04
    // squote string literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring04trigsyntaxstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-05
    // squote langString literal
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring05trigsyntaxstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-06
    // squote langString literal with region
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring06trigsyntaxstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-07
    // long string literal with embedded single- and double-quotes
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring07trigsyntaxstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-08
    // long string literal with embedded newline
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring08trigsyntaxstring08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-09
    // squote long string literal with embedded single- and double-quotes
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring09trigsyntaxstring09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-10
    // long langString literal with embedded newline
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring10trigsyntaxstring10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-11
    // squote long langString literal with embedded newline
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstring11trigsyntaxstring11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-01
    // object list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct01trigsyntaxstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-02
    // predicate list with object list
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct02trigsyntaxstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-03
    // predicate list with object list and dangling ';'
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct03trigsyntaxstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-04
    // predicate list with multiple ;;
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct04trigsyntaxstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-05
    // predicate list with multiple ;;
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct05trigsyntaxstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-06
    // missing '.'
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct06trigsyntaxstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-07
    // trailing ';' no '.'
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxstruct07trigsyntaxstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-01
    // Only IRIs
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxuri01trigsyntaxuri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-02
    // IRIs with Unicode escape
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxuri02trigsyntaxuri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-03
    // IRIs with long Unicode escape
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxuri03trigsyntaxuri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-04
    // Legal IRIs
    @Test
    public void rdf11rdftrigmanifestttltrigsyntaxuri04trigsyntaxuri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-01
    // TriG can parse Turtle
    @Test
    public void rdf11rdftrigmanifestttltrigturtle01trigturtle01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-02
    // TriG can parse Turtle (repeated PREFIX)
    @Test
    public void rdf11rdftrigmanifestttltrigturtle02trigturtle02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-03
    // TriG can parse Turtle (blankNodePropertyList subject)
    @Test
    public void rdf11rdftrigmanifestttltrigturtle03trigturtle03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-04
    // TriG can parse Turtle (blankNodePropertyList subject)
    @Test
    public void rdf11rdftrigmanifestttltrigturtle04trigturtle04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-05
    // TriG can parse Turtle (bare blankNodePropertyList)
    @Test
    public void rdf11rdftrigmanifestttltrigturtle05trigturtle05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-06
    // TriG can parse Turtle (collection subject and object)
    @Test
    public void rdf11rdftrigmanifestttltrigturtle06trigturtle06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-bad-01
    // Trailing dot required in Turtle block
    @Test
    public void rdf11rdftrigmanifestttltrigturtlebad01trigturtlebad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-turtle-bad-02
    // TriG is not N-Quads
    @Test
    public void rdf11rdftrigmanifestttltrigturtlebad02trigturtlebad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // two_LITERAL_LONG2s
    // two LITERAL_LONG2s testing quote delimiter overrun
    @Test
    public void rdf11rdftrigmanifestttltwo_literal_long2stwo_literal_long2s() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.nq"));
        
        Path convertedActionFilePath = Path.of("two_LITERAL_LONG2s.trig");
        Path canonConvertedActionFilePath = Path.of("two_LITERAL_LONG2s.trig");
        Path canonConvertedResultFilePath = Path.of("two_LITERAL_LONG2s.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // underscore_in_localName
    // underscore in local name
    @Test
    public void rdf11rdftrigmanifestttlunderscore_in_localnameunderscore_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.nq"));
        
        Path convertedActionFilePath = Path.of("underscore_in_localName.trig");
        Path canonConvertedActionFilePath = Path.of("underscore_in_localName.trig");
        Path canonConvertedResultFilePath = Path.of("underscore_in_localName.nq");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

}