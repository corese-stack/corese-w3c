package fr.inria.corese.w3c.rdf11trig;

import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-09-27, Time: 14:23:31 Europe/Paris
 */
public class rdf11trigTest {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/rdf11trig/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // HYPHEN_MINUS_in_localName
    // HYPHEN-MINUS in local name
    @Test
    public void hyphen_minus_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/HYPHEN_MINUS_in_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-01
    // IRI resolution (RFC3986 original cases)
    @Test
    public void iriresolution01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-02
    // IRI resolution (RFC3986 using base IRI with trailing slash)
    @Test
    public void iriresolution02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-07
    // IRI resolution (RFC3986 using base IRI with file path)
    @Test
    public void iriresolution07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-07.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-08
    // IRI resolution (miscellaneous cases)
    @Test
    public void iriresolution08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI-resolution-08.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRIREF_datatype
    // IRIREF datatype ""^^<t>
    @Test
    public void iriref_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_subject
    // IRI subject
    @Test
    public void iri_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_all_punctuation
    // IRI with all punctuation
    @Test
    public void iri_with_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_all_punctuation.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_eight_digit_numeric_escape
    // IRI with eight digit numeric escape (\U)
    @Test
    public void iri_with_eight_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_eight_digit_numeric_escape.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_four_digit_numeric_escape
    // IRI with four digit numeric escape ()
    @Test
    public void iri_with_four_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_with_four_digit_numeric_escape.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1
    // LITERAL1 'x'
    @Test
    public void literal1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_controls
    // LITERAL1_all_controls '\x00\x01\x02\x03\x04...'
    @Test
    public void literal1_all_controls() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_controls.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_punctuation
    // LITERAL1_all_punctuation '!"#$%&()...'
    @Test
    public void literal1_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_all_punctuation.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_ascii_boundaries
    // LITERAL1_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x26\x28...'
    @Test
    public void literal1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_with_UTF8_boundaries
    // LITERAL1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void literal1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2
    // LITERAL2 "x"
    @Test
    public void literal2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_ascii_boundaries
    // LITERAL2_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x21\x23...'
    @Test
    public void literal2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_with_UTF8_boundaries
    // LITERAL2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void literal2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL2_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1
    // LITERAL_LONG1 '''x'''
    @Test
    public void literal_long1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_ascii_boundaries
    // LITERAL_LONG1_ascii_boundaries '\x00\x26\x28...'
    @Test
    public void literal_long1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_1_squote
    // LITERAL_LONG1 with 1 squote '''a'b'''
    @Test
    public void literal_long1_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_1_squote.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_2_squotes
    // LITERAL_LONG1 with 2 squotes '''a''b'''
    @Test
    public void literal_long1_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_2_squotes.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_UTF8_boundaries
    // LITERAL_LONG1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void literal_long1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG1_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2
    // LITERAL_LONG2 """x"""
    @Test
    public void literal_long2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL1.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_ascii_boundaries
    // LITERAL_LONG2_ascii_boundaries '\x00\x21\x23...'
    @Test
    public void literal_long2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_ascii_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_1_squote
    // LITERAL_LONG2 with 1 squote """a"b"""
    @Test
    public void literal_long2_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_1_squote.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_2_squotes
    // LITERAL_LONG2 with 2 squotes """a""b"""
    @Test
    public void literal_long2_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_2_squotes.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_REVERSE_SOLIDUS
    // REVERSE SOLIDUS at end of LITERAL_LONG2
    @Test
    public void literal_long2_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_REVERSE_SOLIDUS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_UTF8_boundaries
    // LITERAL_LONG2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void literal_long2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_LONG2_with_UTF8_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/LITERAL_with_UTF8_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_base
    // SPARQL-style base
    @Test
    public void sparql_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_base.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_prefix
    // SPARQL-style prefix
    @Test
    public void sparql_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/SPARQL_style_prefix.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // alternating_bnode_graphs
    // alternating graphs with BNode names
    @Test
    public void alternating_bnode_graphs() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_bnode_graphs.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // alternating_iri_graphs
    // alternating graphs with IRI names
    @Test
    public void alternating_iri_graphs() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/alternating_iri_graphs.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_graph
    // anonymous blank node graph
    @Test
    public void anonymous_blank_node_graph() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_graph.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_object
    // anonymous blank node object
    @Test
    public void anonymous_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_subject
    // anonymous blank node subject
    @Test
    public void anonymous_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/anonymous_blank_node_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_a_predicate
    // bareword a predicate
    @Test
    public void bareword_a_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_a_predicate.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_decimal
    // bareword decimal
    @Test
    public void bareword_decimal() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_decimal.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_double
    // bareword double
    @Test
    public void bareword_double() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_double.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_integer
    // bareword integer
    @Test
    public void bareword_integer() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/bareword_integer.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_object
    // blankNodePropertyList as object <s> <p> [ … ] .
    @Test
    public void blanknodepropertylist_as_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_subject
    // blankNodePropertyList as subject [ … ] <p> <o> .
    @Test
    public void blanknodepropertylist_as_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_as_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_containing_collection
    // blankNodePropertyList containing collection [ <p1> ( … ) ]
    @Test
    public void blanknodepropertylist_containing_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_containing_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_with_multiple_triples
    // blankNodePropertyList with multiple triples [ <s> <p> ; <s2> <p2> ]
    @Test
    public void blanknodepropertylist_with_multiple_triples() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/blankNodePropertyList_with_multiple_triples.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_object
    // collection object
    @Test
    public void collection_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_subject
    // collection subject
    @Test
    public void collection_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/collection_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_PNAME_NS
    // comment following PNAME_NS
    @Test
    public void comment_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_PNAME_NS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_localName
    // comment following localName
    @Test
    public void comment_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/comment_following_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // default_namespace_IRI
    // default namespace IRI (:ln)
    @Test
    public void default_namespace_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/default_namespace_IRI.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // double_lower_case_e
    // double lower case e
    @Test
    public void double_lower_case_e() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/double_lower_case_e.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // empty_collection
    // empty collection ()
    @Test
    public void empty_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/empty_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // first
    // first, not last, non-empty nested collection
    @Test
    public void first() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/first.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_graph
    // labeled blank node graph
    @Test
    public void labeled_blank_node_graph() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_graph.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_object
    // labeled blank node object
    @Test
    public void labeled_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_subject
    // labeled blank node subject
    @Test
    public void labeled_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_subject.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_PN_CHARS_BASE_character_boundaries
    // labeled blank node with PN_CHARS_BASE character boundaries (_:AZazÀÖØöø...)
    @Test
    public void labeled_blank_node_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_digit
    // labeled blank node with_leading_digit (_:0)
    @Test
    public void labeled_blank_node_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_digit.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_underscore
    // labeled blank node with_leading_underscore (_:_)
    @Test
    public void labeled_blank_node_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_leading_underscore.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_non_leading_extras
    // labeled blank node with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void labeled_blank_node_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/labeled_blank_node_object.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG
    // langtagged LONG """x"""@en
    @Test
    public void langtagged_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG_with_subtag
    // langtagged LONG with subtag """Cheers"""@en-UK
    @Test
    public void langtagged_long_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_LONG_with_subtag.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_non_LONG
    // langtagged non-LONG "x"@en
    @Test
    public void langtagged_non_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/langtagged_non_LONG.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // lantag_with_subtag
    // lantag with subtag "x"@en-us
    @Test
    public void lantag_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/lantag_with_subtag.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // last
    // last, not first, non-empty nested collection
    @Test
    public void last() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/last.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_false
    // literal false
    @Test
    public void literal_false() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_false.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_true
    // literal true
    @Test
    public void literal_true() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_true.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_BACKSPACE
    // literal with BACKSPACE
    @Test
    public void literal_with_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CARRIAGE_RETURN
    // literal with CARRIAGE RETURN
    @Test
    public void literal_with_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CHARACTER_TABULATION
    // literal with CHARACTER TABULATION
    @Test
    public void literal_with_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_FORM_FEED
    // literal with FORM FEED
    @Test
    public void literal_with_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_LINE_FEED
    // literal with LINE FEED
    @Test
    public void literal_with_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_REVERSE_SOLIDUS
    // literal with REVERSE SOLIDUS
    @Test
    public void literal_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_REVERSE_SOLIDUS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_BACKSPACE
    // literal with escaped BACKSPACE
    @Test
    public void literal_with_escaped_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_BACKSPACE.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_BACKSPACE.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CARRIAGE_RETURN
    // literal with escaped CARRIAGE RETURN
    @Test
    public void literal_with_escaped_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CARRIAGE_RETURN.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CARRIAGE_RETURN.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CHARACTER_TABULATION
    // literal with escaped CHARACTER TABULATION
    @Test
    public void literal_with_escaped_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_CHARACTER_TABULATION.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_CHARACTER_TABULATION.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_FORM_FEED
    // literal with escaped FORM FEED
    @Test
    public void literal_with_escaped_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_FORM_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_FORM_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_LINE_FEED
    // literal with escaped LINE FEED
    @Test
    public void literal_with_escaped_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_escaped_LINE_FEED.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_LINE_FEED.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape4
    // literal with numeric escape4
    @Test
    public void literal_with_numeric_escape4() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape8
    // literal with numeric escape8 \U
    @Test
    public void literal_with_numeric_escape8() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape8.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/literal_with_numeric_escape4.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void localname_with_assigned_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized, basic-multilingual-plane PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void localname_with_assigned_nfc_bmp_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_digit
    // localName with leading digit (p:_)
    @Test
    public void localname_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_digit.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_underscore
    // localName with leading underscore (p:_)
    @Test
    public void localname_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_leading_underscore.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_nfc_PN_CHARS_BASE_character_boundaries
    // localName with nfc-normalize PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void localname_with_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_non_leading_extras
    // localName with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void localname_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localName_with_non_leading_extras.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localname_with_COLON
    // localname with COLON
    @Test
    public void localname_with_colon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/localname_with_COLON.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // negative_numeric
    // negative numeric
    @Test
    public void negative_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/negative_numeric.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_blankNodePropertyLists
    // nested blankNodePropertyLists [ <p1> [ <p2> <o2> ] ; <p3> <o3> ]
    @Test
    public void nested_blanknodepropertylists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_blankNodePropertyLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_collection
    // nested collection (())
    @Test
    public void nested_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/nested_collection.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_PNAME_NS
    // number sign following PNAME_NS
    @Test
    public void number_sign_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_PNAME_NS.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_localName
    // number sign following localName
    @Test
    public void number_sign_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/number_sign_following_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // numeric_with_leading_0
    // numeric with leading 0
    @Test
    public void numeric_with_leading_0() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/numeric_with_leading_0.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // objectList_with_two_objects
    // objectList with two objects … <o1>,<o2>
    @Test
    public void objectlist_with_two_objects() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/objectList_with_two_objects.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_base
    // old-style base
    @Test
    public void old_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_base.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_prefix
    // old-style prefix
    @Test
    public void old_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/old_style_prefix.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // percent_escaped_localName
    // percent-escaped local name
    @Test
    public void percent_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/percent_escaped_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // positive_numeric
    // positive numeric
    @Test
    public void positive_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/positive_numeric.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // predicateObjectList_with_two_objectLists
    // predicateObjectList with two objectLists … <o1>,<o2>
    @Test
    public void predicateobjectlist_with_two_objectlists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_only_IRI
    // prefix-only IRI (p:)
    @Test
    public void prefix_only_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_only_IRI.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_reassigned_and_used
    // prefix reassigned and used
    @Test
    public void prefix_reassigned_and_used() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_reassigned_and_used.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_PN_CHARS_BASE_character_boundaries
    // prefix with PN CHARS BASE character boundaries (prefix: AZazÀÖØöø...:)
    @Test
    public void prefix_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_PN_CHARS_BASE_character_boundaries.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_non_leading_extras
    // prefix with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void prefix_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefix_with_non_leading_extras.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_object
    // prefixed IRI object
    @Test
    public void prefixed_iri_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_object.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_predicate
    // prefixed IRI predicate
    @Test
    public void prefixed_iri_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_IRI_predicate.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRI_spo.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_name_datatype
    // prefixed name datatype ""^^p:t
    @Test
    public void prefixed_name_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/prefixed_name_datatype.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/IRIREF_datatype.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_at_end
    // repeated semis at end <s> <p> <o> ;; <p2> <o2> .
    @Test
    public void repeated_semis_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_at_end.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/predicateObjectList_with_two_objectLists.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_not_at_end
    // repeated semis not at end <s> <p> <o> ;;.
    @Test
    public void repeated_semis_not_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/repeated_semis_not_at_end.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // reserved_escaped_localName
    // reserved-escaped local name
    @Test
    public void reserved_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/reserved_escaped_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // sole_blankNodePropertyList
    // sole blankNodePropertyList [ <p> <o> ] .
    @Test
    public void sole_blanknodepropertylist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/sole_blankNodePropertyList.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-bnodeplist-graph-bad-01
    // A graph may not be named with a blankNodePropertyList
    @Test
    public void trigbnodeplistgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-bnodeplist-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-bnodeplist-graph-bad-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-collection-graph-bad-01
    // A graph may not be named with an empty collection
    @Test
    public void trigcollectiongraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-collection-graph-bad-02
    // A graph may not be named with a collection
    @Test
    public void trigcollectiongraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-collection-graph-bad-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-01
    // Bad IRI : good escape, bad charcater (negative evaluation test)
    @Test
    public void trigevalbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-02
    // Bad IRI : hex 3C is < (negative evaluation test)
    @Test
    public void trigevalbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-03
    // Bad IRI : hex 3E is  (negative evaluation test)
    @Test
    public void trigevalbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-bad-04
    // Bad IRI : {abc} (negative evaluation test)
    @Test
    public void trigevalbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-bad-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-eval-struct-01
    // triple with IRIs
    @Test
    public void trigevalstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-eval-struct-02
    // triple with IRIs and embedded whitespace
    @Test
    public void trigevalstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-eval-struct-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-graph-bad-01
    // GRAPH but no name - GRAPH is not used with the default graph
    @Test
    public void triggraphbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-02
    // GRAPH not followed by DOT
    @Test
    public void triggraphbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-03
    // GRAPH needs {}
    @Test
    public void triggraphbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-04
    // GRAPH needs {}
    @Test
    public void triggraphbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-05
    // GRAPH and a name, not several
    @Test
    public void triggraphbad05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-06
    // GRAPH - Must close {}
    @Test
    public void triggraphbad06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-07
    // GRAPH may not include a GRAPH
    @Test
    public void triggraphbad07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-08
    // @graph is not a keyword
    @Test
    public void triggraphbad08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-09
    // Directives not allowed inside GRAPH
    @Test
    public void triggraphbad09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-10
    // A graph may not be named with an empty collection
    @Test
    public void triggraphbad10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-graph-bad-11
    // A graph may not be named with a collection
    @Test
    public void triggraphbad11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-graph-bad-11.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-kw-graph-01
    // Named graphs can be proceeded by GRAPH
    @Test
    public void trigkwgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-02
    // Trailing . not necessary inside {}
    @Test
    public void trigkwgraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-03
    // Named graph may be empty
    @Test
    public void trigkwgraph03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-04
    @Test
    public void trigkwgraph04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-05
    // Use of empty prefix inside named graph
    @Test
    public void trigkwgraph05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-06
    @Test
    public void trigkwgraph06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-07
    // Named graph may be named with BNode _:a
    @Test
    public void trigkwgraph07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-08
    // Named graph may be named with BNode []
    @Test
    public void trigkwgraph08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-09
    // Named graph may be named with PNAME
    @Test
    public void trigkwgraph09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-kw-graph-10
    // Named graph with PNAME and empty graph
    @Test
    public void trigkwgraph10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-kw-graph-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-subm-01
    // Blank subject
    @Test
    public void trigsubm01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-01.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-02
    // @prefix and qnames
    @Test
    public void trigsubm02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-02.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-03
    // , operator
    @Test
    public void trigsubm03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-03.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-04
    // ; operator
    @Test
    public void trigsubm04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-04.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-05
    // empty [] as subject and object
    @Test
    public void trigsubm05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-05.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-06
    // non-empty [] as subject and object
    @Test
    public void trigsubm06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-06.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-07
    // 'a' as predicate
    @Test
    public void trigsubm07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-07.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-08
    // simple collection
    @Test
    public void trigsubm08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-08.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-09
    // empty collection
    @Test
    public void trigsubm09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-09.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-10
    // integer datatyped literal
    @Test
    public void trigsubm10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-10.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-11
    // decimal integer canonicalization
    @Test
    public void trigsubm11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-11.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-12
    // - and _ in names and qnames
    @Test
    public void trigsubm12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-12.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-13
    // tests for rdf:_<numbers> and other qnames starting with _
    @Test
    public void trigsubm13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-13.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-14
    // bare : allowed
    @Test
    public void trigsubm14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-14.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-15
    // simple long literal
    @Test
    public void trigsubm15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-15.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-16
    // long literals with escapes
    @Test
    public void trigsubm16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-16.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-17
    // floating point number
    @Test
    public void trigsubm17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-17.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-18
    // empty literals, normal and long variant
    @Test
    public void trigsubm18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-18.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-19
    // positive integer, decimal and doubles
    @Test
    public void trigsubm19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-19.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-20
    // negative integer, decimal and doubles
    @Test
    public void trigsubm20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-20.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-21
    // long literal ending in double quote
    @Test
    public void trigsubm21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-21.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-22
    // boolean literals
    @Test
    public void trigsubm22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-22.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-23
    // comments
    @Test
    public void trigsubm23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-23.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-24
    // no final mewline
    @Test
    public void trigsubm24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-24.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-25
    // repeating a @prefix changes pname definition
    @Test
    public void trigsubm25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-25.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-26
    // Variations on decimal canonicalization
    @Test
    public void trigsubm26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-26.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-subm-27
    // Repeating @base changes base for relative IRI lookup
    @Test
    public void trigsubm27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-subm-27.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // trig-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadliteral2_with_langtag_and_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-LITERAL2_with_langtag_and_datatype.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-LITERAL2_with_langtag_and_datatype.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-01
    // @base without URI (negative test)
    @Test
    public void trigsyntaxbadbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-02
    // @base in wrong case (negative test)
    @Test
    public void trigsyntaxbadbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-03
    // BASE without URI (negative test)
    @Test
    public void trigsyntaxbadbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-04
    // @base inside graph (negative test)
    @Test
    public void trigsyntaxbadbase04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-base-05
    // BASE inside graph (negative test)
    @Test
    public void trigsyntaxbadbase05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-base-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-blank-label-dot-end
    // Blank node label must not end in dot
    @Test
    public void trigsyntaxbadblanklabeldotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-blank-label-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-blank-label-dot-end.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-bnode-01
    // Colon in bnode label not allowed (negative test)
    @Test
    public void trigsyntaxbadbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-01.trig",
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-bnode-02
    // Colon in bnode label not allowed (negative test)
    @Test
    public void trigsyntaxbadbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-bnode-02.trig",
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-01
    // Bad string escape (negative test)
    @Test
    public void trigsyntaxbadesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-02
    // Bad string escape (negative test)
    @Test
    public void trigsyntaxbadesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-03
    // Bad string escape (negative test)
    @Test
    public void trigsyntaxbadesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-esc-04
    // Bad string escape (negative test)
    @Test
    public void trigsyntaxbadesc04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-esc-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-01
    // 'A' is not a keyword (negative test)
    @Test
    public void trigsyntaxbadkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-02
    // 'a' cannot be used as subject (negative test)
    @Test
    public void trigsyntaxbadkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-03
    // 'a' cannot be used as object (negative test)
    @Test
    public void trigsyntaxbadkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-04
    // 'true' cannot be used as subject (negative test)
    @Test
    public void trigsyntaxbadkw04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-kw-05
    // 'true' cannot be used as object (negative test)
    @Test
    public void trigsyntaxbadkw05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-kw-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-lang-01
    // langString with bad lang (negative test)
    @Test
    public void trigsyntaxbadlang01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-lang-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-lang-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-01
    // Free-standing list outside {} : bad syntax
    @Test
    public void trigsyntaxbadlist01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-02
    // Free-standing list of zero-elements outside {} : bad syntax
    @Test
    public void trigsyntaxbadlist02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-03
    // Free-standing list inside {} : bad syntax
    @Test
    public void trigsyntaxbadlist03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-list-04
    // Free-standing list of zero elements : bad syntax
    @Test
    public void trigsyntaxbadlist04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-list-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-dash-start
    // Local name must not begin with dash
    @Test
    public void trigsyntaxbadlndashstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-dash-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-dash-start.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-escape
    // Bad hex escape in local name
    @Test
    public void trigsyntaxbadlnescape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ln-escape-start
    // Bad hex escape at start of local name
    @Test
    public void trigsyntaxbadlnescapestart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ln-escape-start.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-missing-ns-dot-end
    // Prefix must not end in dot (error in triple, not prefix directive like trig-syntax-bad-ns-dot-end)
    @Test
    public void trigsyntaxbadmissingnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-end.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-missing-ns-dot-start
    // Prefix must not start with dot (error in triple, not prefix directive like trig-syntax-bad-ns-dot-end)
    @Test
    public void trigsyntaxbadmissingnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-missing-ns-dot-start.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-01
    // {} fomulae not in TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-02
    // = is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-03
    // N3 paths not in TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-04
    // N3 paths not in TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-05
    // N3 is...of not in TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-06
    // N3 paths not in TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-07
    // @keywords is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-08
    // @keywords is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-09
    // => is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-10
    // <= is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-11
    // @forSome is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-11.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-12
    // @forAll is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-12.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-12.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-n3-extras-13
    // @keywords is not TriG (negative test)
    @Test
    public void trigsyntaxbadn3extras13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-13.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-n3-extras-13.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ns-dot-end
    // Prefix must not end in dot
    @Test
    public void trigsyntaxbadnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-end.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-end.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-ns-dot-start
    // Prefix must not start with dot
    @Test
    public void trigsyntaxbadnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-start.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-ns-dot-start.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-01
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadnum01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-02
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadnum02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-03
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadnum03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-04
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadnum04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void trigsyntaxbadnum05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-num-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-number-dot-in-anon
    // Dot delimeter may not appear in anonymous nodes
    @Test
    public void trigsyntaxbadnumberdotinanon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-number-dot-in-anon.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-number-dot-in-anon.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-01
    // '~' must be escaped in pname (negative test)
    @Test
    public void trigsyntaxbadpname01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-02
    // Bad %-sequence in pname (negative test)
    @Test
    public void trigsyntaxbadpname02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-pname-03
    // Bad unicode escape in pname (negative test)
    @Test
    public void trigsyntaxbadpname03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-pname-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-01
    // No prefix (negative test)
    @Test
    public void trigsyntaxbadprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-02
    // No prefix (2) (negative test)
    @Test
    public void trigsyntaxbadprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-03
    // @prefix without URI (negative test)
    @Test
    public void trigsyntaxbadprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-04
    // @prefix without prefix name (negative test)
    @Test
    public void trigsyntaxbadprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-05
    // @prefix without ':' (negative test)
    @Test
    public void trigsyntaxbadprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-06
    // @prefix inside graph (negative test)
    @Test
    public void trigsyntaxbadprefix06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-prefix-07
    // PREFIX inside graph (negative test)
    @Test
    public void trigsyntaxbadprefix07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-prefix-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-01
    // mismatching string literal open/close (negative test)
    @Test
    public void trigsyntaxbadstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-02
    // mismatching string literal open/close (negative test)
    @Test
    public void trigsyntaxbadstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-03
    // mismatching string literal long/short (negative test)
    @Test
    public void trigsyntaxbadstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-04
    // mismatching long string literal open/close (negative test)
    @Test
    public void trigsyntaxbadstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-05
    // Long literal with missing end (negative test)
    @Test
    public void trigsyntaxbadstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-06
    // Long literal with extra quote (negative test)
    @Test
    public void trigsyntaxbadstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-string-07
    // Long literal with extra squote (negative test)
    @Test
    public void trigsyntaxbadstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-string-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-02
    // Turtle is not N3 (negative test)
    @Test
    public void trigsyntaxbadstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-03
    // Turtle is not NQuads (negative test)
    @Test
    public void trigsyntaxbadstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-04
    // Turtle does not allow literals-as-subjects (negative test)
    @Test
    public void trigsyntaxbadstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-05
    // Turtle does not allow literals-as-predicates (negative test)
    @Test
    public void trigsyntaxbadstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-06
    // Turtle does not allow bnodes-as-predicates (negative test)
    @Test
    public void trigsyntaxbadstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-07
    // Turtle does not allow labeled bnodes-as-predicates (negative test)
    @Test
    public void trigsyntaxbadstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-09
    // extra '.' (negative test)
    @Test
    public void trigsyntaxbadstruct09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-10
    // extra '.' (negative test)
    @Test
    public void trigsyntaxbadstruct10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-12
    // subject, predicate, no object (negative test)
    @Test
    public void trigsyntaxbadstruct12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-12.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-12.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-13
    // subject, predicate, no object (negative test)
    @Test
    public void trigsyntaxbadstruct13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-13.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-13.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-14
    // literal as subject (negative test)
    @Test
    public void trigsyntaxbadstruct14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-14.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-14.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-15
    // literal as predicate (negative test)
    @Test
    public void trigsyntaxbadstruct15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-15.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-15.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-16
    // bnode as predicate (negative test)
    @Test
    public void trigsyntaxbadstruct16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-16.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-16.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-struct-17
    // labeled bnode as predicate (negative test)
    @Test
    public void trigsyntaxbadstruct17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-17.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-struct-17.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-01
    // Bad IRI : space (negative test)
    @Test
    public void trigsyntaxbaduri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-02
    // Bad IRI : bad escape (negative test)
    @Test
    public void trigsyntaxbaduri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-03
    // Bad IRI : bad long escape (negative test)
    @Test
    public void trigsyntaxbaduri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-04
    // Bad IRI : character escapes not allowed (negative test)
    @Test
    public void trigsyntaxbaduri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-bad-uri-05
    // Bad IRI : character escapes not allowed (2) (negative test)
    @Test
    public void trigsyntaxbaduri05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bad-uri-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-syntax-base-01
    // @base
    @Test
    public void trigsyntaxbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-02
    // BASE
    @Test
    public void trigsyntaxbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-03
    // @base with relative IRIs
    @Test
    public void trigsyntaxbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-base-04
    // base with relative IRIs
    @Test
    public void trigsyntaxbase04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-base-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-blank-label
    // Characters allowed in blank node labels
    @Test
    public void trigsyntaxblanklabel() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-blank-label.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-blank-label.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-01
    // bnode subject
    @Test
    public void trigsyntaxbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-02
    // bnode object
    @Test
    public void trigsyntaxbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-03
    // bnode property list object
    @Test
    public void trigsyntaxbnode03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-04
    // bnode property list object (2)
    @Test
    public void trigsyntaxbnode04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-05
    // bnode property list subject
    @Test
    public void trigsyntaxbnode05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-06
    // labeled bnode subject
    @Test
    public void trigsyntaxbnode06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-07
    // labeled bnode subject and object
    @Test
    public void trigsyntaxbnode07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-08
    // bare bnode property list
    @Test
    public void trigsyntaxbnode08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-09
    // bnode property list
    @Test
    public void trigsyntaxbnode09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-bnode-10
    // mixed bnode property list and triple
    @Test
    public void trigsyntaxbnode10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-bnode-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-datatypes-01
    // xsd:byte literal
    @Test
    public void trigsyntaxdatatypes01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-datatypes-02
    // integer as xsd:string
    @Test
    public void trigsyntaxdatatypes02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-datatypes-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-01
    // Empty file
    @Test
    public void trigsyntaxfile01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-02
    // Only comment
    @Test
    public void trigsyntaxfile02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-file-03
    // One comment, one empty line
    @Test
    public void trigsyntaxfile03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-file-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-01
    // boolean literal (true)
    @Test
    public void trigsyntaxkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-02
    // boolean literal (false)
    @Test
    public void trigsyntaxkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-kw-03
    // 'a' as keyword
    @Test
    public void trigsyntaxkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-kw-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-01
    // empty list
    @Test
    public void trigsyntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-02
    // mixed list
    @Test
    public void trigsyntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-03
    // isomorphic list as subject and object
    @Test
    public void trigsyntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-04
    // lists of lists
    @Test
    public void trigsyntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-lists-05
    // mixed lists with embedded lists
    @Test
    public void trigsyntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-lists-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ln-colons
    // Colons in pname local names
    @Test
    public void trigsyntaxlncolons() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-colons.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-colons.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ln-dots
    // Dots in pname local names
    @Test
    public void trigsyntaxlndots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-dots.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ln-dots.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-minimal-whitespace-01
    // tests absense of whitespace in various positions
    @Test
    public void trigsyntaxminimalwhitespace01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-minimal-whitespace-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-minimal-whitespace-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-ns-dots
    // Dots in namespace names
    @Test
    public void trigsyntaxnsdots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ns-dots.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-ns-dots.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-01
    // integer literal
    @Test
    public void trigsyntaxnumber01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-02
    // negative integer literal
    @Test
    public void trigsyntaxnumber02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-03
    // positive integer literal
    @Test
    public void trigsyntaxnumber03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-04
    // decimal literal
    @Test
    public void trigsyntaxnumber04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-05
    // decimal literal (no leading digits)
    @Test
    public void trigsyntaxnumber05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-06
    // negative decimal literal
    @Test
    public void trigsyntaxnumber06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-07
    // positive decimal literal
    @Test
    public void trigsyntaxnumber07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-08
    // integer literal with decimal lexical confusion
    @Test
    public void trigsyntaxnumber08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-09
    // double literal
    @Test
    public void trigsyntaxnumber09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-10
    // negative double literal
    @Test
    public void trigsyntaxnumber10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-number-11
    // double literal no fraction
    @Test
    public void trigsyntaxnumber11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-number-11.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-01
    // pname with back-slash escapes
    @Test
    public void trigsyntaxpnameesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-02
    // pname with back-slash escapes (2)
    @Test
    public void trigsyntaxpnameesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-pname-esc-03
    // pname with back-slash escapes (3)
    @Test
    public void trigsyntaxpnameesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-pname-esc-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-01
    // @prefix
    @Test
    public void trigsyntaxprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-02
    // PreFIX
    @Test
    public void trigsyntaxprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-03
    // Empty PREFIX
    @Test
    public void trigsyntaxprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-04
    // Empty @prefix with % escape
    @Test
    public void trigsyntaxprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-05
    // @prefix with no suffix
    @Test
    public void trigsyntaxprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-06
    // colon is a legal pname character
    @Test
    public void trigsyntaxprefix06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-07
    // dash is a legal pname character
    @Test
    public void trigsyntaxprefix07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-08
    // underscore is a legal pname character
    @Test
    public void trigsyntaxprefix08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-prefix-09
    // percents in pnames
    @Test
    public void trigsyntaxprefix09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-prefix-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-01
    // string literal with escaped newline
    @Test
    public void trigsyntaxstresc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-02
    // string literal with Unicode escape
    @Test
    public void trigsyntaxstresc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-str-esc-03
    // string literal with long Unicode escape
    @Test
    public void trigsyntaxstresc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-str-esc-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-01
    // string literal
    @Test
    public void trigsyntaxstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-02
    // langString literal
    @Test
    public void trigsyntaxstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-03
    // langString literal with region
    @Test
    public void trigsyntaxstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-04
    // squote string literal
    @Test
    public void trigsyntaxstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-05
    // squote langString literal
    @Test
    public void trigsyntaxstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-06
    // squote langString literal with region
    @Test
    public void trigsyntaxstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-07
    // long string literal with embedded single- and double-quotes
    @Test
    public void trigsyntaxstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-08
    // long string literal with embedded newline
    @Test
    public void trigsyntaxstring08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-08.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-08.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-09
    // squote long string literal with embedded single- and double-quotes
    @Test
    public void trigsyntaxstring09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-09.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-09.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-10
    // long langString literal with embedded newline
    @Test
    public void trigsyntaxstring10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-10.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-10.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-string-11
    // squote long langString literal with embedded newline
    @Test
    public void trigsyntaxstring11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-11.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-string-11.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-01
    // object list
    @Test
    public void trigsyntaxstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-02
    // predicate list with object list
    @Test
    public void trigsyntaxstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-03
    // predicate list with object list and dangling ';'
    @Test
    public void trigsyntaxstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-04
    // predicate list with multiple ;;
    @Test
    public void trigsyntaxstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-05
    // predicate list with multiple ;;
    @Test
    public void trigsyntaxstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-06
    // missing '.'
    @Test
    public void trigsyntaxstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-struct-07
    // trailing ';' no '.'
    @Test
    public void trigsyntaxstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-07.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-struct-07.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-01
    // Only IRIs
    @Test
    public void trigsyntaxuri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-02
    // IRIs with Unicode escape
    @Test
    public void trigsyntaxuri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-03
    // IRIs with long Unicode escape
    @Test
    public void trigsyntaxuri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-syntax-uri-04
    // Legal IRIs
    @Test
    public void trigsyntaxuri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-syntax-uri-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-01
    // TriG can parse Turtle
    @Test
    public void trigturtle01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-02
    // TriG can parse Turtle (repeated PREFIX)
    @Test
    public void trigturtle02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-03
    // TriG can parse Turtle (blankNodePropertyList subject)
    @Test
    public void trigturtle03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-03.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-03.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-04
    // TriG can parse Turtle (blankNodePropertyList subject)
    @Test
    public void trigturtle04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-04.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-04.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-05
    // TriG can parse Turtle (bare blankNodePropertyList)
    @Test
    public void trigturtle05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-05.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-05.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-06
    // TriG can parse Turtle (collection subject and object)
    @Test
    public void trigturtle06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-06.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-06.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // trig-turtle-bad-01
    // Trailing dot required in Turtle block
    @Test
    public void trigturtlebad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-01.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-01.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // trig-turtle-bad-02
    // TriG is not N-Quads
    @Test
    public void trigturtlebad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-02.trig"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/trig-turtle-bad-02.trig",
                "-if", "trig",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // two_LITERAL_LONG2s
    // two LITERAL_LONG2s testing quote delimiter overrun
    @Test
    public void two_literal_long2s() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/two_LITERAL_LONG2s.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // underscore_in_localName
    // underscore in local name
    @Test
    public void underscore_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig"));

        TestFileManager.loadFile(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.nq"));
        
        Path convertedActionFilePath = Paths.get(TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig "));
        Path canonConvertedActionFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig"));
        Path canonConvertedResultFilePath = Paths.get("canon", TestFileManager.getFileName("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.nq"));

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.trig",
                "-if", "trig",
                "-of", "nquads",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-trig/underscore_in_localName.nq",
                "-if", "nquads",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "nquads",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

}