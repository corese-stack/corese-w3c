package fr.inria.corese.w3c.sparql10;

import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.xml.sax.SAXException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/sparql/sparql10/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-25, Time: 16:32:02 Europe/Paris
 */
public class sparql10Test {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/sparql10/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/sparql/sparql10/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            Files.createDirectories(testReportPath.getParent());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.createDirectories(testReportPath.getParent());
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // Filter-nested - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-nested-1
    // A FILTER is in scope for variables bound at the same level of the query tree
    @Test
    public void datar2algebramanifestfilternested1filternested1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilternested1filternested1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-nested-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-nested-1.srx"), Path.of("src/test/resources/datar2algebramanifestfilternested1filternested1.xml"));
        assertTrue(comparison);
    }

    // Filter-nested - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-nested-2
    // A FILTER in a group { ... } cannot see variables bound outside that group
    @Test
    public void datar2algebramanifestfilternested2filternested2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilternested2filternested2.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-nested-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-nested-2.srx"), Path.of("src/test/resources/datar2algebramanifestfilternested2filternested2.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-1
    // FILTER placed after the triple pattern that contains the variable tested
    @Test
    public void datar2algebramanifestfilterplace1filterplace1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilterplace1filterplace1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-1.srx"), Path.of("src/test/resources/datar2algebramanifestfilterplace1filterplace1.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-2
    // FILTERs are scoped to the nearest enclosing group - placement within that group does not matter
    @Test
    public void datar2algebramanifestfilterplace2filterplace2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilterplace2filterplace2.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-2.srx"), Path.of("src/test/resources/datar2algebramanifestfilterplace2filterplace2.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-3
    // FILTERs are scoped to the nearest enclosing group - placement within that group does not matter
    @Test
    public void datar2algebramanifestfilterplace3filterplace3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilterplace3filterplace3.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-3.srx"), Path.of("src/test/resources/datar2algebramanifestfilterplace3filterplace3.xml"));
        assertTrue(comparison);
    }

    // Filter-scope - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-scope-1
    // FILTERs in an OPTIONAL do not extend to variables bound outside of the LeftJoin(...) operation
    @Test
    public void datar2algebramanifestfilterscope1filterscope1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestfilterscope1filterscope1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-scope-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-scope-1.srx"), Path.of("src/test/resources/datar2algebramanifestfilterscope1filterscope1.xml"));
        assertTrue(comparison);
    }

    // Join operator with OPTs, BGPs, and UNIONs SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-combo-1
    // Tests nested combination of Join with a BGP / OPT and a BGP / UNION
    @Test
    public void datar2algebramanifestjoincombo1joincombo1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/join-combo-graph-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestjoincombo1joincombo1.xml",
                "-q", "src/test/resources/sparql10/algebra/join-combo-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/join-combo-1.srx"), Path.of("src/test/resources/datar2algebramanifestjoincombo1joincombo1.xml"));
        assertTrue(comparison);
    }

    // Join operator with Graph and Union SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-combo-2
    // Tests combination of Join operator with Graph on LHS and Union on RHS
    @Test
    public void datar2algebramanifestjoincombo2joincombo2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/join-combo-graph-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestjoincombo2joincombo2.xml",
                "-q", "src/test/resources/sparql10/algebra/join-combo-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/join-combo-2.srx"), Path.of("src/test/resources/datar2algebramanifestjoincombo2joincombo2.xml"));
        assertTrue(comparison);
    }

    // Join scope - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-scope-1
    // Variables have query scope.
    @Test
    public void datar2algebramanifestjoinscope1joinscope1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/var-scope-join-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestjoinscope1joinscope1.xml",
                "-q", "src/test/resources/sparql10/algebra/var-scope-join-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/var-scope-join-1.srx"), Path.of("src/test/resources/datar2algebramanifestjoinscope1joinscope1.xml"));
        assertTrue(comparison);
    }

    // Nested Optionals - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#nested-opt-1
    // Nested-optionals with a shared variable that does not appear in the middle pattern (a not well-formed query pattern as per "Semantics and Complexity" of SPARQL
    @Test
    public void datar2algebramanifestnestedopt1nestedopt1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/two-nested-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestnestedopt1nestedopt1.xml",
                "-q", "src/test/resources/sparql10/algebra/two-nested-opt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/two-nested-opt.srx"), Path.of("src/test/resources/datar2algebramanifestnestedopt1nestedopt1.xml"));
        assertTrue(comparison);
    }

    // Nested Optionals - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#nested-opt-2
    // OPTIONALs parse in a left-associative manner
    @Test
    public void datar2algebramanifestnestedopt2nestedopt2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/two-nested-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestnestedopt2nestedopt2.xml",
                "-q", "src/test/resources/sparql10/algebra/two-nested-opt-alt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/two-nested-opt-alt.srx"), Path.of("src/test/resources/datar2algebramanifestnestedopt2nestedopt2.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-1
    // A FILTER inside an OPTIONAL can reference a variable bound in the required part of the OPTIONAL
    @Test
    public void datar2algebramanifestoptfilter1optfilter1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestoptfilter1optfilter1.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-1.srx"), Path.of("src/test/resources/datar2algebramanifestoptfilter1optfilter1.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - 2 filters SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-2
    // FILTERs inside an OPTIONAL can refer to variables from both the required and optional parts of the construct.
    @Test
    public void datar2algebramanifestoptfilter2optfilter2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestoptfilter2optfilter2.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-2.srx"), Path.of("src/test/resources/datar2algebramanifestoptfilter2optfilter2.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - scope of variable SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-3
    // FILTERs in an OPTIONAL do not extend to variables bound outside of the LeftJoin(...) operation
    @Test
    public void datar2algebramanifestoptfilter3optfilter3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2algebramanifestoptfilter3optfilter3.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-3.srx"), Path.of("src/test/resources/datar2algebramanifestoptfilter3optfilter3.xml"));
        assertTrue(comparison);
    }

    // ASK-1 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-1
    @Test
    public void datar2askmanifestask1ask1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2askmanifestask1ask1.xml",
                "-q", "src/test/resources/sparql10/ask/ask-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-1.srx"), Path.of("src/test/resources/datar2askmanifestask1ask1.xml"));
        assertTrue(comparison);
    }

    // ASK-4 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-4
    @Test
    public void datar2askmanifestask4ask4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2askmanifestask4ask4.xml",
                "-q", "src/test/resources/sparql10/ask/ask-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-4.srx"), Path.of("src/test/resources/datar2askmanifestask4ask4.xml"));
        assertTrue(comparison);
    }

    // ASK-7 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-7
    @Test
    public void datar2askmanifestask7ask7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2askmanifestask7ask7.xml",
                "-q", "src/test/resources/sparql10/ask/ask-7.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-7.srx"), Path.of("src/test/resources/datar2askmanifestask7ask7.xml"));
        assertTrue(comparison);
    }

    // ASK-8 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-8
    @Test
    public void datar2askmanifestask8ask8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2askmanifestask8ask8.xml",
                "-q", "src/test/resources/sparql10/ask/ask-8.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-8.srx"), Path.of("src/test/resources/datar2askmanifestask8ask8.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-1
    @Test
    public void datar2basicmanifestbaseprefix1baseprefix1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbaseprefix1baseprefix1.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-1.srx"), Path.of("src/test/resources/datar2basicmanifestbaseprefix1baseprefix1.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-2
    @Test
    public void datar2basicmanifestbaseprefix2baseprefix2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbaseprefix2baseprefix2.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-2.srx"), Path.of("src/test/resources/datar2basicmanifestbaseprefix2baseprefix2.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-3
    @Test
    public void datar2basicmanifestbaseprefix3baseprefix3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbaseprefix3baseprefix3.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-3.srx"), Path.of("src/test/resources/datar2basicmanifestbaseprefix3baseprefix3.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-4
    @Test
    public void datar2basicmanifestbaseprefix4baseprefix4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbaseprefix4baseprefix4.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-4.srx"), Path.of("src/test/resources/datar2basicmanifestbaseprefix4baseprefix4.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-5
    @Test
    public void datar2basicmanifestbaseprefix5baseprefix5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbaseprefix5baseprefix5.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-5.srx"), Path.of("src/test/resources/datar2basicmanifestbaseprefix5baseprefix5.xml"));
        assertTrue(comparison);
    }

    // Non-matching triple pattern SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#bgp-no-match
    // Patterns not in data don't match
    @Test
    public void datar2basicmanifestbgpnomatchbgpnomatch() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-7.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestbgpnomatchbgpnomatch.xml",
                "-q", "src/test/resources/sparql10/basic/bgp-no-match.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/bgp-no-match.srx"), Path.of("src/test/resources/datar2basicmanifestbgpnomatchbgpnomatch.xml"));
        assertTrue(comparison);
    }

    // Basic - List 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-1
    @Test
    public void datar2basicmanifestlist1list1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestlist1list1.xml",
                "-q", "src/test/resources/sparql10/basic/list-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-1.srx"), Path.of("src/test/resources/datar2basicmanifestlist1list1.xml"));
        assertTrue(comparison);
    }

    // Basic - List 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-2
    @Test
    public void datar2basicmanifestlist2list2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestlist2list2.xml",
                "-q", "src/test/resources/sparql10/basic/list-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-2.srx"), Path.of("src/test/resources/datar2basicmanifestlist2list2.xml"));
        assertTrue(comparison);
    }

    // Basic - List 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-3
    @Test
    public void datar2basicmanifestlist3list3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestlist3list3.xml",
                "-q", "src/test/resources/sparql10/basic/list-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-3.srx"), Path.of("src/test/resources/datar2basicmanifestlist3list3.xml"));
        assertTrue(comparison);
    }

    // Basic - List 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-4
    @Test
    public void datar2basicmanifestlist4list4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestlist4list4.xml",
                "-q", "src/test/resources/sparql10/basic/list-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-4.srx"), Path.of("src/test/resources/datar2basicmanifestlist4list4.xml"));
        assertTrue(comparison);
    }

    // Prefix name 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#prefix-name-1
    // No local name - foo:
    @Test
    public void datar2basicmanifestprefixname1prefixname1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestprefixname1prefixname1.xml",
                "-q", "src/test/resources/sparql10/basic/prefix-name-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/prefix-name-1.srx"), Path.of("src/test/resources/datar2basicmanifestprefixname1prefixname1.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-1
    @Test
    public void datar2basicmanifestquotes1quotes1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestquotes1quotes1.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-1.srx"), Path.of("src/test/resources/datar2basicmanifestquotes1quotes1.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-2
    @Test
    public void datar2basicmanifestquotes2quotes2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestquotes2quotes2.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-2.srx"), Path.of("src/test/resources/datar2basicmanifestquotes2quotes2.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-3
    @Test
    public void datar2basicmanifestquotes3quotes3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestquotes3quotes3.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-3.srx"), Path.of("src/test/resources/datar2basicmanifestquotes3quotes3.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-4
    @Test
    public void datar2basicmanifestquotes4quotes4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestquotes4quotes4.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-4.srx"), Path.of("src/test/resources/datar2basicmanifestquotes4quotes4.xml"));
        assertTrue(comparison);
    }

    // Basic graph pattern - spoo SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#spoo-1
    // Test the :x :y :o1, :o2 construct
    @Test
    public void datar2basicmanifestspoo1spoo1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestspoo1spoo1.xml",
                "-q", "src/test/resources/sparql10/basic/spoo-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/spoo-1.srx"), Path.of("src/test/resources/datar2basicmanifestspoo1spoo1.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-1
    @Test
    public void datar2basicmanifestterm1term1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm1term1.xml",
                "-q", "src/test/resources/sparql10/basic/term-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-1.srx"), Path.of("src/test/resources/datar2basicmanifestterm1term1.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-2
    @Test
    public void datar2basicmanifestterm2term2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm2term2.xml",
                "-q", "src/test/resources/sparql10/basic/term-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-2.srx"), Path.of("src/test/resources/datar2basicmanifestterm2term2.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-3
    @Test
    public void datar2basicmanifestterm3term3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm3term3.xml",
                "-q", "src/test/resources/sparql10/basic/term-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-3.srx"), Path.of("src/test/resources/datar2basicmanifestterm3term3.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-4
    @Test
    public void datar2basicmanifestterm4term4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm4term4.xml",
                "-q", "src/test/resources/sparql10/basic/term-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-4.srx"), Path.of("src/test/resources/datar2basicmanifestterm4term4.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-5
    @Test
    public void datar2basicmanifestterm5term5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm5term5.xml",
                "-q", "src/test/resources/sparql10/basic/term-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-5.srx"), Path.of("src/test/resources/datar2basicmanifestterm5term5.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 6 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-6
    @Test
    public void datar2basicmanifestterm6term6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm6term6.xml",
                "-q", "src/test/resources/sparql10/basic/term-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-6.srx"), Path.of("src/test/resources/datar2basicmanifestterm6term6.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 7 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-7
    @Test
    public void datar2basicmanifestterm7term7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm7term7.xml",
                "-q", "src/test/resources/sparql10/basic/term-7.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-7.srx"), Path.of("src/test/resources/datar2basicmanifestterm7term7.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 8 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-8
    @Test
    public void datar2basicmanifestterm8term8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm8term8.xml",
                "-q", "src/test/resources/sparql10/basic/term-8.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-8.srx"), Path.of("src/test/resources/datar2basicmanifestterm8term8.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 9 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-9
    @Test
    public void datar2basicmanifestterm9term9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestterm9term9.xml",
                "-q", "src/test/resources/sparql10/basic/term-9.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-9.srx"), Path.of("src/test/resources/datar2basicmanifestterm9term9.xml"));
        assertTrue(comparison);
    }

    // Basic - Var 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#var-1
    @Test
    public void datar2basicmanifestvar1var1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestvar1var1.xml",
                "-q", "src/test/resources/sparql10/basic/var-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/var-1.srx"), Path.of("src/test/resources/datar2basicmanifestvar1var1.xml"));
        assertTrue(comparison);
    }

    // Basic - Var 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#var-2
    @Test
    public void datar2basicmanifestvar2var2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2basicmanifestvar2var2.xml",
                "-q", "src/test/resources/sparql10/basic/var-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/var-2.srx"), Path.of("src/test/resources/datar2basicmanifestvar2var2.xml"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - true SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Non-zero numerics, non-empty strings, and the true boolean have an EBV of true
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev1dawgbev1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev1dawgbev1.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-1.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev1dawgbev1.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - false SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Zero-valued numerics, the empty string, and the false boolean have an EBV of false
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev2dawgbev2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev2dawgbev2.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-2.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev2dawgbev2.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - && SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // The && operator takes the EBV of its operands
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev3dawgbev3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev3dawgbev3.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-3.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev3dawgbev3.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - || SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // The || operator takes the EBV of its operands
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev4dawgbev4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev4dawgbev4.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-4.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev4dawgbev4.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - optional SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-5
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // The EBV of an unbound value  or a literal with an unknown datatype is a type error, which eliminates the solution in question
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev5dawgbev5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev5dawgbev5.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-5.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev5dawgbev5.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - unknown types SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-6
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Negating a type error is still a type error
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbev6dawgbev6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbev6dawgbev6.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-6.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbev6dawgbev6.ttl"));
        assertTrue(comparison);
    }

    // Test literal 'true' SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-boolean-literal
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2booleaneffectivevaluemanifestdawgbooleanliteraldawgbooleanliteral() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2booleaneffectivevaluemanifestdawgbooleanliteraldawgbooleanliteral.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-boolean-literal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-boolean-literal.ttl"), Path.of("src/test/resources/datar2booleaneffectivevaluemanifestdawgbooleanliteraldawgbooleanliteral.ttl"));
        assertTrue(comparison);
    }

    // dawg-bound-query-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/bound/manifest#dawg-bound-query-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // BOUND test case.
    @Test
    public void datar2boundmanifestdawgboundquery001dawgboundquery001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/bound/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2boundmanifestdawgboundquery001dawgboundquery001.ttl",
                "-q", "src/test/resources/sparql10/bound/bound1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/bound/bound1-result.ttl"), Path.of("src/test/resources/datar2boundmanifestdawgboundquery001dawgboundquery001.ttl"));
        assertTrue(comparison);
    }

    // Cast to xsd:boolean SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-bool
    @Test
    public void datar2castmanifestcastboolcastbool() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastboolcastbool.xml",
                "-q", "src/test/resources/sparql10/cast/cast-bool.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-bool.srx"), Path.of("src/test/resources/datar2castmanifestcastboolcastbool.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:dateTime SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dT
    @Test
    public void datar2castmanifestcastdtcastdt() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastdtcastdt.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dT.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dT.srx"), Path.of("src/test/resources/datar2castmanifestcastdtcastdt.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dbl
    @Test
    public void datar2castmanifestcastdblcastdbl() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastdblcastdbl.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dbl.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dbl.srx"), Path.of("src/test/resources/datar2castmanifestcastdblcastdbl.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dec
    @Test
    public void datar2castmanifestcastdeccastdec() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastdeccastdec.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dec.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dec.srx"), Path.of("src/test/resources/datar2castmanifestcastdeccastdec.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-flt
    @Test
    public void datar2castmanifestcastfltcastflt() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastfltcastflt.xml",
                "-q", "src/test/resources/sparql10/cast/cast-flt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-flt.srx"), Path.of("src/test/resources/datar2castmanifestcastfltcastflt.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:integer SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-int
    @Test
    public void datar2castmanifestcastintcastint() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcastintcastint.xml",
                "-q", "src/test/resources/sparql10/cast/cast-int.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-int.srx"), Path.of("src/test/resources/datar2castmanifestcastintcastint.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:string SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-str
    @Test
    public void datar2castmanifestcaststrcaststr() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2castmanifestcaststrcaststr.xml",
                "-q", "src/test/resources/sparql10/cast/cast-str.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-str.srx"), Path.of("src/test/resources/datar2castmanifestcaststrcaststr.xml"));
        assertTrue(comparison);
    }

    // dataset-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-01
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default dataset / Query: default dataset
    @Test
    public void datar2datasetmanifestdawgdataset01dawgdataset01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset01dawgdataset01.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-01.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset01dawgdataset01.ttl"));
        assertTrue(comparison);
    }

    // dataset-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-02
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named dataset / Query: default dataset
    @Test
    public void datar2datasetmanifestdawgdataset02dawgdataset02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset02dawgdataset02.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-02.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset02dawgdataset02.ttl"));
        assertTrue(comparison);
    }

    // dataset-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-03
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named dataset / Query: named dataset dataset
    @Test
    public void datar2datasetmanifestdawgdataset03dawgdataset03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset03dawgdataset03.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-03.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset03dawgdataset03.ttl"));
        assertTrue(comparison);
    }

    // dataset-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-04
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named dataset / Query: default dataset
    @Test
    public void datar2datasetmanifestdawgdataset04dawgdataset04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset04dawgdataset04.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-04.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset04dawgdataset04.ttl"));
        assertTrue(comparison);
    }

    // dataset-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-05
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: default dataset
    @Test
    public void datar2datasetmanifestdawgdataset05dawgdataset05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset05dawgdataset05.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-05.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset05dawgdataset05.ttl"));
        assertTrue(comparison);
    }

    // dataset-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-06
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: named dataset
    @Test
    public void datar2datasetmanifestdawgdataset06dawgdataset06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset06dawgdataset06.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-06.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset06dawgdataset06.ttl"));
        assertTrue(comparison);
    }

    // dataset-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-07
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: all data by UNION
    @Test
    public void datar2datasetmanifestdawgdataset07dawgdataset07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset07dawgdataset07.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-07.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset07dawgdataset07.ttl"));
        assertTrue(comparison);
    }

    // dataset-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-08
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: common subjects
    @Test
    public void datar2datasetmanifestdawgdataset08dawgdataset08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset08dawgdataset08.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-08.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset08dawgdataset08.ttl"));
        assertTrue(comparison);
    }

    // dataset-09b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-09b
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (bnodes) / Query: common subjects
    @Test
    public void datar2datasetmanifestdawgdataset09bdawgdataset09b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset09bdawgdataset09b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-09b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-09.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset09bdawgdataset09b.ttl"));
        assertTrue(comparison);
    }

    // dataset-10b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-10b
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (same data, with bnodes) / Query: common subjects
    @Test
    public void datar2datasetmanifestdawgdataset10bdawgdataset10b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset10bdawgdataset10b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-10b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-10.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset10bdawgdataset10b.ttl"));
        assertTrue(comparison);
    }

    // dataset-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-11
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (several) / Query: get everything
    @Test
    public void datar2datasetmanifestdawgdataset11dawgdataset11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset11dawgdataset11.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-11.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset11dawgdataset11.ttl"));
        assertTrue(comparison);
    }

    // dataset-12b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-12b
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default (several) and named (several) / Query: get everything
    @Test
    public void datar2datasetmanifestdawgdataset12bdawgdataset12b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2datasetmanifestdawgdataset12bdawgdataset12b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-12b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-12.ttl"), Path.of("src/test/resources/datar2datasetmanifestdawgdataset12bdawgdataset12b.ttl"));
        assertTrue(comparison);
    }

    // Numbers: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-1
    @Test
    public void datar2distinctmanifestdistinct1distinct1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-num.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinct1distinct1.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-num.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinct1distinct1.xml"));
        assertTrue(comparison);
    }

    // Strings: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-2
    @Test
    public void datar2distinctmanifestdistinct2distinct2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinct2distinct2.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-str.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinct2distinct2.xml"));
        assertTrue(comparison);
    }

    // Nodes: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-3
    @Test
    public void datar2distinctmanifestdistinct3distinct3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-node.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinct3distinct3.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-node.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinct3distinct3.xml"));
        assertTrue(comparison);
    }

    // Opt: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-4
    @Test
    public void datar2distinctmanifestdistinct4distinct4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinct4distinct4.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-opt.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinct4distinct4.xml"));
        assertTrue(comparison);
    }

    // All: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-9
    @Test
    public void datar2distinctmanifestdistinct9distinct9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-all.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinct9distinct9.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-all.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinct9distinct9.xml"));
        assertTrue(comparison);
    }

    // SELECT DISTINCT * SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-star-1
    @Test
    public void datar2distinctmanifestdistinctstar1distinctstar1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-star.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestdistinctstar1distinctstar1.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-star-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-star-1.srx"), Path.of("src/test/resources/datar2distinctmanifestdistinctstar1distinctstar1.xml"));
        assertTrue(comparison);
    }

    // Numbers: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-1
    @Test
    public void datar2distinctmanifestnodistinct1nodistinct1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-num.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestnodistinct1nodistinct1.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-num.srx"), Path.of("src/test/resources/datar2distinctmanifestnodistinct1nodistinct1.xml"));
        assertTrue(comparison);
    }

    // Strings: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-2
    @Test
    public void datar2distinctmanifestnodistinct2nodistinct2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestnodistinct2nodistinct2.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-str.srx"), Path.of("src/test/resources/datar2distinctmanifestnodistinct2nodistinct2.xml"));
        assertTrue(comparison);
    }

    // Nodes: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-3
    @Test
    public void datar2distinctmanifestnodistinct3nodistinct3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-node.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestnodistinct3nodistinct3.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-node.srx"), Path.of("src/test/resources/datar2distinctmanifestnodistinct3nodistinct3.xml"));
        assertTrue(comparison);
    }

    // Opt: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-4
    @Test
    public void datar2distinctmanifestnodistinct4nodistinct4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestnodistinct4nodistinct4.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-opt.srx"), Path.of("src/test/resources/datar2distinctmanifestnodistinct4nodistinct4.xml"));
        assertTrue(comparison);
    }

    // All: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-9
    @Test
    public void datar2distinctmanifestnodistinct9nodistinct9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-all.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2distinctmanifestnodistinct9nodistinct9.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-all.srx"), Path.of("src/test/resources/datar2distinctmanifestnodistinct9nodistinct9.xml"));
        assertTrue(comparison);
    }

    // datatype-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgdatatype1dawgdatatype1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgdatatype1dawgdatatype1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgdatatype1dawgdatatype1.ttl"));
        assertTrue(comparison);
    }

    // datatype-2 : Literals with a datatype SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-2
    // updated from original test case: eliminated ordering from test
    @Test
    public void datar2exprbuiltinmanifestdawgdatatype2dawgdatatype2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgdatatype2dawgdatatype2.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-2.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgdatatype2dawgdatatype2.xml"));
        assertTrue(comparison);
    }

    // datatype-3 : Literals with a datatype of xsd:string SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-3
    // updated from original test case: eliminated ordering from test
    @Test
    public void datar2exprbuiltinmanifestdawgdatatype3dawgdatatype3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgdatatype3dawgdatatype3.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-3.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgdatatype3dawgdatatype3.xml"));
        assertTrue(comparison);
    }

    // isBlank-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isBlank-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgisblank1dawgisblank1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgisblank1dawgisblank1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-blank-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-blank-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgisblank1dawgisblank1.ttl"));
        assertTrue(comparison);
    }

    // isIRI-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isIRI-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgisiri1dawgisiri1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgisiri1dawgisiri1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-iri-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-iri-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgisiri1dawgisiri1.ttl"));
        assertTrue(comparison);
    }

    // isLiteral SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isLiteral-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgisliteral1dawgisliteral1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgisliteral1dawgisliteral1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-isliteral-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-isliteral-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgisliteral1dawgisliteral1.ttl"));
        assertTrue(comparison);
    }

    // isURI-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isURI-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgisuri1dawgisuri1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgisuri1dawgisuri1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-uri-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-uri-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgisuri1dawgisuri1.ttl"));
        assertTrue(comparison);
    }

    // lang-1 : Literals with a lang tag of some kind SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-1
    // updated from original test case: eliminated ordering from test
    @Test
    public void datar2exprbuiltinmanifestdawglang1dawglang1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglang1dawglang1.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-1.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglang1dawglang1.xml"));
        assertTrue(comparison);
    }

    // lang-2 : Literals with a lang tag of '' SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-2
    // updated from original test case: eliminated ordering from test
    @Test
    public void datar2exprbuiltinmanifestdawglang2dawglang2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglang2dawglang2.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-2.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglang2dawglang2.xml"));
        assertTrue(comparison);
    }

    // lang-3 : Graph matching with lang tag being a different case SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-3
    // updated from original test case: eliminated ordering from test
    @Test
    public void datar2exprbuiltinmanifestdawglang3dawglang3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglang3dawglang3.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-3.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglang3dawglang3.xml"));
        assertTrue(comparison);
    }

    // LangMatches-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // langMatches(lang(?v), 'en-GB') matches 'abc'@en-gb
    @Test
    public void datar2exprbuiltinmanifestdawglangmatches1dawglangmatches1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglangmatches1dawglangmatches1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglangmatches1dawglangmatches1.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // langMatches(lang(?v), 'en') matches 'abc'@en, 'abc'@en-gb
    @Test
    public void datar2exprbuiltinmanifestdawglangmatches2dawglangmatches2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglangmatches2dawglangmatches2.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-2.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglangmatches2dawglangmatches2.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // langMatches(lang(?v), '*') matches 'abc'@en, 'abc'@en-gb, 'abc'@fr
    @Test
    public void datar2exprbuiltinmanifestdawglangmatches3dawglangmatches3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglangmatches3dawglangmatches3.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-3.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglangmatches3dawglangmatches3.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // ! langMatches(lang(?v), '*') matches 'abc'
    @Test
    public void datar2exprbuiltinmanifestdawglangmatches4dawglangmatches4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglangmatches4dawglangmatches4.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-4.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglangmatches4dawglangmatches4.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-basic SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-basic
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // the basic range 'de-de' does not match 'de-Latn-de'
    @Test
    public void datar2exprbuiltinmanifestdawglangmatchesbasicdawglangmatchesbasic() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches-de.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawglangmatchesbasicdawglangmatchesbasic.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-de-de.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-de.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawglangmatchesbasicdawglangmatchesbasic.ttl"));
        assertTrue(comparison);
    }

    // str-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgstr1dawgstr1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgstr1dawgstr1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-1.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgstr1dawgstr1.ttl"));
        assertTrue(comparison);
    }

    // str-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgstr2dawgstr2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgstr2dawgstr2.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-2.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgstr2dawgstr2.ttl"));
        assertTrue(comparison);
    }

    // str-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgstr3dawgstr3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgstr3dawgstr3.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-3.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgstr3dawgstr3.ttl"));
        assertTrue(comparison);
    }

    // str-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2exprbuiltinmanifestdawgstr4dawgstr4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestdawgstr4dawgstr4.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-4.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestdawgstr4dawgstr4.ttl"));
        assertTrue(comparison);
    }

    // lang-case-insensitive-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#lang-case-insensitive-eq
    // 'xyz'@en = 'xyz'@EN
    @Test
    public void datar2exprbuiltinmanifestlangcaseinsensitiveeqlangcaseinsensitiveeq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestlangcaseinsensitiveeqlangcaseinsensitiveeq.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/lang-case-insensitive-eq.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestlangcaseinsensitiveeqlangcaseinsensitiveeq.xml"));
        assertTrue(comparison);
    }

    // lang-case-insensitive-ne SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#lang-case-insensitive-ne
    // 'xyz'@en != 'xyz'@EN
    @Test
    public void datar2exprbuiltinmanifestlangcaseinsensitivenelangcaseinsensitivene() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2exprbuiltinmanifestlangcaseinsensitivenelangcaseinsensitivene.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity-ne.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/lang-case-insensitive-ne.srx"), Path.of("src/test/resources/datar2exprbuiltinmanifestlangcaseinsensitivenelangcaseinsensitivene.xml"));
        assertTrue(comparison);
    }

    // sameTerm-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-eq
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // sameTerm(?v1, ?v2) && ?v1 = ?v2
    @Test
    public void datar2exprbuiltinmanifestsametermeqsametermeq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestsametermeqsametermeq.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm-eq.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestsametermeqsametermeq.ttl"));
        assertTrue(comparison);
    }

    // sameTerm-not-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-not-eq
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // !sameTerm(?v1, ?v2) && ?v1 = ?v2
    @Test
    public void datar2exprbuiltinmanifestsametermnoteqsametermnoteq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestsametermnoteqsametermnoteq.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm-not-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm-not-eq.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestsametermnoteqsametermnoteq.ttl"));
        assertTrue(comparison);
    }

    // sameTerm-simple SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-simple
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // sameTerm(?v1, ?v2)
    @Test
    public void datar2exprbuiltinmanifestsametermsimplesametermsimple() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprbuiltinmanifestsametermsimplesametermsimple.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm.ttl"), Path.of("src/test/resources/datar2exprbuiltinmanifestsametermsimplesametermsimple.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = in FILTER expressions is value equality
    @Test
    public void datar2exprequalsmanifesteq1eq1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq1eq1.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-1.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq1eq1.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = in FILTER expressions is value equality
    @Test
    public void datar2exprequalsmanifesteq2eq2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq2eq2.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-2.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq2eq2.ttl"));
        assertTrue(comparison);
    }

    // Equality - 2 var - test equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = in FILTER is value equality
    @Test
    public void datar2exprequalsmanifesteq21eq21() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq21eq21.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq2-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq2-1.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq21eq21.ttl"));
        assertTrue(comparison);
    }

    // Equality - 2 var - test not equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // != in FILTER is value inequality
    @Test
    public void datar2exprequalsmanifesteq22eq22() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq22eq22.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq2-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq2-1.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq22eq22.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Numerics are not value-equivalent to plain literals
    @Test
    public void datar2exprequalsmanifesteq3eq3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq3eq3.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-3.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq3eq3.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = compares plain literals and unknown types with the same lexical form as false
    @Test
    public void datar2exprequalsmanifesteq4eq4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq4eq4.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-4.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq4eq4.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-5
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = on IRI terms
    @Test
    public void datar2exprequalsmanifesteq5eq5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteq5eq5.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-5.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteq5eq5.ttl"));
        assertTrue(comparison);
    }

    // Equality with bool SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-bool
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = with bool
    @Test
    public void datar2exprequalsmanifesteqbooleqbool() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq-bool.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqbooleqbool.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-bool.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-bool.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqbooleqbool.ttl"));
        assertTrue(comparison);
    }

    // Equality with float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-float
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // = with float
    @Test
    public void datar2exprequalsmanifesteqfloateqfloat() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq-float.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqfloateqfloat.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-float.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqfloateqfloat.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-1 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Graph pattern matching matches exact terms, not values
    @Test
    public void datar2exprequalsmanifesteqgraph1eqgraph1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqgraph1eqgraph1.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-1.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqgraph1eqgraph1.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-2 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Graph pattern matching matches exact terms, not values
    @Test
    public void datar2exprequalsmanifesteqgraph2eqgraph2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqgraph2eqgraph2.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-2.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqgraph2eqgraph2.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-3 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Graph pattern matching matches exact terms, not values
    @Test
    public void datar2exprequalsmanifesteqgraph3eqgraph3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqgraph3eqgraph3.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-3.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqgraph3eqgraph3.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-4 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Graph pattern matching matches exact terms, not values
    @Test
    public void datar2exprequalsmanifesteqgraph4eqgraph4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqgraph4eqgraph4.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-4.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqgraph4eqgraph4.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-5 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-5
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Graph pattern matching matches exact terms, not values
    @Test
    public void datar2exprequalsmanifesteqgraph5eqgraph5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2exprequalsmanifesteqgraph5eqgraph5.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-5.ttl"), Path.of("src/test/resources/datar2exprequalsmanifesteqgraph5eqgraph5.ttl"));
        assertTrue(comparison);
    }

    // Greater-than or equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#ge-1
    // >= in FILTER expressions
    @Test
    public void datar2expropsmanifestge1ge1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestge1ge1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-ge-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-ge-1.srx"), Path.of("src/test/resources/datar2expropsmanifestge1ge1.xml"));
        assertTrue(comparison);
    }

    // Less-than or equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#le-1
    // <= in FILTER expressions
    @Test
    public void datar2expropsmanifestle1le1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestle1le1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-le-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-le-1.srx"), Path.of("src/test/resources/datar2expropsmanifestle1le1.xml"));
        assertTrue(comparison);
    }

    // Subtraction SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#minus-1
    // A - B in FILTER expressions
    @Test
    public void datar2expropsmanifestminus1minus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestminus1minus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-minus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-minus-1.srx"), Path.of("src/test/resources/datar2expropsmanifestminus1minus1.xml"));
        assertTrue(comparison);
    }

    // Multiplication SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#mul-1
    // A * B in FILTER expressions
    @Test
    public void datar2expropsmanifestmul1mul1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestmul1mul1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-mul-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-mul-1.srx"), Path.of("src/test/resources/datar2expropsmanifestmul1mul1.xml"));
        assertTrue(comparison);
    }

    // Addition SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#plus-1
    // A + B in FILTER expressions
    @Test
    public void datar2expropsmanifestplus1plus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestplus1plus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-plus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-plus-1.srx"), Path.of("src/test/resources/datar2expropsmanifestplus1plus1.xml"));
        assertTrue(comparison);
    }

    // Unary Minus SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#unminus-1
    // -A in FILTER expressions
    @Test
    public void datar2expropsmanifestunminus1unminus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestunminus1unminus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-unminus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-unminus-1.srx"), Path.of("src/test/resources/datar2expropsmanifestunminus1unminus1.xml"));
        assertTrue(comparison);
    }

    // Unary Plusn SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#unplus-1
    // +A in FILTER expressions
    @Test
    public void datar2expropsmanifestunplus1unplus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2expropsmanifestunplus1unplus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-unplus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-unplus-1.srx"), Path.of("src/test/resources/datar2expropsmanifestunplus1unplus1.xml"));
        assertTrue(comparison);
    }

    // graph-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-01
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default graph / Query: default graph
    @Test
    public void datar2graphmanifestdawggraph01dawggraph01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph01dawggraph01.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-01.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph01dawggraph01.ttl"));
        assertTrue(comparison);
    }

    // graph-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-02
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named graph / Query: default graph
    @Test
    public void datar2graphmanifestdawggraph02dawggraph02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph02dawggraph02.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-02.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph02dawggraph02.ttl"));
        assertTrue(comparison);
    }

    // graph-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-03
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named graph / Query: named graph graph
    @Test
    public void datar2graphmanifestdawggraph03dawggraph03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph03dawggraph03.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-03.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph03dawggraph03.ttl"));
        assertTrue(comparison);
    }

    // graph-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-04
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: named graph / Query: default graph
    @Test
    public void datar2graphmanifestdawggraph04dawggraph04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph04dawggraph04.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-04.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph04dawggraph04.ttl"));
        assertTrue(comparison);
    }

    // graph-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-05
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: default graph
    @Test
    public void datar2graphmanifestdawggraph05dawggraph05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph05dawggraph05.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-05.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph05dawggraph05.ttl"));
        assertTrue(comparison);
    }

    // graph-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-06
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: named graph
    @Test
    public void datar2graphmanifestdawggraph06dawggraph06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph06dawggraph06.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-06.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph06dawggraph06.ttl"));
        assertTrue(comparison);
    }

    // graph-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-07
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: all data by UNION
    @Test
    public void datar2graphmanifestdawggraph07dawggraph07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph07dawggraph07.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-07.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph07dawggraph07.ttl"));
        assertTrue(comparison);
    }

    // graph-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-08
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named / Query: common subjects
    @Test
    public void datar2graphmanifestdawggraph08dawggraph08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph08dawggraph08.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-08.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph08dawggraph08.ttl"));
        assertTrue(comparison);
    }

    // graph-09 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-09
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (bnodes) / Query: common subjects
    @Test
    public void datar2graphmanifestdawggraph09dawggraph09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g3.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph09dawggraph09.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-09.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph09dawggraph09.ttl"));
        assertTrue(comparison);
    }

    // graph-10b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-10b
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (same data, with bnodes) / Query: common subjects
    @Test
    public void datar2graphmanifestdawggraph10bdawggraph10b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g3.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph10bdawggraph10b.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-10.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph10bdawggraph10b.ttl"));
        assertTrue(comparison);
    }

    // graph-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-11
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Data: default and named (several) / Query: get everything
    @Test
    public void datar2graphmanifestdawggraph11dawggraph11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2graphmanifestdawggraph11dawggraph11.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-11.ttl"), Path.of("src/test/resources/datar2graphmanifestdawggraph11dawggraph11.ttl"));
        assertTrue(comparison);
    }

    // kanji-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#kanji-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2i18nmanifestkanji1kanji1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/kanji.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2i18nmanifestkanji1kanji1.ttl",
                "-q", "src/test/resources/sparql10/i18n/kanji-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/kanji-01-results.ttl"), Path.of("src/test/resources/datar2i18nmanifestkanji1kanji1.ttl"));
        assertTrue(comparison);
    }

    // kanji-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#kanji-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2i18nmanifestkanji2kanji2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/kanji.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2i18nmanifestkanji2kanji2.ttl",
                "-q", "src/test/resources/sparql10/i18n/kanji-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/kanji-02-results.ttl"), Path.of("src/test/resources/datar2i18nmanifestkanji2kanji2.ttl"));
        assertTrue(comparison);
    }

    // normalization-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2i18nmanifestnormalization1normalization1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2i18nmanifestnormalization1normalization1.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-01-results.ttl"), Path.of("src/test/resources/datar2i18nmanifestnormalization1normalization1.ttl"));
        assertTrue(comparison);
    }

    // normalization-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Example 1 from http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0096
    @Test
    public void datar2i18nmanifestnormalization2normalization2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-02.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2i18nmanifestnormalization2normalization2.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-02-results.ttl"), Path.of("src/test/resources/datar2i18nmanifestnormalization2normalization2.ttl"));
        assertTrue(comparison);
    }

    // normalization-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Example 2 from http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0096
    @Test
    public void datar2i18nmanifestnormalization3normalization3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-03.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2i18nmanifestnormalization3normalization3.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-03-results.ttl"), Path.of("src/test/resources/datar2i18nmanifestnormalization3normalization3.ttl"));
        assertTrue(comparison);
    }

    // date-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-1
    // Added type : xsd:date '='
    @Test
    public void datar2openworldmanifestdate1date1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestdate1date1.xml",
                "-q", "src/test/resources/sparql10/open-world/date-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-1-result.srx"), Path.of("src/test/resources/datar2openworldmanifestdate1date1.xml"));
        assertTrue(comparison);
    }

    // date-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-2
    // Added type : xsd:date '!='
    @Test
    public void datar2openworldmanifestdate2date2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestdate2date2.xml",
                "-q", "src/test/resources/sparql10/open-world/date-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-2-result.srx"), Path.of("src/test/resources/datar2openworldmanifestdate2date2.xml"));
        assertTrue(comparison);
    }

    // date-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-3
    // Added type : xsd:date '>'
    @Test
    public void datar2openworldmanifestdate3date3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestdate3date3.xml",
                "-q", "src/test/resources/sparql10/open-world/date-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-3-result.srx"), Path.of("src/test/resources/datar2openworldmanifestdate3date3.xml"));
        assertTrue(comparison);
    }

    // date-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-4
    // xsd:date ORDER BY
    @Test
    public void datar2openworldmanifestdate4date4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestdate4date4.xml",
                "-q", "src/test/resources/sparql10/open-world/date-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-4-result.srx"), Path.of("src/test/resources/datar2openworldmanifestdate4date4.xml"));
        assertTrue(comparison);
    }

    // open-cmp-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-cmp-01
    // Find things that compare with < or >
    @Test
    public void datar2openworldmanifestopencmp01opencmp01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopencmp01opencmp01.xml",
                "-q", "src/test/resources/sparql10/open-world/open-cmp-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-cmp-01-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopencmp01opencmp01.xml"));
        assertTrue(comparison);
    }

    // open-cmp-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-cmp-02
    // Find things that compare with <= and >
    @Test
    public void datar2openworldmanifestopencmp02opencmp02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopencmp02opencmp02.xml",
                "-q", "src/test/resources/sparql10/open-world/open-cmp-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-cmp-02-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopencmp02opencmp02.xml"));
        assertTrue(comparison);
    }

    // open-eq-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-01
    // graph match - no lexical form in data (assumes no value matching)
    @Test
    public void datar2openworldmanifestopeneq01openeq01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq01openeq01.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-01-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq01openeq01.xml"));
        assertTrue(comparison);
    }

    // open-eq-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-02
    // graph match - unknown type
    @Test
    public void datar2openworldmanifestopeneq02openeq02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq02openeq02.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-02-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq02openeq02.xml"));
        assertTrue(comparison);
    }

    // open-eq-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-03
    // Filter(?v=1)
    @Test
    public void datar2openworldmanifestopeneq03openeq03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq03openeq03.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-03-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq03openeq03.xml"));
        assertTrue(comparison);
    }

    // open-eq-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-04
    // Filter(?v!=1)
    @Test
    public void datar2openworldmanifestopeneq04openeq04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq04openeq04.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-04-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq04openeq04.xml"));
        assertTrue(comparison);
    }

    // open-eq-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-05
    // FILTER(?v = unknown type)
    @Test
    public void datar2openworldmanifestopeneq05openeq05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq05openeq05.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-05-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq05openeq05.xml"));
        assertTrue(comparison);
    }

    // open-eq-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-06
    // FILTER(?v != unknown type)
    @Test
    public void datar2openworldmanifestopeneq06openeq06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq06openeq06.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-06-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq06openeq06.xml"));
        assertTrue(comparison);
    }

    // open-eq-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-07
    // Test of '='
    @Test
    public void datar2openworldmanifestopeneq07openeq07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq07openeq07.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-07-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq07openeq07.xml"));
        assertTrue(comparison);
    }

    // open-eq-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-08
    // Test of '!='
    @Test
    public void datar2openworldmanifestopeneq08openeq08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq08openeq08.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-08-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq08openeq08.xml"));
        assertTrue(comparison);
    }

    // open-eq-09 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-09
    // Test of '='
    @Test
    public void datar2openworldmanifestopeneq09openeq09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq09openeq09.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-09-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq09openeq09.xml"));
        assertTrue(comparison);
    }

    // open-eq-10 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-10
    // Test of '!='
    @Test
    public void datar2openworldmanifestopeneq10openeq10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq10openeq10.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-10-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq10openeq10.xml"));
        assertTrue(comparison);
    }

    // open-eq-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-11
    // test of '=' || '!='
    @Test
    public void datar2openworldmanifestopeneq11openeq11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq11openeq11.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-11-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq11openeq11.xml"));
        assertTrue(comparison);
    }

    // open-eq-12 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-12
    // find pairs that don't value-compare
    @Test
    public void datar2openworldmanifestopeneq12openeq12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2openworldmanifestopeneq12openeq12.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-12-result.srx"), Path.of("src/test/resources/datar2openworldmanifestopeneq12openeq12.xml"));
        assertTrue(comparison);
    }

    // OPTIONAL-FILTER SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // FILTER inside an OPTIONAL does not block an entire solution
    @Test
    public void datar2optionalfiltermanifestdawgoptionalfilter001dawgoptionalfilter001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter001dawgoptionalfilter001.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-1-result.ttl"), Path.of("src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter001dawgoptionalfilter001.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Outer FILTER SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-002
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // FILTER outside an OPTIONAL tests bound and unbound variables
    @Test
    public void datar2optionalfiltermanifestdawgoptionalfilter002dawgoptionalfilter002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter002dawgoptionalfilter002.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-2-result.ttl"), Path.of("src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter002dawgoptionalfilter002.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Outer FILTER with BOUND SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-003
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Use !bound to only run outer FILTERs against variables bound in an OPTIONAL
    @Test
    public void datar2optionalfiltermanifestdawgoptionalfilter003dawgoptionalfilter003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter003dawgoptionalfilter003.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-3-result.ttl"), Path.of("src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter003dawgoptionalfilter003.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Inner FILTER with negative EBV for outer variables SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-004
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // FILTER inside an OPTIONAL does not corrupt the entire solution
    @Test
    public void datar2optionalfiltermanifestdawgoptionalfilter004dawgoptionalfilter004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter004dawgoptionalfilter004.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-4-result.ttl"), Path.of("src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter004dawgoptionalfilter004.ttl"));
        assertTrue(comparison);
    }

    // dawg-optional-filter-005-not-simplified SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-005-not-simplified
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Double curly braces do NOT get simplified to single curly braces early on, before filters are scoped
    @Test
    public void datar2optionalfiltermanifestdawgoptionalfilter005notsimplifieddawgoptionalfilter005notsimplified() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter005notsimplifieddawgoptionalfilter005notsimplified.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-5-result-not-simplified.ttl"), Path.of("src/test/resources/datar2optionalfiltermanifestdawgoptionalfilter005notsimplifieddawgoptionalfilter005notsimplified.ttl"));
        assertTrue(comparison);
    }

    // One optional clause SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // One optional clause
    @Test
    public void datar2optionalmanifestdawgoptional001dawgoptional001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptional001dawgoptional001.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-1.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptional001dawgoptional001.ttl"));
        assertTrue(comparison);
    }

    // Two optional clauses SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-002
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // One optional clause
    @Test
    public void datar2optionalmanifestdawgoptional002dawgoptional002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptional002dawgoptional002.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-2.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptional002dawgoptional002.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Complex optional: LeftJoin(LeftJoin(BGP(..),{..}),Join(BGP(..),Union(..,..)))
    @Test
    public void datar2optionalmanifestdawgoptionalcomplex1dawgoptionalcomplex1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptionalcomplex1dawgoptionalcomplex1.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-1.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptionalcomplex1dawgoptionalcomplex1.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Complex optional: LeftJoin(Join(BGP(..),Graph(var,{..})),Union(..,..))
    @Test
    public void datar2optionalmanifestdawgoptionalcomplex2dawgoptionalcomplex2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptionalcomplex2dawgoptionalcomplex2.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-2.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptionalcomplex2dawgoptionalcomplex2.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Complex optional: LeftJoin(Join(BGP(..),Graph(var,{..})),LeftJoin(BGP(..),{..}))
    @Test
    public void datar2optionalmanifestdawgoptionalcomplex3dawgoptionalcomplex3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptionalcomplex3dawgoptionalcomplex3.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-3.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptionalcomplex3dawgoptionalcomplex3.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Complex optional: LeftJoin(Join(BGP(..),Union(..,..)),Join(BGP(..),Graph(varOrIRI,{..})))
    @Test
    public void datar2optionalmanifestdawgoptionalcomplex4dawgoptionalcomplex4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgoptionalcomplex4dawgoptionalcomplex4.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-4.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgoptionalcomplex4dawgoptionalcomplex4.ttl"));
        assertTrue(comparison);
    }

    // Union is not optional SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-union-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Union is not optional
    @Test
    public void datar2optionalmanifestdawgunion001dawgunion001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2optionalmanifestdawgunion001dawgunion001.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-3.ttl"), Path.of("src/test/resources/datar2optionalmanifestdawgunion001dawgunion001.ttl"));
        assertTrue(comparison);
    }

    // SELECT REDUCED * SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/reduced/manifest#reduced-1
    @Test
    public void datar2reducedmanifestreduced1reduced1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/reduced/reduced-star.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2reducedmanifestreduced1reduced1.xml",
                "-q", "src/test/resources/sparql10/reduced/reduced-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/reduced/reduced-1.srx"), Path.of("src/test/resources/datar2reducedmanifestreduced1reduced1.xml"));
        assertTrue(comparison);
    }

    // SELECT REDUCED ?x with strings SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/reduced/manifest#reduced-2
    @Test
    public void datar2reducedmanifestreduced2reduced2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/reduced/reduced-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2reducedmanifestreduced2reduced2.xml",
                "-q", "src/test/resources/sparql10/reduced/reduced-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/reduced/reduced-2.srx"), Path.of("src/test/resources/datar2reducedmanifestreduced2reduced2.xml"));
        assertTrue(comparison);
    }

    // regex-query-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Simple unanchored match test
    @Test
    public void datar2regexmanifestdawgregex001dawgregex001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2regexmanifestdawgregex001dawgregex001.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-001.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-001.ttl"), Path.of("src/test/resources/datar2regexmanifestdawgregex001dawgregex001.ttl"));
        assertTrue(comparison);
    }

    // regex-query-002 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-002
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Case insensitive unanchored match test
    @Test
    public void datar2regexmanifestdawgregex002dawgregex002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2regexmanifestdawgregex002dawgregex002.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-002.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-002.ttl"), Path.of("src/test/resources/datar2regexmanifestdawgregex002dawgregex002.ttl"));
        assertTrue(comparison);
    }

    // regex-query-003 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-003
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Use/mention test
    @Test
    public void datar2regexmanifestdawgregex003dawgregex003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2regexmanifestdawgregex003dawgregex003.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-003.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-003.ttl"), Path.of("src/test/resources/datar2regexmanifestdawgregex003dawgregex003.ttl"));
        assertTrue(comparison);
    }

    // regex-query-004 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-004
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // str()+URI test
    @Test
    public void datar2regexmanifestdawgregex004dawgregex004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2regexmanifestdawgregex004dawgregex004.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-004.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-004.ttl"), Path.of("src/test/resources/datar2regexmanifestdawgregex004dawgregex004.ttl"));
        assertTrue(comparison);
    }

    // Limit 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestlimit1limit1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestlimit1limit1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-01.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestlimit1limit1.ttl"));
        assertTrue(comparison);
    }

    // Limit 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestlimit2limit2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestlimit2limit2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-02.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestlimit2limit2.ttl"));
        assertTrue(comparison);
    }

    // Limit 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestlimit3limit3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestlimit3limit3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-03.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestlimit3limit3.ttl"));
        assertTrue(comparison);
    }

    // Limit 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestlimit4limit4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestlimit4limit4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-04.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestlimit4limit4.ttl"));
        assertTrue(comparison);
    }

    // Offset 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestoffset1offset1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestoffset1offset1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-10.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestoffset1offset1.ttl"));
        assertTrue(comparison);
    }

    // Offset 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestoffset2offset2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestoffset2offset2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-11.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestoffset2offset2.ttl"));
        assertTrue(comparison);
    }

    // Offset 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestoffset3offset3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestoffset3offset3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-12.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestoffset3offset3.ttl"));
        assertTrue(comparison);
    }

    // Offset 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestoffset4offset4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestoffset4offset4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-13.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-13.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestoffset4offset4.ttl"));
        assertTrue(comparison);
    }

    // Slice 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-1
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestslice1slice1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestslice1slice1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-20.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-20.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestslice1slice1.ttl"));
        assertTrue(comparison);
    }

    // Slice 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-2
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestslice2slice2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestslice2slice2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-21.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-21.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestslice2slice2.ttl"));
        assertTrue(comparison);
    }

    // Slice 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-3
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestslice3slice3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestslice3slice3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-22.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-22.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestslice3slice3.ttl"));
        assertTrue(comparison);
    }

    // Slice 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-4
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestslice4slice4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestslice4slice4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-23.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-23.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestslice4slice4.ttl"));
        assertTrue(comparison);
    }

    // Slice 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-5
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datar2solutionseqmanifestslice5slice5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2solutionseqmanifestslice5slice5.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-24.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-24.ttl"), Path.of("src/test/resources/datar2solutionseqmanifestslice5slice5.ttl"));
        assertTrue(comparison);
    }

    // sort-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-1
    // Alphabetic sort (ascending) on untyped literals
    @Test
    public void datar2sortmanifestdawgsort1dawgsort1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort1dawgsort1.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-1.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort1dawgsort1.xml"));
        assertTrue(comparison);
    }

    // sort-10 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-10
    // Alphabetic sort (descending) on datatyped (string) literals
    @Test
    public void datar2sortmanifestdawgsort10dawgsort10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-9.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort10dawgsort10.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-10.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort10dawgsort10.xml"));
        assertTrue(comparison);
    }

    // sort-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-2
    // Alphabetic sort (descending) on untyped literals
    @Test
    public void datar2sortmanifestdawgsort2dawgsort2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort2dawgsort2.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-2.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort2dawgsort2.xml"));
        assertTrue(comparison);
    }

    // sort-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-3
    // Sort on (possibly unbound) URIs
    @Test
    public void datar2sortmanifestdawgsort3dawgsort3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort3dawgsort3.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-3.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort3dawgsort3.xml"));
        assertTrue(comparison);
    }

    // sort-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-4
    // Sort on datatyped (integer) literals
    @Test
    public void datar2sortmanifestdawgsort4dawgsort4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort4dawgsort4.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-4.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort4dawgsort4.xml"));
        assertTrue(comparison);
    }

    // sort-5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-5
    // Sort first on untyped literals (ascending), then on datatyped (integer) literals (descending
    @Test
    public void datar2sortmanifestdawgsort5dawgsort5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort5dawgsort5.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-5.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort5dawgsort5.xml"));
        assertTrue(comparison);
    }

    // sort-6 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-6
    // Sort on mixed result of uris and literals.
    @Test
    public void datar2sortmanifestdawgsort6dawgsort6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort6dawgsort6.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-6.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort6dawgsort6.xml"));
        assertTrue(comparison);
    }

    // sort-7 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-7
    // Sort on comparable mixed typed literals (integer and float)
    @Test
    public void datar2sortmanifestdawgsort7dawgsort7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-7.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort7dawgsort7.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-7.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort7dawgsort7.xml"));
        assertTrue(comparison);
    }

    // sort-8 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-8
    // Sort on several mixed values (bnode, uri, literal)
    @Test
    public void datar2sortmanifestdawgsort8dawgsort8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-8.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort8dawgsort8.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-8.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort8dawgsort8.xml"));
        assertTrue(comparison);
    }

    // sort-9 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-9
    // Alphabetic sort (ascending) on datatyped (string) literals
    @Test
    public void datar2sortmanifestdawgsort9dawgsort9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-9.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datar2sortmanifestdawgsort9dawgsort9.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-9.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-9.rdf"), Path.of("src/test/resources/datar2sortmanifestdawgsort9dawgsort9.xml"));
        assertTrue(comparison);
    }

    // Builtin sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-builtin
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Sort by a builtin operator
    @Test
    public void datar2sortmanifestdawgsortbuiltindawgsortbuiltin() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-builtin.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2sortmanifestdawgsortbuiltindawgsortbuiltin.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-builtin.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-builtin.ttl"), Path.of("src/test/resources/datar2sortmanifestdawgsortbuiltindawgsortbuiltin.ttl"));
        assertTrue(comparison);
    }

    // Function sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-function
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Sort by function invocation
    @Test
    public void datar2sortmanifestdawgsortfunctiondawgsortfunction() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-function.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2sortmanifestdawgsortfunctiondawgsortfunction.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-function.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-function.ttl"), Path.of("src/test/resources/datar2sortmanifestdawgsortfunctiondawgsortfunction.ttl"));
        assertTrue(comparison);
    }

    // Expression sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-numbers
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Sort by a bracketted expression
    @Test
    public void datar2sortmanifestdawgsortnumbersdawgsortnumbers() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-numbers.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2sortmanifestdawgsortnumbersdawgsortnumbers.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-numbers.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-numbers.ttl"), Path.of("src/test/resources/datar2sortmanifestdawgsortnumbersdawgsortnumbers.ttl"));
        assertTrue(comparison);
    }

    // syntax-basic-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic01syntaxbasic01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic02syntaxbasic02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic03syntaxbasic03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic04syntaxbasic04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic05syntaxbasic05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbasic06syntaxbasic06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbnodes01syntaxbnodes01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbnodes02syntaxbnodes02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbnodes03syntaxbnodes03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbnodes04syntaxbnodes04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxbnodes05syntaxbnodes05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxexpr01syntaxexpr01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxexpr02syntaxexpr02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxexpr03syntaxexpr03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxexpr04syntaxexpr04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxexpr05syntaxexpr05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-forms-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxforms01syntaxforms01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-forms-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-forms-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxforms02syntaxforms02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-forms-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlimitoffset01syntaxlimitoffset01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlimitoffset02syntaxlimitoffset02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlimitoffset03syntaxlimitoffset03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlimitoffset04syntaxlimitoffset04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlists01syntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlists02syntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlists03syntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlists04syntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlists05syntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit01syntaxlit01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit02syntaxlit02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit03syntaxlit03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit04syntaxlit04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit05syntaxlit05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit06syntaxlit06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit07syntaxlit07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-08.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit08syntaxlit08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-09.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit09syntaxlit09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-10.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit10syntaxlit10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-11.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit11syntaxlit11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-12.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit12syntaxlit12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-13.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit13syntaxlit13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-14.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit14syntaxlit14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-15.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit15syntaxlit15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-15.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-16.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit16syntaxlit16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-16.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-17.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit17syntaxlit17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-17.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-18.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit18syntaxlit18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-18.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-19.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit19syntaxlit19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-19.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-20.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxlit20syntaxlit20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-20.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder01syntaxorder01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder02syntaxorder02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder03syntaxorder03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder04syntaxorder04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder05syntaxorder05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder06syntaxorder06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxorder07syntaxorder07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxpat01syntaxpat01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxpat02syntaxpat02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxpat03syntaxpat03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxpat04syntaxpat04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname01syntaxqname01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname02syntaxqname02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname03syntaxqname03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname04syntaxqname04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname05syntaxqname05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname06syntaxqname06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname07syntaxqname07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-08.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxqname08syntaxqname08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct01syntaxstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct02syntaxstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct03syntaxstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct05syntaxstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct06syntaxstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct07syntaxstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-08.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct08syntaxstruct08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-09.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct09syntaxstruct09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-10.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct10syntaxstruct10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-11.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct11syntaxstruct11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-12.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct12syntaxstruct12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-13.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct13syntaxstruct13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-14.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxstruct14syntaxstruct14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-union-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxunion01syntaxunion01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-union-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-union-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql1manifestsyntaxunion02syntaxunion02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-union-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxbnode01syntaxbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxbnode02syntaxbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxbnode03syntaxbnode03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxdataset01syntaxdataset01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxdataset02syntaxdataset02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxdataset03syntaxdataset03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxdataset04syntaxdataset04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxesc01syntaxesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxesc02syntaxesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxesc03syntaxesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxesc04syntaxesc04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxesc05syntaxesc05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-ask-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformask02syntaxformask02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-ask-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformconstruct01syntaxformconstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformconstruct02syntaxformconstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformconstruct03syntaxformconstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformconstruct04syntaxformconstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformconstruct06syntaxformconstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-describe01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformdescribe01syntaxformdescribe01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-describe01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-describe02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformdescribe02syntaxformdescribe02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-describe02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-select-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformselect01syntaxformselect01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-select-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-select-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxformselect02syntaxformselect02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-select-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxfunction01syntaxfunction01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxfunction02syntaxfunction02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxfunction03syntaxfunction03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxfunction04syntaxfunction04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral01syntaxgeneral01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral02syntaxgeneral02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral03syntaxgeneral03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral04syntaxgeneral04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral05syntaxgeneral05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral06syntaxgeneral06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral07syntaxgeneral07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-08.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral08syntaxgeneral08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-09.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral09syntaxgeneral09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-10.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral10syntaxgeneral10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-11.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral11syntaxgeneral11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-12.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral12syntaxgeneral12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-13.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral13syntaxgeneral13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-14.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgeneral14syntaxgeneral14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgraph01syntaxgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgraph02syntaxgraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgraph03syntaxgraph03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgraph04syntaxgraph04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxgraph05syntaxgraph05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxkeywords01syntaxkeywords01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxkeywords02syntaxkeywords02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxkeywords03syntaxkeywords03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxlists01syntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxlists02syntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxlists03syntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxlists04syntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql2manifestsyntaxlists05syntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-blabel-cross-filter SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestblabelcrossfilterblabelcrossfilter() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-filter.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-blabel-cross-graph-bad SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestblabelcrossgraphbadblabelcrossgraphbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-graph-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-blabel-cross-optional-bad SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestblabelcrossoptionalbadblabelcrossoptionalbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-optional-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-blabel-cross-union-bad SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestblabelcrossunionbadblabelcrossunionbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-union-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnode-dot.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestbnodedotbnodedot() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnode-dot.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnodes-missing-pvalues-01.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestbnodesmissingpvalues01bnodesmissingpvalues01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnodes-missing-pvalues-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnodes-missing-pvalues-02.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestbnodesmissingpvalues02bnodesmissingpvalues02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnodes-missing-pvalues-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-empty-optional-01.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestemptyoptional01emptyoptional01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-empty-optional-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-empty-optional-02.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestemptyoptional02emptyoptional02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-empty-optional-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-filter-missing-parens.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestfiltermissingparensfiltermissingparens() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-filter-missing-parens.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-lone-list.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestlonelistlonelist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-lone-list.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-lone-node.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestlonenodelonenode() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-lone-node.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn01syn01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn02syn02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-03.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn03syn03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-04.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn04syn04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-05.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn05syn05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-06.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn06syn06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-07.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn07syn07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-08.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsyn08syn08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-01.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad01synbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-02.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad02synbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-03.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad03synbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-04.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad04synbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-05.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad05synbad05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-06.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad06synbad06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-07.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad07synbad07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-08.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad08synbad08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-09.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad09synbad09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-10.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad10synbad10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-11.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad11synbad11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-12.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad12synbad12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-13.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad13synbad13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-14.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad14synbad14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-15.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad15synbad15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-15.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-16.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad16synbad16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-16.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-17.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad17synbad17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-17.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-18.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad18synbad18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-18.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-19.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad19synbad19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-19.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-20.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad20synbad20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-20.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-21.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad21synbad21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-21.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-22.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad22synbad22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-22.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-23.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad23synbad23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-23.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-24.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad24synbad24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-24.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-25.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad25synbad25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-25.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-26.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad26synbad26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-26.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-27.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad27synbad27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-27.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-28.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad28synbad28() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-28.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-29.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad29synbad29() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-29.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-30.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad30synbad30() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-30.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-31.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql3manifestsynbad31synbad31() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-31.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-09.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsyn09syn09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-10.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsyn10syn10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-11.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsyn11syn11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-34.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynbad34synbad34() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-34.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-35.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynbad35synbad35() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-35.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-36.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynbad36synbad36() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-36.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-37.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynbad37synbad37() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-37.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-38.rq SPARQL Negative Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynbad38synbad38() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-38.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-GRAPH-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after GRAPH
    @Test
    public void datar2syntaxsparql4manifestsynbadgraphbreaksbgpsynbadgraphbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-GRAPH-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-OPT-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after OPTIONAL
    @Test
    public void datar2syntaxsparql4manifestsynbadoptbreaksbgpsynbadoptbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-OPT-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-UNION-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after UNION
    @Test
    public void datar2syntaxsparql4manifestsynbadunionbreaksbgpsynbadunionbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-UNION-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-leading-digits-in-prefixed-names.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql4manifestsynleadingdigitsinprefixednamessynleadingdigitsinprefixednames() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-leading-digits-in-prefixed-names.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-reduced-01.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql5manifestsyntaxreduced01syntaxreduced01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql5/syntax-reduced-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-reduced-02.rq SPARQL Positive Syntax Test
    @Test
    public void datar2syntaxsparql5manifestsyntaxreduced02syntaxreduced02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql5/syntax-reduced-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // dawg-triple-pattern-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-001
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Simple triple match
    @Test
    public void datar2triplematchmanifestdawgtriplepattern001dawgtriplepattern001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2triplematchmanifestdawgtriplepattern001dawgtriplepattern001.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-01.ttl"), Path.of("src/test/resources/datar2triplematchmanifestdawgtriplepattern001dawgtriplepattern001.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-002 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-002
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Simple triple match
    @Test
    public void datar2triplematchmanifestdawgtriplepattern002dawgtriplepattern002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2triplematchmanifestdawgtriplepattern002dawgtriplepattern002.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-02.ttl"), Path.of("src/test/resources/datar2triplematchmanifestdawgtriplepattern002dawgtriplepattern002.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-003 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-003
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Simple triple match - repeated variable
    @Test
    public void datar2triplematchmanifestdawgtriplepattern003dawgtriplepattern003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-02.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2triplematchmanifestdawgtriplepattern003dawgtriplepattern003.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-03.ttl"), Path.of("src/test/resources/datar2triplematchmanifestdawgtriplepattern003dawgtriplepattern003.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-004 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-004
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Simple triple match - two triples, common variable
    @Test
    public void datar2triplematchmanifestdawgtriplepattern004dawgtriplepattern004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/dawg-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2triplematchmanifestdawgtriplepattern004dawgtriplepattern004.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-04.ttl"), Path.of("src/test/resources/datar2triplematchmanifestdawgtriplepattern004dawgtriplepattern004.ttl"));
        assertTrue(comparison);
    }

    // tP-double-double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-01
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion01typepromotion01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion01typepromotion01.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-double.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion01typepromotion01.ttl"));
        assertTrue(comparison);
    }

    // tP-double-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-02
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion02typepromotion02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion02typepromotion02.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion02typepromotion02.ttl"));
        assertTrue(comparison);
    }

    // tP-double-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-03
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion03typepromotion03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion03typepromotion03.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion03typepromotion03.ttl"));
        assertTrue(comparison);
    }

    // tP-float-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-04
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion04typepromotion04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion04typepromotion04.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion04typepromotion04.ttl"));
        assertTrue(comparison);
    }

    // tP-float-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-05
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion05typepromotion05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion05typepromotion05.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion05typepromotion05.ttl"));
        assertTrue(comparison);
    }

    // tP-decimal-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-06
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion06typepromotion06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion06typepromotion06.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-decimal-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion06typepromotion06.ttl"));
        assertTrue(comparison);
    }

    // tP-integer-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-07
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion07typepromotion07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion07typepromotion07.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-integer-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion07typepromotion07.ttl"));
        assertTrue(comparison);
    }

    // tP-nonPositiveInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-08
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion08typepromotion08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion08typepromotion08.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-nonPositiveInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion08typepromotion08.ttl"));
        assertTrue(comparison);
    }

    // tP-negativeInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-09
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion09typepromotion09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion09typepromotion09.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-negativeInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion09typepromotion09.ttl"));
        assertTrue(comparison);
    }

    // tP-long-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-10
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion10typepromotion10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion10typepromotion10.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-long-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion10typepromotion10.ttl"));
        assertTrue(comparison);
    }

    // tP-int-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-11
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion11typepromotion11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion11typepromotion11.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-int-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion11typepromotion11.ttl"));
        assertTrue(comparison);
    }

    // tP-short-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-12
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion12typepromotion12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion12typepromotion12.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion12typepromotion12.ttl"));
        assertTrue(comparison);
    }

    // tP-byte-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-13
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion13typepromotion13() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion13typepromotion13.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-byte-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion13typepromotion13.ttl"));
        assertTrue(comparison);
    }

    // tP-nonNegativeInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-14
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion14typepromotion14() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion14typepromotion14.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-nonNegativeInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion14typepromotion14.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedLong-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-15
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion15typepromotion15() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion15typepromotion15.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedLong-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion15typepromotion15.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedInt-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-16
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion16typepromotion16() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion16typepromotion16.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedInt-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion16typepromotion16.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedShort-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-17
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion17typepromotion17() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion17typepromotion17.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedShort-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion17typepromotion17.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedByte-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-18
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion18typepromotion18() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion18typepromotion18.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedByte-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion18typepromotion18.ttl"));
        assertTrue(comparison);
    }

    // tP-positiveInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-19
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion19typepromotion19() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion19typepromotion19.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-positiveInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion19typepromotion19.ttl"));
        assertTrue(comparison);
    }

    // tP-short-double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-20
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion20typepromotion20() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion20typepromotion20.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-double.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion20typepromotion20.ttl"));
        assertTrue(comparison);
    }

    // tP-short-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-21
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion21typepromotion21() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion21typepromotion21.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion21typepromotion21.ttl"));
        assertTrue(comparison);
    }

    // tP-short-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-22
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion22typepromotion22() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion22typepromotion22.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion22typepromotion22.ttl"));
        assertTrue(comparison);
    }

    // tP-short-short-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-23
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion23typepromotion23() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion23typepromotion23.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-short-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion23typepromotion23.ttl"));
        assertTrue(comparison);
    }

    // tP-byte-short-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-24
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion24typepromotion24() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion24typepromotion24.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-byte-short-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion24typepromotion24.ttl"));
        assertTrue(comparison);
    }

    // tP-short-long-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-25
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion25typepromotion25() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion25typepromotion25.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-long-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion25typepromotion25.ttl"));
        assertTrue(comparison);
    }

    // tP-short-int-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-26
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion26typepromotion26() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion26typepromotion26.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-int-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion26typepromotion26.ttl"));
        assertTrue(comparison);
    }

    // tP-short-byte-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-27
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion27typepromotion27() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion27typepromotion27.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-byte-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion27typepromotion27.ttl"));
        assertTrue(comparison);
    }

    // tP-double-float-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-28
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion28typepromotion28() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion28typepromotion28.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-float-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion28typepromotion28.ttl"));
        assertTrue(comparison);
    }

    // tP-double-decimal-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-29
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion29typepromotion29() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion29typepromotion29.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-decimal-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion29typepromotion29.ttl"));
        assertTrue(comparison);
    }

    // tP-float-decimal-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-30
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void datar2typepromotionmanifesttypepromotion30typepromotion30() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datar2typepromotionmanifesttypepromotion30typepromotion30.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-decimal-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/datar2typepromotionmanifesttypepromotion30typepromotion30.ttl"));
        assertTrue(comparison);
    }

}