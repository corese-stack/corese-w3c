package fr.inria.corese.w3c.sparql10;

import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.xml.sax.SAXException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/sparql/sparql10/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-03, Time: 17:40:54 Europe/Paris
 */
public class sparql10Test {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/sparql10/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/sparql/sparql10/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // Filter-nested - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-nested-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-nested-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-nested-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-1.ttl
    // A FILTER is in scope for variables bound at the same level of the query tree
    @Test
    public void algebrafilternested1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilternested1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-nested-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-nested-1.srx"), Path.of("src/test/resources/algebrafilternested1.xml"));
        assertTrue(comparison);
    }

    // Filter-nested - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-nested-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-nested-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-nested-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-1.ttl
    // A FILTER in a group { ... } cannot see variables bound outside that group
    @Test
    public void algebrafilternested2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilternested2.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-nested-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-nested-2.srx"), Path.of("src/test/resources/algebrafilternested2.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-2.ttl
    // FILTER placed after the triple pattern that contains the variable tested
    @Test
    public void algebrafilterplace1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilterplace1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-1.srx"), Path.of("src/test/resources/algebrafilterplace1.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-2.ttl
    // FILTERs are scoped to the nearest enclosing group - placement within that group does not matter
    @Test
    public void algebrafilterplace2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilterplace2.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-2.srx"), Path.of("src/test/resources/algebrafilterplace2.xml"));
        assertTrue(comparison);
    }

    // Filter-placement - 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-place-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-placement-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-2.ttl
    // FILTERs are scoped to the nearest enclosing group - placement within that group does not matter
    @Test
    public void algebrafilterplace3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilterplace3.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-placement-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-placement-3.srx"), Path.of("src/test/resources/algebrafilterplace3.xml"));
        assertTrue(comparison);
    }

    // Filter-scope - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#filter-scope-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-scope-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/filter-scope-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/data-2.ttl
    // FILTERs in an OPTIONAL do not extend to variables bound outside of the LeftJoin(...) operation
    @Test
    public void algebrafilterscope1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrafilterscope1.xml",
                "-q", "src/test/resources/sparql10/algebra/filter-scope-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/filter-scope-1.srx"), Path.of("src/test/resources/algebrafilterscope1.xml"));
        assertTrue(comparison);
    }

    // Join operator with OPTs, BGPs, and UNIONs SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-combo-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-graph-2.ttl
    // Tests nested combination of Join with a BGP / OPT and a BGP / UNION
    @Test
    public void algebrajoincombo1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/join-combo-graph-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrajoincombo1.xml",
                "-q", "src/test/resources/sparql10/algebra/join-combo-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/join-combo-1.srx"), Path.of("src/test/resources/algebrajoincombo1.xml"));
        assertTrue(comparison);
    }

    // Join operator with Graph and Union SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-combo-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/join-combo-graph-2.ttl
    // Tests combination of Join operator with Graph on LHS and Union on RHS
    @Test
    public void algebrajoincombo2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/join-combo-graph-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrajoincombo2.xml",
                "-q", "src/test/resources/sparql10/algebra/join-combo-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/join-combo-2.srx"), Path.of("src/test/resources/algebrajoincombo2.xml"));
        assertTrue(comparison);
    }

    // Join scope - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#join-scope-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/var-scope-join-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/var-scope-join-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/var-scope-join-1.ttl
    // Variables have query scope.
    @Test
    public void algebrajoinscope1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/var-scope-join-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebrajoinscope1.xml",
                "-q", "src/test/resources/sparql10/algebra/var-scope-join-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/var-scope-join-1.srx"), Path.of("src/test/resources/algebrajoinscope1.xml"));
        assertTrue(comparison);
    }

    // Nested Optionals - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#nested-opt-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt.ttl
    // Nested-optionals with a shared variable that does not appear in the middle pattern (a not well-formed query pattern as per "Semantics and Complexity" of SPARQL
    @Test
    public void algebranestedopt1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/two-nested-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebranestedopt1.xml",
                "-q", "src/test/resources/sparql10/algebra/two-nested-opt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/two-nested-opt.srx"), Path.of("src/test/resources/algebranestedopt1.xml"));
        assertTrue(comparison);
    }

    // Nested Optionals - 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#nested-opt-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt-alt.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt-alt.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/two-nested-opt.ttl
    // OPTIONALs parse in a left-associative manner
    @Test
    public void algebranestedopt2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/two-nested-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebranestedopt2.xml",
                "-q", "src/test/resources/sparql10/algebra/two-nested-opt-alt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/two-nested-opt-alt.srx"), Path.of("src/test/resources/algebranestedopt2.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-1.ttl
    // A FILTER inside an OPTIONAL can reference a variable bound in the required part of the OPTIONAL
    @Test
    public void algebraoptfilter1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebraoptfilter1.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-1.srx"), Path.of("src/test/resources/algebraoptfilter1.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - 2 filters SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-2.ttl
    // FILTERs inside an OPTIONAL can refer to variables from both the required and optional parts of the construct.
    @Test
    public void algebraoptfilter2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebraoptfilter2.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-2.srx"), Path.of("src/test/resources/algebraoptfilter2.xml"));
        assertTrue(comparison);
    }

    // Optional-filter - scope of variable SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#opt-filter-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/algebra/opt-filter-3.ttl
    // FILTERs in an OPTIONAL do not extend to variables bound outside of the LeftJoin(...) operation
    @Test
    public void algebraoptfilter3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/algebra/opt-filter-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/algebraoptfilter3.xml",
                "-q", "src/test/resources/sparql10/algebra/opt-filter-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/algebra/opt-filter-3.srx"), Path.of("src/test/resources/algebraoptfilter3.xml"));
        assertTrue(comparison);
    }

    // ASK-1 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/data.ttl
    @Test
    public void askask1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/askask1.xml",
                "-q", "src/test/resources/sparql10/ask/ask-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-1.srx"), Path.of("src/test/resources/askask1.xml"));
        assertTrue(comparison);
    }

    // ASK-4 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-4.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/data.ttl
    @Test
    public void askask4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/askask4.xml",
                "-q", "src/test/resources/sparql10/ask/ask-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-4.srx"), Path.of("src/test/resources/askask4.xml"));
        assertTrue(comparison);
    }

    // ASK-7 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-7
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-7.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-7.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/data.ttl
    @Test
    public void askask7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/askask7.xml",
                "-q", "src/test/resources/sparql10/ask/ask-7.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-7.srx"), Path.of("src/test/resources/askask7.xml"));
        assertTrue(comparison);
    }

    // ASK-8 (SPARQL XML results) SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/ask/manifest#ask-8
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-8.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/ask-8.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/ask/data.ttl
    @Test
    public void askask8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/ask/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/askask8.xml",
                "-q", "src/test/resources/sparql10/ask/ask-8.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/ask/ask-8.srx"), Path.of("src/test/resources/askask8.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-1.ttl
    @Test
    public void basicbaseprefix1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbaseprefix1.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-1.srx"), Path.of("src/test/resources/basicbaseprefix1.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-1.ttl
    @Test
    public void basicbaseprefix2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbaseprefix2.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-2.srx"), Path.of("src/test/resources/basicbaseprefix2.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-1.ttl
    @Test
    public void basicbaseprefix3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbaseprefix3.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-3.srx"), Path.of("src/test/resources/basicbaseprefix3.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-4.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-1.ttl
    @Test
    public void basicbaseprefix4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbaseprefix4.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-4.srx"), Path.of("src/test/resources/basicbaseprefix4.xml"));
        assertTrue(comparison);
    }

    // Basic - Prefix/Base 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#base-prefix-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-5.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/base-prefix-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-1.ttl
    @Test
    public void basicbaseprefix5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbaseprefix5.xml",
                "-q", "src/test/resources/sparql10/basic/base-prefix-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/base-prefix-5.srx"), Path.of("src/test/resources/basicbaseprefix5.xml"));
        assertTrue(comparison);
    }

    // Non-matching triple pattern SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#bgp-no-match
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/bgp-no-match.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/bgp-no-match.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-7.ttl
    // Patterns not in data don't match
    @Test
    public void basicbgpnomatch() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-7.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicbgpnomatch.xml",
                "-q", "src/test/resources/sparql10/basic/bgp-no-match.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/bgp-no-match.srx"), Path.of("src/test/resources/basicbgpnomatch.xml"));
        assertTrue(comparison);
    }

    // Basic - List 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-2.ttl
    @Test
    public void basiclist1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basiclist1.xml",
                "-q", "src/test/resources/sparql10/basic/list-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-1.srx"), Path.of("src/test/resources/basiclist1.xml"));
        assertTrue(comparison);
    }

    // Basic - List 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-2.ttl
    @Test
    public void basiclist2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basiclist2.xml",
                "-q", "src/test/resources/sparql10/basic/list-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-2.srx"), Path.of("src/test/resources/basiclist2.xml"));
        assertTrue(comparison);
    }

    // Basic - List 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-2.ttl
    @Test
    public void basiclist3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basiclist3.xml",
                "-q", "src/test/resources/sparql10/basic/list-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-3.srx"), Path.of("src/test/resources/basiclist3.xml"));
        assertTrue(comparison);
    }

    // Basic - List 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#list-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-4.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/list-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-2.ttl
    @Test
    public void basiclist4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basiclist4.xml",
                "-q", "src/test/resources/sparql10/basic/list-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/list-4.srx"), Path.of("src/test/resources/basiclist4.xml"));
        assertTrue(comparison);
    }

    // Prefix name 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#prefix-name-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/prefix-name-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/prefix-name-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-6.ttl
    // No local name - foo:
    @Test
    public void basicprefixname1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicprefixname1.xml",
                "-q", "src/test/resources/sparql10/basic/prefix-name-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/prefix-name-1.srx"), Path.of("src/test/resources/basicprefixname1.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-3.ttl
    @Test
    public void basicquotes1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicquotes1.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-1.srx"), Path.of("src/test/resources/basicquotes1.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-3.ttl
    @Test
    public void basicquotes2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicquotes2.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-2.srx"), Path.of("src/test/resources/basicquotes2.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-3.ttl
    @Test
    public void basicquotes3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicquotes3.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-3.srx"), Path.of("src/test/resources/basicquotes3.xml"));
        assertTrue(comparison);
    }

    // Basic - Quotes 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#quotes-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-4.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/quotes-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-3.ttl
    @Test
    public void basicquotes4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicquotes4.xml",
                "-q", "src/test/resources/sparql10/basic/quotes-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/quotes-4.srx"), Path.of("src/test/resources/basicquotes4.xml"));
        assertTrue(comparison);
    }

    // Basic graph pattern - spoo SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#spoo-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/spoo-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/spoo-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-6.ttl
    // Test the :x :y :o1, :o2 construct
    @Test
    public void basicspoo1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicspoo1.xml",
                "-q", "src/test/resources/sparql10/basic/spoo-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/spoo-1.srx"), Path.of("src/test/resources/basicspoo1.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm1.xml",
                "-q", "src/test/resources/sparql10/basic/term-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-1.srx"), Path.of("src/test/resources/basicterm1.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm2.xml",
                "-q", "src/test/resources/sparql10/basic/term-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-2.srx"), Path.of("src/test/resources/basicterm2.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm3.xml",
                "-q", "src/test/resources/sparql10/basic/term-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-3.srx"), Path.of("src/test/resources/basicterm3.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-4.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm4.xml",
                "-q", "src/test/resources/sparql10/basic/term-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-4.srx"), Path.of("src/test/resources/basicterm4.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-5.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm5.xml",
                "-q", "src/test/resources/sparql10/basic/term-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-5.srx"), Path.of("src/test/resources/basicterm5.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 6 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-6
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-6.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-6.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm6.xml",
                "-q", "src/test/resources/sparql10/basic/term-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-6.srx"), Path.of("src/test/resources/basicterm6.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 7 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-7
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-7.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-7.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm7.xml",
                "-q", "src/test/resources/sparql10/basic/term-7.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-7.srx"), Path.of("src/test/resources/basicterm7.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 8 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-8
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-8.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-8.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm8.xml",
                "-q", "src/test/resources/sparql10/basic/term-8.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-8.srx"), Path.of("src/test/resources/basicterm8.xml"));
        assertTrue(comparison);
    }

    // Basic - Term 9 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#term-9
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-9.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/term-9.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-4.ttl
    @Test
    public void basicterm9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicterm9.xml",
                "-q", "src/test/resources/sparql10/basic/term-9.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/term-9.srx"), Path.of("src/test/resources/basicterm9.xml"));
        assertTrue(comparison);
    }

    // Basic - Var 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#var-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/var-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/var-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-5.ttl
    @Test
    public void basicvar1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicvar1.xml",
                "-q", "src/test/resources/sparql10/basic/var-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/var-1.srx"), Path.of("src/test/resources/basicvar1.xml"));
        assertTrue(comparison);
    }

    // Basic - Var 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#var-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/var-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/var-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/basic/data-5.ttl
    @Test
    public void basicvar2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/basic/data-5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/basicvar2.xml",
                "-q", "src/test/resources/sparql10/basic/var-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/basic/var-2.srx"), Path.of("src/test/resources/basicvar2.xml"));
        assertTrue(comparison);
    }

    // dawg-bnode-coreference SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/bnode-coreference/manifest#dawg-bnode-coref-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/bnode-coreference/result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/bnode-coreference/query.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/bnode-coreference/data.ttl
    // Query results must maintain bnode co-references in the dataset
    @Test
    public void bnodecoreferencedawgbnodecoref001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/bnode-coreference/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/bnodecoreferencedawgbnodecoref001.ttl",
                "-q", "src/test/resources/sparql10/bnode-coreference/query.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/bnode-coreference/result.ttl"), Path.of("src/test/resources/bnodecoreferencedawgbnodecoref001.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - true SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-1.ttl
    // Non-zero numerics, non-empty strings, and the true boolean have an EBV of true
    @Test
    public void booleaneffectivevaluedawgbev1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev1.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-1.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev1.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - false SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-1.ttl
    // Zero-valued numerics, the empty string, and the false boolean have an EBV of false
    @Test
    public void booleaneffectivevaluedawgbev2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev2.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-2.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev2.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - && SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-1.ttl
    // The && operator takes the EBV of its operands
    @Test
    public void booleaneffectivevaluedawgbev3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev3.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-3.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev3.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - || SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-1.ttl
    // The || operator takes the EBV of its operands
    @Test
    public void booleaneffectivevaluedawgbev4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev4.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-4.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev4.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - optional SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-5.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-2.ttl
    // The EBV of an unbound value  or a literal with an unknown datatype is a type error, which eliminates the solution in question
    @Test
    public void booleaneffectivevaluedawgbev5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev5.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-5.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev5.ttl"));
        assertTrue(comparison);
    }

    // Test 'boolean effective value' - unknown types SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-bev-6
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-bev-6.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-bev-6.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-2.ttl
    // Negating a type error is still a type error
    @Test
    public void booleaneffectivevaluedawgbev6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbev6.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-bev-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-bev-6.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbev6.ttl"));
        assertTrue(comparison);
    }

    // Test literal 'true' SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#dawg-boolean-literal
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/result-boolean-literal.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/query-boolean-literal.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/boolean-effective-value/data-1.ttl
    @Test
    public void booleaneffectivevaluedawgbooleanliteral() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/boolean-effective-value/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/booleaneffectivevaluedawgbooleanliteral.ttl",
                "-q", "src/test/resources/sparql10/boolean-effective-value/query-boolean-literal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/boolean-effective-value/result-boolean-literal.ttl"), Path.of("src/test/resources/booleaneffectivevaluedawgbooleanliteral.ttl"));
        assertTrue(comparison);
    }

    // dawg-bound-query-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/bound/manifest#dawg-bound-query-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/bound/bound1-result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/bound/bound1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/bound/data.ttl
    // BOUND test case.
    @Test
    public void bounddawgboundquery001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/bound/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/bounddawgboundquery001.ttl",
                "-q", "src/test/resources/sparql10/bound/bound1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/bound/bound1-result.ttl"), Path.of("src/test/resources/bounddawgboundquery001.ttl"));
        assertTrue(comparison);
    }

    // Cast to xsd:boolean SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-bool
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-bool.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-bool.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastbool() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastbool.xml",
                "-q", "src/test/resources/sparql10/cast/cast-bool.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-bool.srx"), Path.of("src/test/resources/castcastbool.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:dateTime SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dT
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dT.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dT.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastdt() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastdt.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dT.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dT.srx"), Path.of("src/test/resources/castcastdt.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dbl
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dbl.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dbl.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastdbl() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastdbl.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dbl.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dbl.srx"), Path.of("src/test/resources/castcastdbl.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-dec
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dec.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-dec.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastdec() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastdec.xml",
                "-q", "src/test/resources/sparql10/cast/cast-dec.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-dec.srx"), Path.of("src/test/resources/castcastdec.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-flt
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-flt.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-flt.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastflt() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastflt.xml",
                "-q", "src/test/resources/sparql10/cast/cast-flt.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-flt.srx"), Path.of("src/test/resources/castcastflt.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:integer SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-int
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-int.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-int.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcastint() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcastint.xml",
                "-q", "src/test/resources/sparql10/cast/cast-int.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-int.srx"), Path.of("src/test/resources/castcastint.xml"));
        assertTrue(comparison);
    }

    // Cast to xsd:string SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#cast-str
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-str.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/cast-str.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/cast/data.ttl
    @Test
    public void castcaststr() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/castcaststr.xml",
                "-q", "src/test/resources/sparql10/cast/cast-str.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/cast/cast-str.srx"), Path.of("src/test/resources/castcaststr.xml"));
        assertTrue(comparison);
    }

    // dawg-construct-identity SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#construct-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/result-ident.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/query-ident.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/data-ident.ttl
    // Graph equivalent result graph
    @Test
    public void constructconstruct1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/construct/data-ident.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/constructconstruct1.ttl",
                "-q", "src/test/resources/sparql10/construct/query-ident.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/construct/result-ident.ttl"), Path.of("src/test/resources/constructconstruct1.ttl"));
        assertTrue(comparison);
    }

    // dawg-construct-subgraph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#construct-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/result-subgraph.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/query-subgraph.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/data-ident.ttl
    // Result subgraph of original graph
    @Test
    public void constructconstruct2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/construct/data-ident.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/constructconstruct2.ttl",
                "-q", "src/test/resources/sparql10/construct/query-subgraph.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/construct/result-subgraph.ttl"), Path.of("src/test/resources/constructconstruct2.ttl"));
        assertTrue(comparison);
    }

    // dawg-construct-reification-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#construct-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/result-reif.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/query-reif-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/data-reif.ttl
    // Reification of the default graph
    @Test
    public void constructconstruct3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/construct/data-reif.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/constructconstruct3.ttl",
                "-q", "src/test/resources/sparql10/construct/query-reif-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/construct/result-reif.ttl"), Path.of("src/test/resources/constructconstruct3.ttl"));
        assertTrue(comparison);
    }

    // dawg-construct-reification-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#construct-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/result-reif.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/query-reif-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/data-reif.ttl
    // Reification of the default graph
    @Test
    public void constructconstruct4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/construct/data-reif.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/constructconstruct4.ttl",
                "-q", "src/test/resources/sparql10/construct/query-reif-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/construct/result-reif.ttl"), Path.of("src/test/resources/constructconstruct4.ttl"));
        assertTrue(comparison);
    }

    // dawg-construct-optional SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#construct-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/result-construct-optional.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/query-construct-optional.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/construct/data-opt.ttl
    // Reification of the default graph
    @Test
    public void constructconstruct5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/construct/data-opt.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/constructconstruct5.ttl",
                "-q", "src/test/resources/sparql10/construct/query-construct-optional.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/construct/result-construct-optional.ttl"), Path.of("src/test/resources/constructconstruct5.ttl"));
        assertTrue(comparison);
    }

    // dataset-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-01
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-01.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-01.rq
    // Data file: null
    // Data: default dataset / Query: default dataset
    @Test
    public void datasetdawgdataset01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset01.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-01.ttl"), Path.of("src/test/resources/datasetdawgdataset01.ttl"));
        assertTrue(comparison);
    }

    // dataset-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-02
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-02.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-02.rq
    // Data file: null
    // Data: named dataset / Query: default dataset
    @Test
    public void datasetdawgdataset02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset02.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-02.ttl"), Path.of("src/test/resources/datasetdawgdataset02.ttl"));
        assertTrue(comparison);
    }

    // dataset-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-03
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-03.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-03.rq
    // Data file: null
    // Data: named dataset / Query: named dataset dataset
    @Test
    public void datasetdawgdataset03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset03.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-03.ttl"), Path.of("src/test/resources/datasetdawgdataset03.ttl"));
        assertTrue(comparison);
    }

    // dataset-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-04
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-04.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-04.rq
    // Data file: null
    // Data: named dataset / Query: default dataset
    @Test
    public void datasetdawgdataset04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset04.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-04.ttl"), Path.of("src/test/resources/datasetdawgdataset04.ttl"));
        assertTrue(comparison);
    }

    // dataset-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-05
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-05.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-05.rq
    // Data file: null
    // Data: default and named / Query: default dataset
    @Test
    public void datasetdawgdataset05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset05.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-05.ttl"), Path.of("src/test/resources/datasetdawgdataset05.ttl"));
        assertTrue(comparison);
    }

    // dataset-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-06
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-06.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-06.rq
    // Data file: null
    // Data: default and named / Query: named dataset
    @Test
    public void datasetdawgdataset06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset06.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-06.ttl"), Path.of("src/test/resources/datasetdawgdataset06.ttl"));
        assertTrue(comparison);
    }

    // dataset-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-07
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-07.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-07.rq
    // Data file: null
    // Data: default and named / Query: all data by UNION
    @Test
    public void datasetdawgdataset07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset07.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-07.ttl"), Path.of("src/test/resources/datasetdawgdataset07.ttl"));
        assertTrue(comparison);
    }

    // dataset-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-08
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-08.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-08.rq
    // Data file: null
    // Data: default and named / Query: common subjects
    @Test
    public void datasetdawgdataset08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset08.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-08.ttl"), Path.of("src/test/resources/datasetdawgdataset08.ttl"));
        assertTrue(comparison);
    }

    // dataset-09b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-09b
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-09.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-09b.rq
    // Data file: null
    // Data: default and named (bnodes) / Query: common subjects
    @Test
    public void datasetdawgdataset09b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset09b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-09b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-09.ttl"), Path.of("src/test/resources/datasetdawgdataset09b.ttl"));
        assertTrue(comparison);
    }

    // dataset-10b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-10b
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-10.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-10b.rq
    // Data file: null
    // Data: default and named (same data, with bnodes) / Query: common subjects
    @Test
    public void datasetdawgdataset10b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset10b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-10b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-10.ttl"), Path.of("src/test/resources/datasetdawgdataset10b.ttl"));
        assertTrue(comparison);
    }

    // dataset-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-11
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-11.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-11.rq
    // Data file: null
    // Data: default and named (several) / Query: get everything
    @Test
    public void datasetdawgdataset11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset11.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-11.ttl"), Path.of("src/test/resources/datasetdawgdataset11.ttl"));
        assertTrue(comparison);
    }

    // dataset-12b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#dawg-dataset-12b
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-12.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/dataset/dataset-12b.rq
    // Data file: null
    // Data: default (several) and named (several) / Query: get everything
    @Test
    public void datasetdawgdataset12b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasetdawgdataset12b.ttl",
                "-q", "src/test/resources/sparql10/dataset/dataset-12b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/dataset/dataset-12.ttl"), Path.of("src/test/resources/datasetdawgdataset12b.ttl"));
        assertTrue(comparison);
    }

    // Numbers: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-num.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-num.ttl
    @Test
    public void distinctdistinct1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-num.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinct1.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-num.srx"), Path.of("src/test/resources/distinctdistinct1.xml"));
        assertTrue(comparison);
    }

    // Strings: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-str.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-str.ttl
    @Test
    public void distinctdistinct2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinct2.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-str.srx"), Path.of("src/test/resources/distinctdistinct2.xml"));
        assertTrue(comparison);
    }

    // Nodes: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-node.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-node.ttl
    @Test
    public void distinctdistinct3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-node.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinct3.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-node.srx"), Path.of("src/test/resources/distinctdistinct3.xml"));
        assertTrue(comparison);
    }

    // Opt: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-opt.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-opt.ttl
    @Test
    public void distinctdistinct4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinct4.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-opt.srx"), Path.of("src/test/resources/distinctdistinct4.xml"));
        assertTrue(comparison);
    }

    // All: Distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-9
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-all.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-all.ttl
    @Test
    public void distinctdistinct9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-all.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinct9.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-all.srx"), Path.of("src/test/resources/distinctdistinct9.xml"));
        assertTrue(comparison);
    }

    // SELECT DISTINCT * SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#distinct-star-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-star-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/distinct-star-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-star.ttl
    @Test
    public void distinctdistinctstar1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-star.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctdistinctstar1.xml",
                "-q", "src/test/resources/sparql10/distinct/distinct-star-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/distinct-star-1.srx"), Path.of("src/test/resources/distinctdistinctstar1.xml"));
        assertTrue(comparison);
    }

    // Numbers: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-num.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-num.ttl
    @Test
    public void distinctnodistinct1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-num.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctnodistinct1.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-num.srx"), Path.of("src/test/resources/distinctnodistinct1.xml"));
        assertTrue(comparison);
    }

    // Strings: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-str.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-str.ttl
    @Test
    public void distinctnodistinct2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctnodistinct2.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-str.srx"), Path.of("src/test/resources/distinctnodistinct2.xml"));
        assertTrue(comparison);
    }

    // Nodes: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-node.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-node.ttl
    @Test
    public void distinctnodistinct3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-node.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctnodistinct3.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-node.srx"), Path.of("src/test/resources/distinctnodistinct3.xml"));
        assertTrue(comparison);
    }

    // Opt: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-opt.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-opt.ttl
    @Test
    public void distinctnodistinct4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-opt.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctnodistinct4.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-opt.srx"), Path.of("src/test/resources/distinctnodistinct4.xml"));
        assertTrue(comparison);
    }

    // All: No distinct SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#no-distinct-9
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-all.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/no-distinct-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/distinct/data-all.ttl
    @Test
    public void distinctnodistinct9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/distinct/data-all.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/distinctnodistinct9.xml",
                "-q", "src/test/resources/sparql10/distinct/no-distinct-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/distinct/no-distinct-all.srx"), Path.of("src/test/resources/distinctnodistinct9.xml"));
        assertTrue(comparison);
    }

    // datatype-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-datatype-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-datatype-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgdatatype1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgdatatype1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-1.ttl"), Path.of("src/test/resources/exprbuiltindawgdatatype1.ttl"));
        assertTrue(comparison);
    }

    // datatype-2 : Literals with a datatype SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-datatype-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-datatype-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    // updated from original test case: eliminated ordering from test
    @Test
    public void exprbuiltindawgdatatype2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltindawgdatatype2.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-2.srx"), Path.of("src/test/resources/exprbuiltindawgdatatype2.xml"));
        assertTrue(comparison);
    }

    // datatype-3 : Literals with a datatype of xsd:string SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-datatype-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-datatype-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-datatype-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    // updated from original test case: eliminated ordering from test
    @Test
    public void exprbuiltindawgdatatype3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltindawgdatatype3.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-datatype-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-datatype-3.srx"), Path.of("src/test/resources/exprbuiltindawgdatatype3.xml"));
        assertTrue(comparison);
    }

    // isBlank-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isBlank-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-blank-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-blank-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgisblank1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgisblank1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-blank-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-blank-1.ttl"), Path.of("src/test/resources/exprbuiltindawgisblank1.ttl"));
        assertTrue(comparison);
    }

    // isIRI-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isIRI-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-iri-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-iri-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgisiri1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgisiri1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-iri-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-iri-1.ttl"), Path.of("src/test/resources/exprbuiltindawgisiri1.ttl"));
        assertTrue(comparison);
    }

    // isLiteral SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isLiteral-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-isliteral-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-isliteral-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    @Test
    public void exprbuiltindawgisliteral1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgisliteral1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-isliteral-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-isliteral-1.ttl"), Path.of("src/test/resources/exprbuiltindawgisliteral1.ttl"));
        assertTrue(comparison);
    }

    // isURI-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-isURI-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-uri-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-uri-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgisuri1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgisuri1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-uri-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-uri-1.ttl"), Path.of("src/test/resources/exprbuiltindawgisuri1.ttl"));
        assertTrue(comparison);
    }

    // lang-1 : Literals with a lang tag of some kind SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-lang-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-lang-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    // updated from original test case: eliminated ordering from test
    @Test
    public void exprbuiltindawglang1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltindawglang1.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-1.srx"), Path.of("src/test/resources/exprbuiltindawglang1.xml"));
        assertTrue(comparison);
    }

    // lang-2 : Literals with a lang tag of '' SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-lang-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-lang-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    // updated from original test case: eliminated ordering from test
    @Test
    public void exprbuiltindawglang2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltindawglang2.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-2.srx"), Path.of("src/test/resources/exprbuiltindawglang2.xml"));
        assertTrue(comparison);
    }

    // lang-3 : Graph matching with lang tag being a different case SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-lang-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-lang-3.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-lang-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-2.ttl
    // updated from original test case: eliminated ordering from test
    @Test
    public void exprbuiltindawglang3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltindawglang3.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/q-lang-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/result-lang-3.srx"), Path.of("src/test/resources/exprbuiltindawglang3.xml"));
        assertTrue(comparison);
    }

    // LangMatches-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-langMatches-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-langMatches-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-langMatches.ttl
    // langMatches(lang(?v), 'en-GB') matches 'abc'@en-gb
    @Test
    public void exprbuiltindawglangmatches1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawglangmatches1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-1.ttl"), Path.of("src/test/resources/exprbuiltindawglangmatches1.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-langMatches-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-langMatches-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-langMatches.ttl
    // langMatches(lang(?v), 'en') matches 'abc'@en, 'abc'@en-gb
    @Test
    public void exprbuiltindawglangmatches2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawglangmatches2.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-2.ttl"), Path.of("src/test/resources/exprbuiltindawglangmatches2.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-langMatches-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-langMatches-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-langMatches.ttl
    // langMatches(lang(?v), '*') matches 'abc'@en, 'abc'@en-gb, 'abc'@fr
    @Test
    public void exprbuiltindawglangmatches3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawglangmatches3.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-3.ttl"), Path.of("src/test/resources/exprbuiltindawglangmatches3.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-langMatches-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-langMatches-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-langMatches.ttl
    // ! langMatches(lang(?v), '*') matches 'abc'
    @Test
    public void exprbuiltindawglangmatches4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawglangmatches4.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-4.ttl"), Path.of("src/test/resources/exprbuiltindawglangmatches4.ttl"));
        assertTrue(comparison);
    }

    // LangMatches-basic SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-langMatches-basic
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-langMatches-de.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-langMatches-de-de.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-langMatches-de.ttl
    // the basic range 'de-de' does not match 'de-Latn-de'
    @Test
    public void exprbuiltindawglangmatchesbasic() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-langMatches-de.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawglangmatchesbasic.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-langMatches-de-de.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-langMatches-de.ttl"), Path.of("src/test/resources/exprbuiltindawglangmatchesbasic.ttl"));
        assertTrue(comparison);
    }

    // str-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-str-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-str-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgstr1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgstr1.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-1.ttl"), Path.of("src/test/resources/exprbuiltindawgstr1.ttl"));
        assertTrue(comparison);
    }

    // str-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-str-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-str-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgstr2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgstr2.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-2.ttl"), Path.of("src/test/resources/exprbuiltindawgstr2.ttl"));
        assertTrue(comparison);
    }

    // str-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-str-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-str-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgstr3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgstr3.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-3.ttl"), Path.of("src/test/resources/exprbuiltindawgstr3.ttl"));
        assertTrue(comparison);
    }

    // str-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#dawg-str-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-str-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/q-str-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    @Test
    public void exprbuiltindawgstr4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltindawgstr4.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/q-str-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-str-4.ttl"), Path.of("src/test/resources/exprbuiltindawgstr4.ttl"));
        assertTrue(comparison);
    }

    // lang-case-insensitive-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#lang-case-insensitive-eq
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-insensitive-eq.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-sensitivity-eq.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-sensitivity.ttl
    // 'xyz'@en = 'xyz'@EN
    @Test
    public void exprbuiltinlangcaseinsensitiveeq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltinlangcaseinsensitiveeq.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/lang-case-insensitive-eq.srx"), Path.of("src/test/resources/exprbuiltinlangcaseinsensitiveeq.xml"));
        assertTrue(comparison);
    }

    // lang-case-insensitive-ne SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#lang-case-insensitive-ne
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-insensitive-ne.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-sensitivity-ne.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/lang-case-sensitivity.ttl
    // 'xyz'@en != 'xyz'@EN
    @Test
    public void exprbuiltinlangcaseinsensitivene() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/exprbuiltinlangcaseinsensitivene.xml",
                "-q", "src/test/resources/sparql10/expr-builtin/lang-case-sensitivity-ne.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-builtin/lang-case-insensitive-ne.srx"), Path.of("src/test/resources/exprbuiltinlangcaseinsensitivene.xml"));
        assertTrue(comparison);
    }

    // sameTerm-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-eq
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-sameTerm-eq.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/sameTerm-eq.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    // sameTerm(?v1, ?v2) && ?v1 = ?v2
    @Test
    public void exprbuiltinsametermeq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltinsametermeq.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm-eq.ttl"), Path.of("src/test/resources/exprbuiltinsametermeq.ttl"));
        assertTrue(comparison);
    }

    // sameTerm-not-eq SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-not-eq
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-sameTerm-not-eq.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/sameTerm-not-eq.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    // !sameTerm(?v1, ?v2) && ?v1 = ?v2
    @Test
    public void exprbuiltinsametermnoteq() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltinsametermnoteq.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm-not-eq.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm-not-eq.ttl"), Path.of("src/test/resources/exprbuiltinsametermnoteq.ttl"));
        assertTrue(comparison);
    }

    // sameTerm-simple SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#sameTerm-simple
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/result-sameTerm.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/sameTerm.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-builtin/data-builtin-1.ttl
    // sameTerm(?v1, ?v2)
    @Test
    public void exprbuiltinsametermsimple() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-builtin/data-builtin-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprbuiltinsametermsimple.ttl",
                "-q", "src/test/resources/sparql10/expr-builtin/sameTerm.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-builtin/result-sameTerm.ttl"), Path.of("src/test/resources/exprbuiltinsametermsimple.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // = in FILTER expressions is value equality
    @Test
    public void exprequalseq1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq1.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-1.ttl"), Path.of("src/test/resources/exprequalseq1.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // = in FILTER expressions is value equality
    @Test
    public void exprequalseq2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq2.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-2.ttl"), Path.of("src/test/resources/exprequalseq2.ttl"));
        assertTrue(comparison);
    }

    // Equality - 2 var - test equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq2-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq2-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // = in FILTER is value equality
    @Test
    public void exprequalseq21() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq21.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq2-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq2-1.ttl"), Path.of("src/test/resources/exprequalseq21.ttl"));
        assertTrue(comparison);
    }

    // Equality - 2 var - test not equals  SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-2-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq2-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq2-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // != in FILTER is value inequality
    @Test
    public void exprequalseq22() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq22.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq2-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq2-1.ttl"), Path.of("src/test/resources/exprequalseq22.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Numerics are not value-equivalent to plain literals
    @Test
    public void exprequalseq3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq3.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-3.ttl"), Path.of("src/test/resources/exprequalseq3.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // = compares plain literals and unknown types with the same lexical form as false
    @Test
    public void exprequalseq4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq4.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-4.ttl"), Path.of("src/test/resources/exprequalseq4.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-5.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // = on IRI terms
    @Test
    public void exprequalseq5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseq5.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-5.ttl"), Path.of("src/test/resources/exprequalseq5.ttl"));
        assertTrue(comparison);
    }

    // Equality with bool SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-bool
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-bool.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-bool.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq-bool.ttl
    // = with bool
    @Test
    public void exprequalseqbool() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq-bool.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqbool.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-bool.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-bool.ttl"), Path.of("src/test/resources/exprequalseqbool.ttl"));
        assertTrue(comparison);
    }

    // Equality with float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-float
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-float.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-float.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq-float.ttl
    // = with float
    @Test
    public void exprequalseqfloat() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq-float.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqfloat.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-float.ttl"), Path.of("src/test/resources/exprequalseqfloat.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-1 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-graph-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-graph-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Graph pattern matching matches exact terms, not values
    @Test
    public void exprequalseqgraph1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqgraph1.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-1.ttl"), Path.of("src/test/resources/exprequalseqgraph1.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-2 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-graph-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-graph-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Graph pattern matching matches exact terms, not values
    @Test
    public void exprequalseqgraph2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqgraph2.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-2.ttl"), Path.of("src/test/resources/exprequalseqgraph2.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-3 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-graph-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-graph-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Graph pattern matching matches exact terms, not values
    @Test
    public void exprequalseqgraph3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqgraph3.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-3.ttl"), Path.of("src/test/resources/exprequalseqgraph3.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-4 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-graph-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-graph-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Graph pattern matching matches exact terms, not values
    @Test
    public void exprequalseqgraph4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqgraph4.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-4.ttl"), Path.of("src/test/resources/exprequalseqgraph4.ttl"));
        assertTrue(comparison);
    }

    // Equality 1-5 -- graph SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#eq-graph-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/result-eq-graph-5.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/query-eq-graph-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-equals/data-eq.ttl
    // Graph pattern matching matches exact terms, not values
    @Test
    public void exprequalseqgraph5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-equals/data-eq.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/exprequalseqgraph5.ttl",
                "-q", "src/test/resources/sparql10/expr-equals/query-eq-graph-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/expr-equals/result-eq-graph-5.ttl"), Path.of("src/test/resources/exprequalseqgraph5.ttl"));
        assertTrue(comparison);
    }

    // Greater-than or equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#ge-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-ge-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-ge-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // >= in FILTER expressions
    @Test
    public void expropsge1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsge1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-ge-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-ge-1.srx"), Path.of("src/test/resources/expropsge1.xml"));
        assertTrue(comparison);
    }

    // Less-than or equals SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#le-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-le-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-le-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // <= in FILTER expressions
    @Test
    public void expropsle1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsle1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-le-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-le-1.srx"), Path.of("src/test/resources/expropsle1.xml"));
        assertTrue(comparison);
    }

    // Subtraction SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#minus-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-minus-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-minus-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // A - B in FILTER expressions
    @Test
    public void expropsminus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsminus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-minus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-minus-1.srx"), Path.of("src/test/resources/expropsminus1.xml"));
        assertTrue(comparison);
    }

    // Multiplication SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#mul-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-mul-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-mul-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // A * B in FILTER expressions
    @Test
    public void expropsmul1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsmul1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-mul-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-mul-1.srx"), Path.of("src/test/resources/expropsmul1.xml"));
        assertTrue(comparison);
    }

    // Addition SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#plus-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-plus-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-plus-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // A + B in FILTER expressions
    @Test
    public void expropsplus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsplus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-plus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-plus-1.srx"), Path.of("src/test/resources/expropsplus1.xml"));
        assertTrue(comparison);
    }

    // Unary Minus SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#unminus-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-unminus-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-unminus-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // -A in FILTER expressions
    @Test
    public void expropsunminus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsunminus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-unminus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-unminus-1.srx"), Path.of("src/test/resources/expropsunminus1.xml"));
        assertTrue(comparison);
    }

    // Unary Plusn SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-ops/manifest#unplus-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/result-unplus-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/query-unplus-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/expr-ops/data.ttl
    // +A in FILTER expressions
    @Test
    public void expropsunplus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/expr-ops/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/expropsunplus1.xml",
                "-q", "src/test/resources/sparql10/expr-ops/query-unplus-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/expr-ops/result-unplus-1.srx"), Path.of("src/test/resources/expropsunplus1.xml"));
        assertTrue(comparison);
    }

    // graph-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-01
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-01.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default graph / Query: default graph
    @Test
    public void graphdawggraph01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph01.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-01.ttl"), Path.of("src/test/resources/graphdawggraph01.ttl"));
        assertTrue(comparison);
    }

    // graph-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-02
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-02.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-02.rq
    // Data file: null
    // Data: named graph / Query: default graph
    @Test
    public void graphdawggraph02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph02.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-02.ttl"), Path.of("src/test/resources/graphdawggraph02.ttl"));
        assertTrue(comparison);
    }

    // graph-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-03
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-03.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-03.rq
    // Data file: null
    // Data: named graph / Query: named graph graph
    @Test
    public void graphdawggraph03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph03.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-03.ttl"), Path.of("src/test/resources/graphdawggraph03.ttl"));
        assertTrue(comparison);
    }

    // graph-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-04
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-04.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-04.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: named graph / Query: default graph
    @Test
    public void graphdawggraph04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph04.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-04.ttl"), Path.of("src/test/resources/graphdawggraph04.ttl"));
        assertTrue(comparison);
    }

    // graph-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-05
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-05.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-05.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default and named / Query: default graph
    @Test
    public void graphdawggraph05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph05.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-05.ttl"), Path.of("src/test/resources/graphdawggraph05.ttl"));
        assertTrue(comparison);
    }

    // graph-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-06
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-06.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-06.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default and named / Query: named graph
    @Test
    public void graphdawggraph06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph06.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-06.ttl"), Path.of("src/test/resources/graphdawggraph06.ttl"));
        assertTrue(comparison);
    }

    // graph-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-07
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-07.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-07.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default and named / Query: all data by UNION
    @Test
    public void graphdawggraph07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph07.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-07.ttl"), Path.of("src/test/resources/graphdawggraph07.ttl"));
        assertTrue(comparison);
    }

    // graph-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-08
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-08.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-08.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default and named / Query: common subjects
    @Test
    public void graphdawggraph08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph08.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-08.ttl"), Path.of("src/test/resources/graphdawggraph08.ttl"));
        assertTrue(comparison);
    }

    // graph-09 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-09
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-09.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-09.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g3.ttl
    // Data: default and named (bnodes) / Query: common subjects
    @Test
    public void graphdawggraph09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g3.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph09.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-09.ttl"), Path.of("src/test/resources/graphdawggraph09.ttl"));
        assertTrue(comparison);
    }

    // graph-10b SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-10b
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-10.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-10.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g3.ttl
    // Data: default and named (same data, with bnodes) / Query: common subjects
    @Test
    public void graphdawggraph10b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g3.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph10b.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-10.ttl"), Path.of("src/test/resources/graphdawggraph10b.ttl"));
        assertTrue(comparison);
    }

    // graph-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#dawg-graph-11
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-11.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/graph-11.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/graph/data-g1.ttl
    // Data: default and named (several) / Query: get everything
    @Test
    public void graphdawggraph11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/graph/data-g1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/graphdawggraph11.ttl",
                "-q", "src/test/resources/sparql10/graph/graph-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/graph/graph-11.ttl"), Path.of("src/test/resources/graphdawggraph11.ttl"));
        assertTrue(comparison);
    }

    // kanji-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#kanji-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji-01-results.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji.ttl
    @Test
    public void i18nkanji1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/kanji.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/i18nkanji1.ttl",
                "-q", "src/test/resources/sparql10/i18n/kanji-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/kanji-01-results.ttl"), Path.of("src/test/resources/i18nkanji1.ttl"));
        assertTrue(comparison);
    }

    // kanji-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#kanji-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji-02-results.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/kanji.ttl
    @Test
    public void i18nkanji2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/kanji.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/i18nkanji2.ttl",
                "-q", "src/test/resources/sparql10/i18n/kanji-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/kanji-02-results.ttl"), Path.of("src/test/resources/i18nkanji2.ttl"));
        assertTrue(comparison);
    }

    // normalization-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-01-results.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-01.ttl
    @Test
    public void i18nnormalization1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/i18nnormalization1.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-01-results.ttl"), Path.of("src/test/resources/i18nnormalization1.ttl"));
        assertTrue(comparison);
    }

    // normalization-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-02-results.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-02.ttl
    // Example 1 from http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0096
    @Test
    public void i18nnormalization2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-02.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/i18nnormalization2.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-02-results.ttl"), Path.of("src/test/resources/i18nnormalization2.ttl"));
        assertTrue(comparison);
    }

    // normalization-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/i18n/manifest#normalization-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-03-results.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-03.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/i18n/normalization-03.ttl
    // Example 2 from http://lists.w3.org/Archives/Public/public-rdf-dawg/2005JulSep/0096
    @Test
    public void i18nnormalization3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/i18n/normalization-03.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/i18nnormalization3.ttl",
                "-q", "src/test/resources/sparql10/i18n/normalization-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/i18n/normalization-03-results.ttl"), Path.of("src/test/resources/i18nnormalization3.ttl"));
        assertTrue(comparison);
    }

    // date-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-1-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-3.ttl
    // Added type : xsd:date '='
    @Test
    public void openworlddate1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworlddate1.xml",
                "-q", "src/test/resources/sparql10/open-world/date-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-1-result.srx"), Path.of("src/test/resources/openworlddate1.xml"));
        assertTrue(comparison);
    }

    // date-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-2-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-3.ttl
    // Added type : xsd:date '!='
    @Test
    public void openworlddate2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworlddate2.xml",
                "-q", "src/test/resources/sparql10/open-world/date-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-2-result.srx"), Path.of("src/test/resources/openworlddate2.xml"));
        assertTrue(comparison);
    }

    // date-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-3-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-3.ttl
    // Added type : xsd:date '>'
    @Test
    public void openworlddate3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworlddate3.xml",
                "-q", "src/test/resources/sparql10/open-world/date-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-3-result.srx"), Path.of("src/test/resources/openworlddate3.xml"));
        assertTrue(comparison);
    }

    // date-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#date-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-4-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/date-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-3.ttl
    // xsd:date ORDER BY
    @Test
    public void openworlddate4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworlddate4.xml",
                "-q", "src/test/resources/sparql10/open-world/date-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/date-4-result.srx"), Path.of("src/test/resources/openworlddate4.xml"));
        assertTrue(comparison);
    }

    // open-cmp-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-cmp-01
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-cmp-01-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-cmp-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-4.ttl
    // Find things that compare with < or >
    @Test
    public void openworldopencmp01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopencmp01.xml",
                "-q", "src/test/resources/sparql10/open-world/open-cmp-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-cmp-01-result.srx"), Path.of("src/test/resources/openworldopencmp01.xml"));
        assertTrue(comparison);
    }

    // open-cmp-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-cmp-02
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-cmp-02-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-cmp-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-4.ttl
    // Find things that compare with <= and >
    @Test
    public void openworldopencmp02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopencmp02.xml",
                "-q", "src/test/resources/sparql10/open-world/open-cmp-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-cmp-02-result.srx"), Path.of("src/test/resources/openworldopencmp02.xml"));
        assertTrue(comparison);
    }

    // open-eq-01 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-01
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-01-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // graph match - no lexical form in data (assumes no value matching)
    @Test
    public void openworldopeneq01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq01.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-01-result.srx"), Path.of("src/test/resources/openworldopeneq01.xml"));
        assertTrue(comparison);
    }

    // open-eq-02 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-02
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-02-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // graph match - unknown type
    @Test
    public void openworldopeneq02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq02.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-02-result.srx"), Path.of("src/test/resources/openworldopeneq02.xml"));
        assertTrue(comparison);
    }

    // open-eq-03 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-03
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-03-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-03.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // Filter(?v=1)
    @Test
    public void openworldopeneq03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq03.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-03-result.srx"), Path.of("src/test/resources/openworldopeneq03.xml"));
        assertTrue(comparison);
    }

    // open-eq-04 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-04
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-04-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-04.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // Filter(?v!=1)
    @Test
    public void openworldopeneq04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq04.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-04-result.srx"), Path.of("src/test/resources/openworldopeneq04.xml"));
        assertTrue(comparison);
    }

    // open-eq-05 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-05
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-05-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-05.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // FILTER(?v = unknown type)
    @Test
    public void openworldopeneq05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq05.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-05-result.srx"), Path.of("src/test/resources/openworldopeneq05.xml"));
        assertTrue(comparison);
    }

    // open-eq-06 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-06
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-06-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-06.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-1.ttl
    // FILTER(?v != unknown type)
    @Test
    public void openworldopeneq06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq06.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-06-result.srx"), Path.of("src/test/resources/openworldopeneq06.xml"));
        assertTrue(comparison);
    }

    // open-eq-07 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-07
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-07-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-07.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // Test of '='
    @Test
    public void openworldopeneq07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq07.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-07-result.srx"), Path.of("src/test/resources/openworldopeneq07.xml"));
        assertTrue(comparison);
    }

    // open-eq-08 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-08
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-08-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-08.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // Test of '!='
    @Test
    public void openworldopeneq08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq08.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-08-result.srx"), Path.of("src/test/resources/openworldopeneq08.xml"));
        assertTrue(comparison);
    }

    // open-eq-09 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-09
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-09-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-09.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // Test of '='
    @Test
    public void openworldopeneq09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq09.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-09-result.srx"), Path.of("src/test/resources/openworldopeneq09.xml"));
        assertTrue(comparison);
    }

    // open-eq-10 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-10
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-10-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-10.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // Test of '!='
    @Test
    public void openworldopeneq10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq10.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-10-result.srx"), Path.of("src/test/resources/openworldopeneq10.xml"));
        assertTrue(comparison);
    }

    // open-eq-11 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-11
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-11-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-11.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // test of '=' || '!='
    @Test
    public void openworldopeneq11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq11.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-11-result.srx"), Path.of("src/test/resources/openworldopeneq11.xml"));
        assertTrue(comparison);
    }

    // open-eq-12 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#open-eq-12
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-12-result.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/open-eq-12.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/open-world/data-2.ttl
    // find pairs that don't value-compare
    @Test
    public void openworldopeneq12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/open-world/data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/openworldopeneq12.xml",
                "-q", "src/test/resources/sparql10/open-world/open-eq-12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/open-world/open-eq-12-result.srx"), Path.of("src/test/resources/openworldopeneq12.xml"));
        assertTrue(comparison);
    }

    // OPTIONAL-FILTER SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-1-result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/data-1.ttl
    // FILTER inside an OPTIONAL does not block an entire solution
    @Test
    public void optionalfilterdawgoptionalfilter001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionalfilterdawgoptionalfilter001.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-1-result.ttl"), Path.of("src/test/resources/optionalfilterdawgoptionalfilter001.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Outer FILTER SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-002
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-2-result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/data-1.ttl
    // FILTER outside an OPTIONAL tests bound and unbound variables
    @Test
    public void optionalfilterdawgoptionalfilter002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionalfilterdawgoptionalfilter002.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-2-result.ttl"), Path.of("src/test/resources/optionalfilterdawgoptionalfilter002.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Outer FILTER with BOUND SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-003
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-3-result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/data-1.ttl
    // Use !bound to only run outer FILTERs against variables bound in an OPTIONAL
    @Test
    public void optionalfilterdawgoptionalfilter003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionalfilterdawgoptionalfilter003.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-3-result.ttl"), Path.of("src/test/resources/optionalfilterdawgoptionalfilter003.ttl"));
        assertTrue(comparison);
    }

    // OPTIONAL - Inner FILTER with negative EBV for outer variables SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-004
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-4-result.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/data-1.ttl
    // FILTER inside an OPTIONAL does not corrupt the entire solution
    @Test
    public void optionalfilterdawgoptionalfilter004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionalfilterdawgoptionalfilter004.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-4-result.ttl"), Path.of("src/test/resources/optionalfilterdawgoptionalfilter004.ttl"));
        assertTrue(comparison);
    }

    // dawg-optional-filter-005-not-simplified SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional-filter/manifest#dawg-optional-filter-005-not-simplified
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-5-result-not-simplified.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/expr-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional-filter/data-1.ttl
    // Double curly braces do NOT get simplified to single curly braces early on, before filters are scoped
    @Test
    public void optionalfilterdawgoptionalfilter005notsimplified() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional-filter/data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionalfilterdawgoptionalfilter005notsimplified.ttl",
                "-q", "src/test/resources/sparql10/optional-filter/expr-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional-filter/expr-5-result-not-simplified.ttl"), Path.of("src/test/resources/optionalfilterdawgoptionalfilter005notsimplified.ttl"));
        assertTrue(comparison);
    }

    // One optional clause SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/data.ttl
    // One optional clause
    @Test
    public void optionaldawgoptional001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptional001.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-1.ttl"), Path.of("src/test/resources/optionaldawgoptional001.ttl"));
        assertTrue(comparison);
    }

    // Two optional clauses SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-002
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/data.ttl
    // One optional clause
    @Test
    public void optionaldawgoptional002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptional002.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-2.ttl"), Path.of("src/test/resources/optionaldawgoptional002.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-complex-1.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-complex-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/complex-data-1.ttl
    // Complex optional: LeftJoin(LeftJoin(BGP(..),{..}),Join(BGP(..),Union(..,..)))
    @Test
    public void optionaldawgoptionalcomplex1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-1.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptionalcomplex1.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-1.ttl"), Path.of("src/test/resources/optionaldawgoptionalcomplex1.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-complex-2.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-complex-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/complex-data-2.ttl
    // Complex optional: LeftJoin(Join(BGP(..),Graph(var,{..})),Union(..,..))
    @Test
    public void optionaldawgoptionalcomplex2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptionalcomplex2.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-2.ttl"), Path.of("src/test/resources/optionaldawgoptionalcomplex2.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-complex-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-complex-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/complex-data-2.ttl
    // Complex optional: LeftJoin(Join(BGP(..),Graph(var,{..})),LeftJoin(BGP(..),{..}))
    @Test
    public void optionaldawgoptionalcomplex3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptionalcomplex3.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-3.ttl"), Path.of("src/test/resources/optionaldawgoptionalcomplex3.ttl"));
        assertTrue(comparison);
    }

    // Complex optional semantics: 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-optional-complex-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-complex-4.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-complex-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/complex-data-2.ttl
    // Complex optional: LeftJoin(Join(BGP(..),Union(..,..)),Join(BGP(..),Graph(varOrIRI,{..})))
    @Test
    public void optionaldawgoptionalcomplex4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/complex-data-2.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgoptionalcomplex4.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-complex-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-complex-4.ttl"), Path.of("src/test/resources/optionaldawgoptionalcomplex4.ttl"));
        assertTrue(comparison);
    }

    // Union is not optional SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/optional/manifest#dawg-union-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/result-opt-3.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/q-opt-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/optional/data.ttl
    // Union is not optional
    @Test
    public void optionaldawgunion001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/optional/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/optionaldawgunion001.ttl",
                "-q", "src/test/resources/sparql10/optional/q-opt-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/optional/result-opt-3.ttl"), Path.of("src/test/resources/optionaldawgunion001.ttl"));
        assertTrue(comparison);
    }

    // SELECT REDUCED * SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/reduced/manifest#reduced-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-1.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-star.ttl
    @Test
    public void reducedreduced1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/reduced/reduced-star.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/reducedreduced1.xml",
                "-q", "src/test/resources/sparql10/reduced/reduced-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/reduced/reduced-1.srx"), Path.of("src/test/resources/reducedreduced1.xml"));
        assertTrue(comparison);
    }

    // SELECT REDUCED ?x with strings SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/reduced/manifest#reduced-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-2.srx
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/reduced/reduced-str.ttl
    @Test
    public void reducedreduced2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/reduced/reduced-str.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/reducedreduced2.xml",
                "-q", "src/test/resources/sparql10/reduced/reduced-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/reduced/reduced-2.srx"), Path.of("src/test/resources/reducedreduced2.xml"));
        assertTrue(comparison);
    }

    // regex-query-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-result-001.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-query-001.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-data-01.ttl
    // Simple unanchored match test
    @Test
    public void regexdawgregex001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/regexdawgregex001.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-001.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-001.ttl"), Path.of("src/test/resources/regexdawgregex001.ttl"));
        assertTrue(comparison);
    }

    // regex-query-002 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-002
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-result-002.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-query-002.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-data-01.ttl
    // Case insensitive unanchored match test
    @Test
    public void regexdawgregex002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/regexdawgregex002.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-002.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-002.ttl"), Path.of("src/test/resources/regexdawgregex002.ttl"));
        assertTrue(comparison);
    }

    // regex-query-003 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-003
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-result-003.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-query-003.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-data-01.ttl
    // Use/mention test
    @Test
    public void regexdawgregex003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/regexdawgregex003.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-003.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-003.ttl"), Path.of("src/test/resources/regexdawgregex003.ttl"));
        assertTrue(comparison);
    }

    // regex-query-004 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#dawg-regex-004
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-result-004.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-query-004.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/regex/regex-data-01.ttl
    // str()+URI test
    @Test
    public void regexdawgregex004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/regex/regex-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/regexdawgregex004.ttl",
                "-q", "src/test/resources/sparql10/regex/regex-query-004.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/regex/regex-result-004.ttl"), Path.of("src/test/resources/regexdawgregex004.ttl"));
        assertTrue(comparison);
    }

    // Limit 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-01.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqlimit1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqlimit1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-01.ttl"), Path.of("src/test/resources/solutionseqlimit1.ttl"));
        assertTrue(comparison);
    }

    // Limit 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-02.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqlimit2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqlimit2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-02.ttl"), Path.of("src/test/resources/solutionseqlimit2.ttl"));
        assertTrue(comparison);
    }

    // Limit 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-03.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-03.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqlimit3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqlimit3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-03.ttl"), Path.of("src/test/resources/solutionseqlimit3.ttl"));
        assertTrue(comparison);
    }

    // Limit 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#limit-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-04.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-04.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqlimit4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqlimit4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-04.ttl"), Path.of("src/test/resources/solutionseqlimit4.ttl"));
        assertTrue(comparison);
    }

    // Offset 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-10.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-10.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqoffset1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqoffset1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-10.ttl"), Path.of("src/test/resources/solutionseqoffset1.ttl"));
        assertTrue(comparison);
    }

    // Offset 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-11.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-11.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqoffset2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqoffset2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-11.ttl"), Path.of("src/test/resources/solutionseqoffset2.ttl"));
        assertTrue(comparison);
    }

    // Offset 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-12.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-12.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqoffset3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqoffset3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-12.ttl"), Path.of("src/test/resources/solutionseqoffset3.ttl"));
        assertTrue(comparison);
    }

    // Offset 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#offset-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-13.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-13.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqoffset4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqoffset4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-13.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-13.ttl"), Path.of("src/test/resources/solutionseqoffset4.ttl"));
        assertTrue(comparison);
    }

    // Slice 1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-20.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-20.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqslice1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqslice1.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-20.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-20.ttl"), Path.of("src/test/resources/solutionseqslice1.ttl"));
        assertTrue(comparison);
    }

    // Slice 2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-21.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-21.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqslice2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqslice2.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-21.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-21.ttl"), Path.of("src/test/resources/solutionseqslice2.ttl"));
        assertTrue(comparison);
    }

    // Slice 3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-22.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-22.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqslice3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqslice3.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-22.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-22.ttl"), Path.of("src/test/resources/solutionseqslice3.ttl"));
        assertTrue(comparison);
    }

    // Slice 4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-23.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-23.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqslice4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqslice4.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-23.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-23.ttl"), Path.of("src/test/resources/solutionseqslice4.ttl"));
        assertTrue(comparison);
    }

    // Slice 5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/solution-seq/manifest#slice-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-results-24.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/slice-24.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/solution-seq/data.ttl
    @Test
    public void solutionseqslice5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/solution-seq/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/solutionseqslice5.ttl",
                "-q", "src/test/resources/sparql10/solution-seq/slice-24.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/solution-seq/slice-results-24.ttl"), Path.of("src/test/resources/solutionseqslice5.ttl"));
        assertTrue(comparison);
    }

    // sort-1 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-1
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-1.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-1.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-1.ttl
    // Alphabetic sort (ascending) on untyped literals
    @Test
    public void sortdawgsort1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort1.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-1.rdf"), Path.of("src/test/resources/sortdawgsort1.xml"));
        assertTrue(comparison);
    }

    // sort-10 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-10
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-10.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-10.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-9.ttl
    // Alphabetic sort (descending) on datatyped (string) literals
    @Test
    public void sortdawgsort10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-9.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort10.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-10.rdf"), Path.of("src/test/resources/sortdawgsort10.xml"));
        assertTrue(comparison);
    }

    // sort-2 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-2
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-2.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-2.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-1.ttl
    // Alphabetic sort (descending) on untyped literals
    @Test
    public void sortdawgsort2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort2.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-2.rdf"), Path.of("src/test/resources/sortdawgsort2.xml"));
        assertTrue(comparison);
    }

    // sort-3 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-3
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-3.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-3.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-3.ttl
    // Sort on (possibly unbound) URIs
    @Test
    public void sortdawgsort3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort3.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-3.rdf"), Path.of("src/test/resources/sortdawgsort3.xml"));
        assertTrue(comparison);
    }

    // sort-4 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-4
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-4.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-4.ttl
    // Sort on datatyped (integer) literals
    @Test
    public void sortdawgsort4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort4.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-4.rdf"), Path.of("src/test/resources/sortdawgsort4.xml"));
        assertTrue(comparison);
    }

    // sort-5 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-5
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-5.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-5.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-4.ttl
    // Sort first on untyped literals (ascending), then on datatyped (integer) literals (descending
    @Test
    public void sortdawgsort5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort5.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-5.rdf"), Path.of("src/test/resources/sortdawgsort5.xml"));
        assertTrue(comparison);
    }

    // sort-6 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-6
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-6.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-6.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-6.ttl
    // Sort on mixed result of uris and literals.
    @Test
    public void sortdawgsort6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-6.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort6.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-6.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-6.rdf"), Path.of("src/test/resources/sortdawgsort6.xml"));
        assertTrue(comparison);
    }

    // sort-7 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-7
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-7.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-7.ttl
    // Sort on comparable mixed typed literals (integer and float)
    @Test
    public void sortdawgsort7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-7.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort7.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-7.rdf"), Path.of("src/test/resources/sortdawgsort7.xml"));
        assertTrue(comparison);
    }

    // sort-8 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-8
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-8.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-4.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-8.ttl
    // Sort on several mixed values (bnode, uri, literal)
    @Test
    public void sortdawgsort8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-8.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort8.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-8.rdf"), Path.of("src/test/resources/sortdawgsort8.xml"));
        assertTrue(comparison);
    }

    // sort-9 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-9
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-9.rdf
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-9.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-9.ttl
    // Alphabetic sort (ascending) on datatyped (string) literals
    @Test
    public void sortdawgsort9() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-9.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/sortdawgsort9.xml",
                "-q", "src/test/resources/sparql10/sort/query-sort-9.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql10/sort/result-sort-9.rdf"), Path.of("src/test/resources/sortdawgsort9.xml"));
        assertTrue(comparison);
    }

    // Builtin sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-builtin
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-builtin.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-builtin.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-builtin.ttl
    // Sort by a builtin operator
    @Test
    public void sortdawgsortbuiltin() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-builtin.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/sortdawgsortbuiltin.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-builtin.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-builtin.ttl"), Path.of("src/test/resources/sortdawgsortbuiltin.ttl"));
        assertTrue(comparison);
    }

    // Function sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-function
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-function.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-function.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-function.ttl
    // Sort by function invocation
    @Test
    public void sortdawgsortfunction() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-function.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/sortdawgsortfunction.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-function.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-function.ttl"), Path.of("src/test/resources/sortdawgsortfunction.ttl"));
        assertTrue(comparison);
    }

    // Expression sort SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#dawg-sort-numbers
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/result-sort-numbers.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/query-sort-numbers.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/sort/data-sort-numbers.ttl
    // Sort by a bracketted expression
    @Test
    public void sortdawgsortnumbers() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/sort/data-sort-numbers.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/sortdawgsortnumbers.ttl",
                "-q", "src/test/resources/sparql10/sort/query-sort-numbers.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/sort/result-sort-numbers.ttl"), Path.of("src/test/resources/sortdawgsortnumbers.ttl"));
        assertTrue(comparison);
    }

    // syntax-basic-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-basic-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbasic06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-basic-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbnodes01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbnodes02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbnodes03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbnodes04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnodes-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxbnodes05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-bnodes-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxexpr01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxexpr02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxexpr03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxexpr04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-expr-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxexpr05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-expr-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-forms-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxforms01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-forms-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-forms-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxforms02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-forms-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlimitoffset01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlimitoffset02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlimitoffset03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-limit-offset-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlimitoffset04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-limit-offset-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lists-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-08.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-09.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-10.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-11.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-12.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-13.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-14.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-15.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-15.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-16.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-16.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-17.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-17.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-18.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-18.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-19.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-19.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lit-20.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxlit20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-lit-20.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-order-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxorder07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-order-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxpat01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxpat02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxpat03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-pat-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxpat04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-pat-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-qname-08.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxqname08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-qname-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-08.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-09.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-10.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-11.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-12.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-13.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-struct-14.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxstruct14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-struct-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-union-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxunion01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-union-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-union-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql1syntaxunion02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql1/syntax-union-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bnode-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxbnode03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-bnode-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxdataset01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxdataset02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxdataset03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-dataset-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxdataset04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-dataset-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxesc04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-esc-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxesc05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-esc-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-ask-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformask02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-ask-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformconstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformconstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformconstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformconstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-construct06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformconstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-construct06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-describe01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformdescribe01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-describe01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-describe02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformdescribe02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-describe02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-select-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformselect01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-select-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-form-select-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxformselect02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-form-select-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxfunction01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxfunction02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxfunction03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-function-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxfunction04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-function-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-08.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-09.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-10.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-11.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-12.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-13.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-general-14.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgeneral14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-general-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgraph01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgraph02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgraph03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgraph04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-graph-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxgraph05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-graph-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxkeywords01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxkeywords02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-keywords-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxkeywords03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-keywords-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxlists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxlists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxlists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxlists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-lists-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql2syntaxlists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql2/syntax-lists-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-blabel-cross-filter SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3blabelcrossfilter() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-filter.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-blabel-cross-graph-bad SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3blabelcrossgraphbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-graph-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-blabel-cross-optional-bad SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3blabelcrossoptionalbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-optional-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-blabel-cross-union-bad SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3blabelcrossunionbad() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-blabel-cross-union-bad.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnode-dot.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3bnodedot() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnode-dot.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnodes-missing-pvalues-01.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3bnodesmissingpvalues01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnodes-missing-pvalues-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-bnodes-missing-pvalues-02.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3bnodesmissingpvalues02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-bnodes-missing-pvalues-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-empty-optional-01.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3emptyoptional01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-empty-optional-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-empty-optional-02.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3emptyoptional02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-empty-optional-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-filter-missing-parens.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3filtermissingparens() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-filter-missing-parens.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-lone-list.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3lonelist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-lone-list.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-lone-node.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3lonenode() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-lone-node.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-03.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-04.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-05.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-06.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-07.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-08.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql3syn08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-01.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-02.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-03.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-04.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-05.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-06.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-07.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-08.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-09.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-10.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-11.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-12.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-13.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-14.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-15.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-15.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-16.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-16.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-17.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-17.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-18.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-18.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-19.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-19.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-20.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-20.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-21.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-21.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-22.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-22.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-23.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-23.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-24.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-24.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-25.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-25.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-26.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-26.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-27.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-27.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-28.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad28() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-28.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-29.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad29() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-29.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-30.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad30() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-30.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-31.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql3synbad31() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql3/syn-bad-31.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-09.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql4syn09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-10.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql4syn10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-11.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql4syn11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-34.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql4synbad34() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-34.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-35.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql4synbad35() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-35.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-36.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql4synbad36() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-36.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-37.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql4synbad37() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-37.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-38.rq SPARQL Negative Syntax Test
    @Test
    public void syntaxsparql4synbad38() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-38.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-GRAPH-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after GRAPH
    @Test
    public void syntaxsparql4synbadgraphbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-GRAPH-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-OPT-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after OPTIONAL
    @Test
    public void syntaxsparql4synbadoptbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-OPT-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-UNION-breaks-BGP SPARQL Negative Syntax Test
    // bad: re-used BNode label after UNION
    @Test
    public void syntaxsparql4synbadunionbreaksbgp() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-bad-UNION-breaks-BGP.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-leading-digits-in-prefixed-names.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql4synleadingdigitsinprefixednames() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql4/syn-leading-digits-in-prefixed-names.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-reduced-01.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql5syntaxreduced01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql5/syntax-reduced-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-reduced-02.rq SPARQL Positive Syntax Test
    @Test
    public void syntaxsparql5syntaxreduced02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql10/syntax-sparql5/syntax-reduced-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // dawg-triple-pattern-001 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-001
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/result-tp-01.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/dawg-tp-01.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/data-01.ttl
    // Simple triple match
    @Test
    public void triplematchdawgtriplepattern001() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/triplematchdawgtriplepattern001.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-01.ttl"), Path.of("src/test/resources/triplematchdawgtriplepattern001.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-002 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-002
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/result-tp-02.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/dawg-tp-02.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/data-01.ttl
    // Simple triple match
    @Test
    public void triplematchdawgtriplepattern002() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/triplematchdawgtriplepattern002.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-02.ttl"), Path.of("src/test/resources/triplematchdawgtriplepattern002.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-003 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-003
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/result-tp-03.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/dawg-tp-03.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/data-02.ttl
    // Simple triple match - repeated variable
    @Test
    public void triplematchdawgtriplepattern003() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/data-02.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/triplematchdawgtriplepattern003.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-03.ttl"), Path.of("src/test/resources/triplematchdawgtriplepattern003.ttl"));
        assertTrue(comparison);
    }

    // dawg-triple-pattern-004 SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/triple-match/manifest#dawg-triple-pattern-004
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/result-tp-04.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/dawg-tp-04.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/triple-match/dawg-data-01.ttl
    // Simple triple match - two triples, common variable
    @Test
    public void triplematchdawgtriplepattern004() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/triple-match/dawg-data-01.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/triplematchdawgtriplepattern004.ttl",
                "-q", "src/test/resources/sparql10/triple-match/dawg-tp-04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/triple-match/result-tp-04.ttl"), Path.of("src/test/resources/triplematchdawgtriplepattern004.ttl"));
        assertTrue(comparison);
    }

    // tP-double-double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-01
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-double-double.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion01.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-double.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion01.ttl"));
        assertTrue(comparison);
    }

    // tP-double-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-02
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-double-float.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion02.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion02.ttl"));
        assertTrue(comparison);
    }

    // tP-double-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-03
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-double-decimal.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion03.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion03.ttl"));
        assertTrue(comparison);
    }

    // tP-float-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-04
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-float-float.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion04.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion04.ttl"));
        assertTrue(comparison);
    }

    // tP-float-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-05
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-float-decimal.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion05.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion05.ttl"));
        assertTrue(comparison);
    }

    // tP-decimal-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-06
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-decimal-decimal.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion06.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-decimal-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion06.ttl"));
        assertTrue(comparison);
    }

    // tP-integer-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-07
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-integer-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion07.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-integer-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion07.ttl"));
        assertTrue(comparison);
    }

    // tP-nonPositiveInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-08
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-nonPositiveInteger-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion08.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-nonPositiveInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion08.ttl"));
        assertTrue(comparison);
    }

    // tP-negativeInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-09
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-negativeInteger-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion09.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-negativeInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion09.ttl"));
        assertTrue(comparison);
    }

    // tP-long-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-10
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-long-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion10.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-long-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion10.ttl"));
        assertTrue(comparison);
    }

    // tP-int-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-11
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-int-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion11.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-int-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion11.ttl"));
        assertTrue(comparison);
    }

    // tP-short-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-12
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion12.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion12.ttl"));
        assertTrue(comparison);
    }

    // tP-byte-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-13
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-byte-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion13() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion13.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-byte-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion13.ttl"));
        assertTrue(comparison);
    }

    // tP-nonNegativeInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-14
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-nonNegativeInteger-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion14() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion14.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-nonNegativeInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion14.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedLong-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-15
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-unsignedLong-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion15() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion15.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedLong-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion15.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedInt-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-16
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-unsignedInt-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion16() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion16.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedInt-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion16.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedShort-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-17
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-unsignedShort-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion17() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion17.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedShort-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion17.ttl"));
        assertTrue(comparison);
    }

    // tP-unsignedByte-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-18
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-unsignedByte-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion18() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion18.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-unsignedByte-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion18.ttl"));
        assertTrue(comparison);
    }

    // tP-positiveInteger-short SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-19
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-positiveInteger-short.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion19() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion19.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-positiveInteger-short.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion19.ttl"));
        assertTrue(comparison);
    }

    // tP-short-double SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-20
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-double.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion20() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion20.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-double.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion20.ttl"));
        assertTrue(comparison);
    }

    // tP-short-float SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-21
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-float.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion21() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion21.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion21.ttl"));
        assertTrue(comparison);
    }

    // tP-short-decimal SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-22
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/true.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-decimal.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion22() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion22.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/true.ttl"), Path.of("src/test/resources/typepromotiontypepromotion22.ttl"));
        assertTrue(comparison);
    }

    // tP-short-short-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-23
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-short-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion23() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion23.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-short-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion23.ttl"));
        assertTrue(comparison);
    }

    // tP-byte-short-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-24
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-byte-short-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion24() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion24.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-byte-short-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion24.ttl"));
        assertTrue(comparison);
    }

    // tP-short-long-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-25
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-long-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion25() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion25.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-long-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion25.ttl"));
        assertTrue(comparison);
    }

    // tP-short-int-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-26
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-int-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion26() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion26.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-int-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion26.ttl"));
        assertTrue(comparison);
    }

    // tP-short-byte-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-27
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-short-byte-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion27() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion27.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-short-byte-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion27.ttl"));
        assertTrue(comparison);
    }

    // tP-double-float-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-28
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-double-float-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion28() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion28.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-float-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion28.ttl"));
        assertTrue(comparison);
    }

    // tP-double-decimal-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-29
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-double-decimal-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion29() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion29.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-double-decimal-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion29.ttl"));
        assertTrue(comparison);
    }

    // tP-float-decimal-fail SPARQL Evaluation Test
    // http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#type-promotion-30
    // Result file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/false.ttl
    // Query file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP-float-decimal-fail.rq
    // Data file: https://w3c.github.io/rdf-tests/sparql/sparql10/type-promotion/tP.ttl
    // Positive test: product of type promotion within the xsd:decimal type tree.
    @Test
    public void typepromotiontypepromotion30() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql10/type-promotion/tP.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/typepromotiontypepromotion30.ttl",
                "-q", "src/test/resources/sparql10/type-promotion/tP-float-decimal-fail.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql10/type-promotion/false.ttl"), Path.of("src/test/resources/typepromotiontypepromotion30.ttl"));
        assertTrue(comparison);
    }

}