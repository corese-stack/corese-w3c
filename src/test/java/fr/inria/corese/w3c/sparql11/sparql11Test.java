package fr.inria.corese.w3c.sparql11;

import fr.inria.corese.core.Graph;
import fr.inria.corese.core.GraphStore;
import fr.inria.corese.core.load.Load;
import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.core.query.QueryProcess;
import fr.inria.corese.core.sparql.exceptions.EngineException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import static org.junit.Assert.*;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/sparql/sparql11/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-25, Time: 15:39:01 Europe/Paris
 */
public class sparql11Test {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/sparql11/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/sparql/sparql11/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            Files.createDirectories(testReportPath.getParent());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.createDirectories(testReportPath.getParent());
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // ADD 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add01
    // Add the default graph to an existing graph
    @Test
    public void datasparql11addmanifestadd01add01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-01-post.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add02
    // Add the default graph to a non-existing graph
    @Test
    public void datasparql11addmanifestadd02add02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-default.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add03
    // Add a named graph to an existing graph
    @Test
    public void datasparql11addmanifestadd03add03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-02-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-02-post.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add04
    // Add a named graph to a non-existing graph
    @Test
    public void datasparql11addmanifestadd04add04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 5 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add05
    // Add a named graph to an existing graph with overlapping data
    @Test
    public void datasparql11addmanifestadd05add05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-03-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-03-post.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 6 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add06
    // Add a non-existing graph to an existing graph
    @Test
    public void datasparql11addmanifestadd06add06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 7 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add07
    // Add an existing graph to the default graph
    @Test
    public void datasparql11addmanifestadd07add07() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-01-post.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-07.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD 8 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/add/manifest#add08
    // Add a graph to itself
    @Test
    public void datasparql11addmanifestadd08add08() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/add/add-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/add/add-01-pre.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/add/add-08.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // AVG SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-avg-01
    @Test
    public void datasparql11aggregatesmanifestaggavg01aggavg01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggavg01aggavg01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-avg-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-avg-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggavg01aggavg01.xml"));
        assertTrue(comparison);
    }

    // AVG with GROUP BY SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-avg-02
    @Test
    public void datasparql11aggregatesmanifestaggavg02aggavg02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggavg02aggavg02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-avg-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-avg-02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggavg02aggavg02.xml"));
        assertTrue(comparison);
    }

    // AVG with empty group (value defined to be 0) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-avg-03
    @Test
    public void datasparql11aggregatesmanifestaggavg03aggavg03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggavg03aggavg03.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-avg-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-avg-03.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggavg03aggavg03.xml"));
        assertTrue(comparison);
    }

    // COUNT: no match, with group SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-empty-group-count-1
    // counting no results with grouping returns no results.
    @Test
    public void datasparql11aggregatesmanifestaggemptygroupcount1aggemptygroupcount1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/empty.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggemptygroupcount1aggemptygroupcount1.json",
                "-q", "src/test/resources/sparql11/aggregates/agg-empty-group-count-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/aggregates/agg-empty-group-count-1.srj"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggemptygroupcount1aggemptygroupcount1.json"));
        assertTrue(comparison);
    }

    // COUNT: no match, no group SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-empty-group-count-2
    // counting no results without grouping always returns a single result.
    @Test
    public void datasparql11aggregatesmanifestaggemptygroupcount2aggemptygroupcount2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/empty.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggemptygroupcount2aggemptygroupcount2.json",
                "-q", "src/test/resources/sparql11/aggregates/agg-empty-group-count-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/aggregates/agg-empty-group-count-2.srj"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggemptygroupcount2aggemptygroupcount2.json"));
        assertTrue(comparison);
    }

    // agg on empty set, explicit grouping SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-empty-group-max-1
    // aggregating empty results returns no rows, as there are no grouped results.
    @Test
    public void datasparql11aggregatesmanifestaggemptygroupmax1aggemptygroupmax1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/empty.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggemptygroupmax1aggemptygroupmax1.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-empty-group-max-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-empty-group-max-1.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggemptygroupmax1aggemptygroupmax1.xml"));
        assertTrue(comparison);
    }

    // agg on empty set, no grouping SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-empty-group-max-2
    // aggregating empty results with no group-by always returns a single result.
    @Test
    public void datasparql11aggregatesmanifestaggemptygroupmax2aggemptygroupmax2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/empty.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggemptygroupmax2aggemptygroupmax2.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-empty-group-max-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-empty-group-max-2.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggemptygroupmax2aggemptygroupmax2.xml"));
        assertTrue(comparison);
    }

    // Error in AVG SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-err-01
    // Error in AVG return no binding
    @Test
    public void datasparql11aggregatesmanifestaggerr01aggerr01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-err-01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggerr01aggerr01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-err-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-err-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggerr01aggerr01.xml"));
        assertTrue(comparison);
    }

    // Protect from error in AVG SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-err-02
    // Protect from error in AVG using IF and COALESCE
    @Test
    public void datasparql11aggregatesmanifestaggerr02aggerr02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-err-02.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggerr02aggerr02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-err-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-err-02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggerr02aggerr02.xml"));
        assertTrue(comparison);
    }

    // GROUP_CONCAT 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-groupconcat-01
    @Test
    public void datasparql11aggregatesmanifestagggroupconcat01agggroupconcat01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-groupconcat-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagggroupconcat01agggroupconcat01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-groupconcat-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-groupconcat-1.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagggroupconcat01agggroupconcat01.xml"));
        assertTrue(comparison);
    }

    // GROUP_CONCAT 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-groupconcat-02
    @Test
    public void datasparql11aggregatesmanifestagggroupconcat02agggroupconcat02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-groupconcat-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagggroupconcat02agggroupconcat02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-groupconcat-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-groupconcat-2.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagggroupconcat02agggroupconcat02.xml"));
        assertTrue(comparison);
    }

    // GROUP_CONCAT with SEPARATOR SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-groupconcat-03
    @Test
    public void datasparql11aggregatesmanifestagggroupconcat03agggroupconcat03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-groupconcat-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagggroupconcat03agggroupconcat03.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-groupconcat-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-groupconcat-3.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagggroupconcat03agggroupconcat03.xml"));
        assertTrue(comparison);
    }

    // GROUP_CONCAT with same language tag SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-groupconcat-04
    @Test
    public void datasparql11aggregatesmanifestagggroupconcat04agggroupconcat04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagggroupconcat04agggroupconcat04.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-groupconcat-4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-groupconcat-4.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagggroupconcat04agggroupconcat04.xml"));
        assertTrue(comparison);
    }

    // GROUP_CONCAT with different language tags SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-groupconcat-05
    @Test
    public void datasparql11aggregatesmanifestagggroupconcat05agggroupconcat05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagggroupconcat05agggroupconcat05.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-groupconcat-5.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-groupconcat-5.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagggroupconcat05agggroupconcat05.xml"));
        assertTrue(comparison);
    }

    // MAX SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-max-01
    @Test
    public void datasparql11aggregatesmanifestaggmax01aggmax01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggmax01aggmax01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-max-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-max-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggmax01aggmax01.xml"));
        assertTrue(comparison);
    }

    // MAX with GROUP BY SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-max-02
    @Test
    public void datasparql11aggregatesmanifestaggmax02aggmax02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggmax02aggmax02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-max-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-max-02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggmax02aggmax02.xml"));
        assertTrue(comparison);
    }

    // MIN SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-min-01
    @Test
    public void datasparql11aggregatesmanifestaggmin01aggmin01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggmin01aggmin01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-min-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-min-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggmin01aggmin01.xml"));
        assertTrue(comparison);
    }

    // MIN with GROUP BY SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-min-02
    @Test
    public void datasparql11aggregatesmanifestaggmin02aggmin02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggmin02aggmin02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-min-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-min-02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggmin02aggmin02.xml"));
        assertTrue(comparison);
    }

    // SAMPLE SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-sample-01
    @Test
    public void datasparql11aggregatesmanifestaggsample01aggsample01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggsample01aggsample01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-sample-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-sample-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggsample01aggsample01.xml"));
        assertTrue(comparison);
    }

    // SUM SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-sum-01
    @Test
    public void datasparql11aggregatesmanifestaggsum01aggsum01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggsum01aggsum01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-sum-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-sum-01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggsum01aggsum01.xml"));
        assertTrue(comparison);
    }

    // SUM with GROUP BY SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg-sum-02
    @Test
    public void datasparql11aggregatesmanifestaggsum02aggsum02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg-numeric2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestaggsum02aggsum02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg-sum-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg-sum-02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestaggsum02aggsum02.xml"));
        assertTrue(comparison);
    }

    // COUNT 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg01
    // Simple count
    @Test
    public void datasparql11aggregatesmanifestagg01agg01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg01agg01.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg01.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg01agg01.xml"));
        assertTrue(comparison);
    }

    // COUNT 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg02
    // Count with grouping
    @Test
    public void datasparql11aggregatesmanifestagg02agg02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg02agg02.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg02.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg02agg02.xml"));
        assertTrue(comparison);
    }

    // COUNT 3 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg03
    // Count with grouping and HAVING clause
    @Test
    public void datasparql11aggregatesmanifestagg03agg03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg03agg03.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg03.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg03agg03.xml"));
        assertTrue(comparison);
    }

    // COUNT 4 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg04
    // Count(*)
    @Test
    public void datasparql11aggregatesmanifestagg04agg04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg04agg04.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg04.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg04agg04.xml"));
        assertTrue(comparison);
    }

    // COUNT 5 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg05
    // Count(*) with grouping
    @Test
    public void datasparql11aggregatesmanifestagg05agg05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg05agg05.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg05.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg05agg05.xml"));
        assertTrue(comparison);
    }

    // COUNT 6 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg06
    // Count(*) with HAVING Count(*)
    @Test
    public void datasparql11aggregatesmanifestagg06agg06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg06agg06.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg06.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg06agg06.xml"));
        assertTrue(comparison);
    }

    // COUNT 7 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg07
    // Count(*) with grouping and HAVING Count(*)
    @Test
    public void datasparql11aggregatesmanifestagg07agg07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg07agg07.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg07.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg07agg07.xml"));
        assertTrue(comparison);
    }

    // COUNT 8 SPARQL Negative Syntax Test
    // grouping by expression, done wrong
    @Test
    public void datasparql11aggregatesmanifestagg08agg08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/aggregates/agg08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // COUNT 8b SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/aggregates/manifest#agg08b
    // grouping by expression, done correctly
    @Test
    public void datasparql11aggregatesmanifestagg08bagg08b() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/aggregates/agg08.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11aggregatesmanifestagg08bagg08b.xml",
                "-q", "src/test/resources/sparql11/aggregates/agg08b.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/aggregates/agg08b.srx"), Path.of("src/test/resources/datasparql11aggregatesmanifestagg08bagg08b.xml"));
        assertTrue(comparison);
    }

    // COUNT 9 SPARQL Negative Syntax Test
    // Projection of an ungrouped variable (not appearing in the GROUP BY expression)
    @Test
    public void datasparql11aggregatesmanifestagg09agg09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/aggregates/agg09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // COUNT 10 SPARQL Negative Syntax Test
    // Projection of an ungrouped variable (no GROUP BY expression at all)
    @Test
    public void datasparql11aggregatesmanifestagg10agg10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/aggregates/agg10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // COUNT 11 SPARQL Negative Syntax Test
    // Use of an ungrouped variable in a project expression
    @Test
    public void datasparql11aggregatesmanifestagg11agg11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/aggregates/agg11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // COUNT 12 SPARQL Negative Syntax Test
    // Use of an ungrouped variable in a project expression, where the variable appears in a GROUP BY expression
    @Test
    public void datasparql11aggregatesmanifestagg12agg12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/aggregates/agg12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // INSERT same bnode twice SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-05a
    // As per http://lists.w3.org/Archives/Public/public-rdf-dawg/2012AprJun/0165.html
    @Test
    public void datasparql11basicupdatemanifestinsert05ainsert05a() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-05a.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERTing the same bnode with INSERT DATA into two different Graphs is the same bnode SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-data-same-bnode
    // http://lists.w3.org/Archives/Public/public-rdf-dawg/2012JulSep/0196.html, this can be viewed as a variation of :insert-05a
    @Test
    public void datasparql11basicupdatemanifestinsertdatasamebnodeinsertdatasamebnode() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-data-same-bnode.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple insert data named 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-data-spo-named1
    // This is a simple insert of a single triple into the named graph <http://example.org/g1> of an empty graph store
    @Test
    public void datasparql11basicupdatemanifestinsertdatasponamed1insertdatasponamed1() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-data-named1.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple insert data named 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-data-spo-named2
    // This is a simple insert of a single triple into the named graph <http://example.org/g1> of a graph store consisting of an empty unnamed graph and the named graph holds one (different) triple already
    @Test
    public void datasparql11basicupdatemanifestinsertdatasponamed2insertdatasponamed2() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-data-named2.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple insert data named 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-data-spo-named3
    // This is a simple insert of a single triple into the named graph <http://example.org/g1> of a graph store consisting of an empty unnamed graph and the named holds the inserted triple already (using the same query as insert-data-named1)
    @Test
    public void datasparql11basicupdatemanifestinsertdatasponamed3insertdatasponamed3() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-data-named1.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple insert data 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-data-spo1
    // This is a simple insert of a single triple to the unnamed graph of an empty graph store
    @Test
    public void datasparql11basicupdatemanifestinsertdataspo1insertdataspo1() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-data-spo1.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERT USING 01 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-using-01
    // This is an INSERT into the default graph of two triples constructed from the data in two named graphs that are treated as the default graph during matching with the USING keyword.
    @Test
    public void datasparql11basicupdatemanifestinsertusing01insertusing01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-using-01-pre.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-using-01-g2-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/basic-update/insert-using-01-g1-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-using-01-post.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-using-01-g2-post.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/basic-update/insert-using-01-g1-post.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-using-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERT 01 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-01
    // This is a INSERT over a dataset with a single triple in the default graph
    @Test
    public void datasparql11basicupdatemanifestinsertwhere01insertwhere01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-01-pre.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-01-post.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERT 02 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-02
    // This is a INSERT over a dataset with a single triple in the default graph, inserting into a named graph
    @Test
    public void datasparql11basicupdatemanifestinsertwhere02insertwhere02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-02-pre.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-02-post.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-02-g1-post.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERT 03 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-03
    // This is a INSERT over a dataset with a single triple in a named graph, inserting into the named graph using the WITH keyword
    @Test
    public void datasparql11basicupdatemanifestinsertwhere03insertwhere03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-03-pre.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-03-g1-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-03-post.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-03-g1-post.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERT 04 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-04
    // This is a INSERT of a triple over a dataset with data in named graphs, inserting into the default graph using the USING keyword
    @Test
    public void datasparql11basicupdatemanifestinsertwhere04insertwhere04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-04-pre.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-04-g1-pre.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-04-post.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-04-g1-post.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERTing the same bnode with two INSERT WHERE statement within one request is NOT the same bnode SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-same-bnode
    // http://lists.w3.org/Archives/Public/public-rdf-dawg/2012OctDec/0001.html, this can be viewed as a further variation of :insert-05a
    @Test
    public void datasparql11basicupdatemanifestinsertwheresamebnodeinsertwheresamebnode() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-pre.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-pre.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-g3-post.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-where-same-bnode.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // INSERTing the same bnode with two INSERT WHERE statement within one request is NOT the same bnode even if both WHERE clauses have the empty solution mapping as the only solution. SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/basic-update/manifest#insert-where-same-bnode2
    // http://lists.w3.org/Archives/Public/public-rdf-dawg/2012OctDec/0001.html, this can be viewed as a further variation of :insert-05a
    @Test
    public void datasparql11basicupdatemanifestinsertwheresamebnode2insertwheresamebnode2() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-pre.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-pre.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/basic-update/insert-where-same-bnode-g3-post.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/basic-update/insert-where-same-bnode2.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // bind01 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind01
    @Test
    public void datasparql11bindmanifestbind01bind01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind01bind01.xml",
                "-q", "src/test/resources/sparql11/bind/bind01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind01.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind01bind01.xml"));
        assertTrue(comparison);
    }

    // bind02 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind02
    @Test
    public void datasparql11bindmanifestbind02bind02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind02bind02.xml",
                "-q", "src/test/resources/sparql11/bind/bind02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind02.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind02bind02.xml"));
        assertTrue(comparison);
    }

    // bind03 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind03
    @Test
    public void datasparql11bindmanifestbind03bind03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind03bind03.xml",
                "-q", "src/test/resources/sparql11/bind/bind03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind03.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind03bind03.xml"));
        assertTrue(comparison);
    }

    // bind04 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind04
    @Test
    public void datasparql11bindmanifestbind04bind04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind04bind04.xml",
                "-q", "src/test/resources/sparql11/bind/bind04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind04.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind04bind04.xml"));
        assertTrue(comparison);
    }

    // bind05 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind05
    @Test
    public void datasparql11bindmanifestbind05bind05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind05bind05.xml",
                "-q", "src/test/resources/sparql11/bind/bind05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind05.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind05bind05.xml"));
        assertTrue(comparison);
    }

    // bind06 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind06
    @Test
    public void datasparql11bindmanifestbind06bind06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind06bind06.xml",
                "-q", "src/test/resources/sparql11/bind/bind06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind06.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind06bind06.xml"));
        assertTrue(comparison);
    }

    // bind07 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind07
    @Test
    public void datasparql11bindmanifestbind07bind07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind07bind07.xml",
                "-q", "src/test/resources/sparql11/bind/bind07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind07.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind07bind07.xml"));
        assertTrue(comparison);
    }

    // bind08 - BIND SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind08
    @Test
    public void datasparql11bindmanifestbind08bind08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind08bind08.xml",
                "-q", "src/test/resources/sparql11/bind/bind08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind08.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind08bind08.xml"));
        assertTrue(comparison);
    }

    // bind10 - BIND scoping - Variable in filter not in scope SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind10
    @Test
    public void datasparql11bindmanifestbind10bind10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind10bind10.xml",
                "-q", "src/test/resources/sparql11/bind/bind10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind10.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind10bind10.xml"));
        assertTrue(comparison);
    }

    // bind11 - BIND scoping - Variable in filter in scope SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bind/manifest#bind11
    @Test
    public void datasparql11bindmanifestbind11bind11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bind/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindmanifestbind11bind11.xml",
                "-q", "src/test/resources/sparql11/bind/bind11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bind/bind11.srx"), Path.of("src/test/resources/datasparql11bindmanifestbind11bind11.xml"));
        assertTrue(comparison);
    }

    // Inline VALUES graph pattern SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#inline1
    @Test
    public void datasparql11bindingsmanifestinline1inline1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestinline1inline1.xml",
                "-q", "src/test/resources/sparql11/bindings/inline01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/inline01.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestinline1inline1.xml"));
        assertTrue(comparison);
    }

    // Post-subquery VALUES SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#inline2
    @Test
    public void datasparql11bindingsmanifestinline2inline2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data02.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestinline2inline2.xml",
                "-q", "src/test/resources/sparql11/bindings/inline02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/inline02.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestinline2inline2.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with subj-var, 1 row SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values1
    @Test
    public void datasparql11bindingsmanifestvalues1values1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues1values1.xml",
                "-q", "src/test/resources/sparql11/bindings/values01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values01.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues1values1.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with obj-var, 1 row SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values2
    @Test
    public void datasparql11bindingsmanifestvalues2values2() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data02.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues2values2.xml",
                "-q", "src/test/resources/sparql11/bindings/values02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values02.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues2values2.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with 2 obj-vars, 1 row SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values3
    @Test
    public void datasparql11bindingsmanifestvalues3values3() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data03.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues3values3.xml",
                "-q", "src/test/resources/sparql11/bindings/values03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values03.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues3values3.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with 2 obj-vars, 1 row with UNDEF SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values4
    @Test
    public void datasparql11bindingsmanifestvalues4values4() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data04.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues4values4.xml",
                "-q", "src/test/resources/sparql11/bindings/values04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values04.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues4values4.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with 2 obj-vars, 2 rows with UNDEF SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values5
    @Test
    public void datasparql11bindingsmanifestvalues5values5() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data05.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues5values5.xml",
                "-q", "src/test/resources/sparql11/bindings/values05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values05.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues5values5.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with pred-var, 1 row SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values6
    @Test
    public void datasparql11bindingsmanifestvalues6values6() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data06.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues6values6.xml",
                "-q", "src/test/resources/sparql11/bindings/values06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values06.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues6values6.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with (OPTIONAL) obj-var, 1 row SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values7
    @Test
    public void datasparql11bindingsmanifestvalues7values7() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data07.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues7values7.xml",
                "-q", "src/test/resources/sparql11/bindings/values07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values07.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues7values7.xml"));
        assertTrue(comparison);
    }

    // Post-query VALUES with subj/obj-vars, 2 rows with UNDEF SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/bindings/manifest#values8
    @Test
    public void datasparql11bindingsmanifestvalues8values8() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/bindings/data08.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11bindingsmanifestvalues8values8.xml",
                "-q", "src/test/resources/sparql11/bindings/values08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/bindings/values08.srx"), Path.of("src/test/resources/datasparql11bindingsmanifestvalues8values8.xml"));
        assertTrue(comparison);
    }

    // xsd:boolean cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-bool
    @Test
    public void datasparql11castmanifestcastboolcastbool() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcastboolcastbool.xml",
                "-q", "src/test/resources/sparql11/cast/cast-bool.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-bool.srx"), Path.of("src/test/resources/datasparql11castmanifestcastboolcastbool.xml"));
        assertTrue(comparison);
    }

    // xsd:decimal cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-decimal
    @Test
    public void datasparql11castmanifestcastdecimalcastdecimal() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcastdecimalcastdecimal.xml",
                "-q", "src/test/resources/sparql11/cast/cast-decimal.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-decimal.srx"), Path.of("src/test/resources/datasparql11castmanifestcastdecimalcastdecimal.xml"));
        assertTrue(comparison);
    }

    // xsd:double cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-double
    @Test
    public void datasparql11castmanifestcastdoublecastdouble() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcastdoublecastdouble.xml",
                "-q", "src/test/resources/sparql11/cast/cast-double.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-double.srx"), Path.of("src/test/resources/datasparql11castmanifestcastdoublecastdouble.xml"));
        assertTrue(comparison);
    }

    // xsd:float cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-float
    @Test
    public void datasparql11castmanifestcastfloatcastfloat() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcastfloatcastfloat.xml",
                "-q", "src/test/resources/sparql11/cast/cast-float.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-float.srx"), Path.of("src/test/resources/datasparql11castmanifestcastfloatcastfloat.xml"));
        assertTrue(comparison);
    }

    // xsd:integer cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-int
    @Test
    public void datasparql11castmanifestcastintcastint() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcastintcastint.xml",
                "-q", "src/test/resources/sparql11/cast/cast-int.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-int.srx"), Path.of("src/test/resources/datasparql11castmanifestcastintcastint.xml"));
        assertTrue(comparison);
    }

    // xsd:string cast SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/cast/manifest#cast-string
    @Test
    public void datasparql11castmanifestcaststringcaststring() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/cast/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11castmanifestcaststringcaststring.xml",
                "-q", "src/test/resources/sparql11/cast/cast-string.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/cast/cast-string.srx"), Path.of("src/test/resources/datasparql11castmanifestcaststringcaststring.xml"));
        assertTrue(comparison);
    }

    // CLEAR ALL SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/clear/manifest#dawg-clear-all-01
    // This is a CLEAR of all graphs (default and named)
    @Test
    public void datasparql11clearmanifestdawgclearall01dawgclearall01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/clear/clear-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/clear/empty.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/clear/empty.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/clear/empty.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/clear/clear-all-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CLEAR DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/clear/manifest#dawg-clear-default-01
    // This is a CLEAR of the default graph
    @Test
    public void datasparql11clearmanifestdawgcleardefault01dawgcleardefault01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/clear/clear-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/clear/empty.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/clear/clear-g1.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/clear/clear-default-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CLEAR GRAPH SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/clear/manifest#dawg-clear-graph-01
    // This is a CLEAR of an existing named graph
    @Test
    public void datasparql11clearmanifestdawgcleargraph01dawgcleargraph01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/clear/clear-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/clear/empty.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/clear/clear-graph-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CLEAR NAMED SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/clear/manifest#dawg-clear-named-01
    // This is a CLEAR of all the named graphs
    @Test
    public void datasparql11clearmanifestdawgclearnamed01dawgclearnamed01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/clear/clear-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/clear/clear-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/clear/clear-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/clear/empty.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/clear/empty.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/clear/clear-named-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CONSTRUCT list SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/construct/manifest#constructlist
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datasparql11constructmanifestconstructlistconstructlist() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/construct/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11constructmanifestconstructlistconstructlist.ttl",
                "-q", "src/test/resources/sparql11/construct/constructlist.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/construct/constructlistresult.ttl"), Path.of("src/test/resources/datasparql11constructmanifestconstructlistconstructlist.ttl"));
        assertTrue(comparison);
    }

    // constructwhere01 - CONSTRUCT WHERE SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/construct/manifest#constructwhere01
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // CONSTRUCT WHERE { ?S ?P ?O }
    @Test
    public void datasparql11constructmanifestconstructwhere01constructwhere01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/construct/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11constructmanifestconstructwhere01constructwhere01.ttl",
                "-q", "src/test/resources/sparql11/construct/constructwhere01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/construct/constructwhere01result.ttl"), Path.of("src/test/resources/datasparql11constructmanifestconstructwhere01constructwhere01.ttl"));
        assertTrue(comparison);
    }

    // constructwhere02 - CONSTRUCT WHERE SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/construct/manifest#constructwhere02
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // CONSTRUCT WHERE  with join
    @Test
    public void datasparql11constructmanifestconstructwhere02constructwhere02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/construct/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11constructmanifestconstructwhere02constructwhere02.ttl",
                "-q", "src/test/resources/sparql11/construct/constructwhere02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/construct/constructwhere02result.ttl"), Path.of("src/test/resources/datasparql11constructmanifestconstructwhere02constructwhere02.ttl"));
        assertTrue(comparison);
    }

    // constructwhere03 - CONSTRUCT WHERE SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/construct/manifest#constructwhere03
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // CONSTRUCT WHERE  with join, using shortcut notation
    @Test
    public void datasparql11constructmanifestconstructwhere03constructwhere03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/construct/data.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11constructmanifestconstructwhere03constructwhere03.ttl",
                "-q", "src/test/resources/sparql11/construct/constructwhere03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/construct/constructwhere03result.ttl"), Path.of("src/test/resources/datasparql11constructmanifestconstructwhere03constructwhere03.ttl"));
        assertTrue(comparison);
    }

    // constructwhere04 - CONSTRUCT WHERE SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/construct/manifest#constructwhere04
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // CONSTRUCT WHERE  with DatasetClause
    @Test
    public void datasparql11constructmanifestconstructwhere04constructwhere04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11constructmanifestconstructwhere04constructwhere04.ttl",
                "-q", "src/test/resources/sparql11/construct/constructwhere04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/construct/constructwhere04result.ttl"), Path.of("src/test/resources/datasparql11constructmanifestconstructwhere04constructwhere04.ttl"));
        assertTrue(comparison);
    }

    // constructwhere05 - CONSTRUCT WHERE SPARQL Negative Syntax Test
    // CONSTRUCT WHERE  with FILTER
    @Test
    public void datasparql11constructmanifestconstructwhere05constructwhere05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/construct/constructwhere05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // constructwhere06 - CONSTRUCT WHERE SPARQL Negative Syntax Test
    @Test
    public void datasparql11constructmanifestconstructwhere06constructwhere06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/construct/constructwhere06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // COPY 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy01
    // Copy the default graph to an existing graph
    @Test
    public void datasparql11copymanifestcopy01copy01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-default.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy02
    // Copy the default graph to a non-existing graph
    @Test
    public void datasparql11copymanifestcopy02copy02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-default.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy03
    // Copy a named graph to an existing graph
    @Test
    public void datasparql11copymanifestcopy03copy03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/copy/copy-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy04
    // Copy a named graph to a non-existing graph
    @Test
    public void datasparql11copymanifestcopy04copy04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY 6 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy06
    // Copy an existing graph to the default graph
    @Test
    public void datasparql11copymanifestcopy06copy06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-01.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY 7 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/copy/manifest#copy07
    // Copy a graph to itself
    @Test
    public void datasparql11copymanifestcopy07copy07() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/copy/copy-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/copy/copy-01.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/copy/copy-07.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // csv01 - CSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#csv01
    // SELECT * WHERE { ?S ?P ?O }
    @Test
    public void datasparql11csvtsvresmanifestcsv01csv01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data.ttl",
                "-if", "turtle",
                "-of", "csv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifestcsv01csv01.csv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv01.csv"), Path.of("src/test/resources/datasparql11csvtsvresmanifestcsv01csv01.csv"));
        assertTrue(comparison);
    }

    // cvs02 - CSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#csv02
    // SELECT with OPTIONAL (i.e. not all vars bound in all results)
    @Test
    public void datasparql11csvtsvresmanifestcsv02csv02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data.ttl",
                "-if", "turtle",
                "-of", "csv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifestcsv02csv02.csv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv02.csv"), Path.of("src/test/resources/datasparql11csvtsvresmanifestcsv02csv02.csv"));
        assertTrue(comparison);
    }

    // csv03 - CSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#csv03
    // SELECT * WHERE { ?S ?P ?O } with some corner cases of typed literals
    @Test
    public void datasparql11csvtsvresmanifestcsv03csv03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data2.ttl",
                "-if", "turtle",
                "-of", "csv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifestcsv03csv03.csv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv03.csv"), Path.of("src/test/resources/datasparql11csvtsvresmanifestcsv03csv03.csv"));
        assertTrue(comparison);
    }

    // tsv01 - TSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#tsv01
    // SELECT * WHERE { ?S ?P ?O }
    @Test
    public void datasparql11csvtsvresmanifesttsv01tsv01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data.ttl",
                "-if", "turtle",
                "-of", "tsv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifesttsv01tsv01.tsv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv01.tsv"), Path.of("src/test/resources/datasparql11csvtsvresmanifesttsv01tsv01.tsv"));
        assertTrue(comparison);
    }

    // tsv02 - TSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#tsv02
    // SELECT with OPTIONAL (i.e. not all vars bound in all results)
    @Test
    public void datasparql11csvtsvresmanifesttsv02tsv02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data.ttl",
                "-if", "turtle",
                "-of", "tsv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifesttsv02tsv02.tsv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv02.tsv"), Path.of("src/test/resources/datasparql11csvtsvresmanifesttsv02tsv02.tsv"));
        assertTrue(comparison);
    }

    // tsv03 - TSV Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/csv-tsv-res/manifest#tsv03
    // SELECT * WHERE { ?S ?P ?O } with some corner cases of typed literals
    @Test
    public void datasparql11csvtsvresmanifesttsv03tsv03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/csv-tsv-res/data2.ttl",
                "-if", "turtle",
                "-of", "tsv",
                "-o", "src/test/resources/datasparql11csvtsvresmanifesttsv03tsv03.tsv",
                "-q", "src/test/resources/sparql11/csv-tsv-res/csvtsv01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/csv-tsv-res/csvtsv03.tsv"), Path.of("src/test/resources/datasparql11csvtsvresmanifesttsv03tsv03.tsv"));
        assertTrue(comparison);
    }

    // Simple DELETE DATA 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-01
    // This is a simple delete of an existing triple from the default graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata01dawgdeletedata01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-data/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-data/delete-post-01s.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE DATA 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-02
    // This is a simple delete of an existing triple from a named graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata02dawgdeletedata02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE DATA 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-03
    // This is a simple delete of a non-existing triple from the default graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata03dawgdeletedata03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-data/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-data/delete-post-01f.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE DATA 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-04
    // This is a simple delete of a non-existing triple from a named graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata04dawgdeletedata04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE DATA 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-05
    // Test 1 for DELETE DATA only modifying the desired graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata05dawgdeletedata05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-data/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete-data/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete-data/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-data/delete-post-01s.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete-data/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete-data/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE DATA 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-data/manifest#dawg-delete-data-06
    // Test 2 for DELETE DATA only modifying the desired graph
    @Test
    public void datasparql11deletedatamanifestdawgdeletedata06dawgdeletedata06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-data/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete-data/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete-data/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-data/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete-data/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete-data/delete-post-02s.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-data/delete-data-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-01
    // This update request reverts all foaf:knows relations
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert01dawgdeleteinsert01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-01.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 1b SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-01b
    // This test case, as a variant of dawg-delete-insert-01, shoes that DELETE followed by INSERT is different from DELETE INSERT in a single operation
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert01bdawgdeleteinsert01b() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-01b.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-01b.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 1c SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-01c
    // This test case, as a variant of dawg-delete-insert-01, shoes that INSERT followed by DELETE is different from DELETE INSERT in a single operation.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert01cdawgdeleteinsert01c() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-01b.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-01c.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-02
    // This deletes all foaf:knows relations from anyone named 'Alan'.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert02dawgdeleteinsert02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-02.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 3 SPARQL Negative Syntax Test
    // This deletes all foaf:knows relations from anyone named 'Alan' using an unnamed bnode as wildcard
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert03dawgdeleteinsert03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-03.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 3b SPARQL Negative Syntax Test
    // This deletes all foaf:knows relations from anyone named 'Alan' using a named bnode as wildcard
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert03bdawgdeleteinsert03b() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-03b.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-04
    // This deletes all foaf:knows relations from anyone named 'Alan' using a naive rewriting, as suggested in http://lists.w3.org/Archives/Public/public-rdf-dawg/2011JanMar/0305.html
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert04dawgdeleteinsert04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-02.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 4b SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-04b
    // This deletes all foaf:knows relations from anyone named 'Alan' using a simpler rewriting than dawg-delete-insert-04
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert04bdawgdeleteinsert04b() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-02.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-04b.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 5 SPARQL Negative Syntax Test
    // This deletes all foaf:knows relations from anyone named 'Alan' and inserts that all 'Alans' know themselves only.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert05dawgdeleteinsert05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-05.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 5b SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-05b
    // This deletes all foaf:knows relations from anyone named 'Alan' and inserts that all 'Alans' know themselves only, using a rewriting analogous to :dawg-delete-insert-04b
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert05bdawgdeleteinsert05b() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-post-05.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-05b.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 6 SPARQL Negative Syntax Test
    // dawg-delete-insert-06 and dawg-delete-insert-06b show that the rewriting in dawg-delete-insert-05b.ru isn't equivalent to dawg-delete-insert-05.ru in case Alan doesn't know anybody.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert06dawgdeleteinsert06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-05.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 6b SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#dawg-delete-insert-06b
    // dawg-delete-insert-06 and dawg-delete-insert-06b show that the rewriting in dawg-delete-insert-05b.ru isn't equivalent to dawg-delete-insert-05.ru in case Alan doesn't know anybody.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert06bdawgdeleteinsert06b() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-06.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-pre-06.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-05b.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DELETE INSERT 7 SPARQL Negative Syntax Test
    // This deletes all foaf:knows relations from anyone named 'Alan' and inserts a single foaf:knows triple with a blank node as object for 'Alan'. This shows the different behavior of bnodes in INSERT (similar to CONSTRUCT) and DELETE (bnodes act as wildcards) templates.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert07dawgdeleteinsert07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-07.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 7b SPARQL Negative Syntax Test
    // This deletes all foaf:knows relations from anyone named 'Alan' and replaces them by bnodes. This shows the different behavior of bnodes in INSERT (similar to CONSTRUCT) and DELETE (bnodes act as wildcards) templates. As opposed to test case dawg-delete-insert-7, note that the result graph in this example is non-lean.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert07bdawgdeleteinsert07b() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-07b.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 8 SPARQL Negative Syntax Test
    // This DELETE test was first brought up in http://lists.w3.org/Archives/Public/public-rdf-dawg/2011JanMar/0290.html. It demonstrates how unbound variables (from an OPTIONAL) are handled in DELETE templates
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert08dawgdeleteinsert08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-08.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // DELETE INSERT 9 SPARQL Negative Syntax Test
    // This DELETE test was first brought up in http://lists.w3.org/Archives/Public/public-rdf-dawg/2011JanMar/0317.html. It demonstrates the behavior of shared bnodes in a DELETE template.
    @Test
    public void datasparql11deleteinsertmanifestdawgdeleteinsert09dawgdeleteinsert09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/delete-insert/delete-insert-09.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // Halloween Problem: A delete/insert operation should not be able to read its own writes SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-insert/manifest#delete-insert-halloween-problem
    @Test
    public void datasparql11deleteinsertmanifestdeleteinserthalloweenproblemdeleteinserthalloweenproblem() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-halloween-problem-pre.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-insert/delete-insert-halloween-problem-post.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-insert/delete-insert-halloween-problem.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE WHERE 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-01
    // This is a simple delete of an existing triple from the default graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere01dawgdeletewhere01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-where/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-where/delete-post-01s.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE WHERE 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-02
    // This is a simple delete of an existing triple from a named graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere02dawgdeletewhere02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE WHERE 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-03
    // This is a simple delete of a non-existing triple from the default graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere03dawgdeletewhere03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-where/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-where/delete-post-01f.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE WHERE 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-04
    // This is a simple delete of a non-existing triple from a named graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere04dawgdeletewhere04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE WHERE 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-05
    // Test 1 for DELETE WHERE only modifying the desired graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere05dawgdeletewhere05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-where/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete-where/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete-where/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-where/delete-post-01s.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete-where/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete-where/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE WHERE 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete-where/manifest#dawg-delete-where-06
    // Test 2 for DELETE WHERE only modifying the desired graph
    @Test
    public void datasparql11deletewheremanifestdawgdeletewhere06dawgdeletewhere06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete-where/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete-where/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete-where/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete-where/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete-where/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete-where/delete-post-02s.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete-where/delete-where-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-01
    // This is a simple delete of an existing triple from the default graph
    @Test
    public void datasparql11deletemanifestdawgdelete01dawgdelete01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01s.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-02
    // This is a simple delete of an existing triple from a named graph
    @Test
    public void datasparql11deletemanifestdawgdelete02dawgdelete02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-03
    // This is a simple delete of a non-existing triple from the default graph
    @Test
    public void datasparql11deletemanifestdawgdelete03dawgdelete03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-04
    // This is a simple delete of a non-existing triple from a named graph
    @Test
    public void datasparql11deletemanifestdawgdelete04dawgdelete04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-05
    // Test 1 for DELETE only modifying the desired graph
    @Test
    public void datasparql11deletemanifestdawgdelete05dawgdelete05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01s.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-06
    // Test 2 for DELETE only modifying the desired graph
    @Test
    public void datasparql11deletemanifestdawgdelete06dawgdelete06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete/delete-post-02s.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 7 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-07
    // This is a simple delete to test that unbound variables in the DELETE clause do not act as wildcards
    @Test
    public void datasparql11deletemanifestdawgdelete07dawgdelete07() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-07.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 1 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-01
    // This is a simple delete using a USING clause to identify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeleteusing01dawgdeleteusing01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01s.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 2 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-02a
    // This is a simple test to make sure the GRAPH clause does not override the USING clause
    @Test
    public void datasparql11deletemanifestdawgdeleteusing02adawgdeleteusing02a() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 3 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-03
    // This is a simple delete of a non-existing triple using a USING clause to identify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeleteusing03dawgdeleteusing03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 4 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-04
    // This is a simple delete of a non-existing triple making sure that the GRAPH clause overrides the USING clause
    @Test
    public void datasparql11deletemanifestdawgdeleteusing04dawgdeleteusing04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete/delete-post-02f.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 1 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-05
    // Test 1 for DELETE only modifying the desired graph using a USING clause to specify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeleteusing05dawgdeleteusing05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 2 (USING) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-using-06a
    // Test 2 for DELETE only modifying the desired graph making sure the GRAPH clause does not override the USING clause
    @Test
    public void datasparql11deletemanifestdawgdeleteusing06adawgdeleteusing06a() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-using-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 1 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-01
    // This is a simple delete using a WITH clause to identify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeletewith01dawgdeletewith01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 2 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-02
    // This is a simple test to make sure the GRAPH clause overrides the WITH clause
    @Test
    public void datasparql11deletemanifestdawgdeletewith02dawgdeletewith02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-02.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 3 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-03
    // This is a simple delete of a non-existing triple using a WITH clause to identify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeletewith03dawgdeletewith03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Simple DELETE 4 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-04
    // This is a simple delete of a non-existing triple making sure that the GRAPH clause overrides the WITH clause
    @Test
    public void datasparql11deletemanifestdawgdeletewith04dawgdeletewith04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-04.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 1 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-05
    // Test 1 for DELETE only modifying the desired graph using a WITH clause to specify the active graph
    @Test
    public void datasparql11deletemanifestdawgdeletewith05dawgdeletewith05() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-05.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Graph-specific DELETE 2 (WITH) SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/delete/manifest#dawg-delete-with-06
    // Test 2 for DELETE only modifying the desired graph making sure the GRAPH clause overrides the WITH clause
    @Test
    public void datasparql11deletemanifestdawgdeletewith06dawgdeletewith06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/delete/delete-pre-01.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/delete/delete-pre-03.ttl");
        kbRef.setNamedGraph("http://example.org/g3", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/delete/delete-pre-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/delete/delete-post-01f.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/delete/delete-post-03f.ttl");
        kbResult.setNamedGraph("http://example.org/g3", resultGraph0);

        Graph resultGraph1 = Graph.create();
        Load resultGraph1Loader = Load.create(resultGraph1);
        resultGraph1Loader.parse("src/test/resources/sparql11/delete/delete-post-02s.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph1);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/delete/delete-with-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP ALL SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/drop/manifest#dawg-drop-all-01
    // This is a DROP of all graphs (default and named)
    @Test
    public void datasparql11dropmanifestdawgdropall01dawgdropall01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/drop/drop-all-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/drop/manifest#dawg-drop-default-01
    // This is a DROP of the default graph
    @Test
    public void datasparql11dropmanifestdawgdropdefault01dawgdropdefault01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/drop/drop-default-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP GRAPH SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/drop/manifest#dawg-drop-graph-01
    // This is a DROP of an existing named graph
    @Test
    public void datasparql11dropmanifestdawgdropgraph01dawgdropgraph01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/drop/drop-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/drop/drop-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/drop/drop-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/drop/drop-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/drop/drop-g2.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/drop/drop-graph-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP NAMED SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/drop/manifest#dawg-drop-named-01
    // This is a DROP of all the named graphs
    @Test
    public void datasparql11dropmanifestdawgdropnamed01dawgdropnamed01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/drop/drop-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/drop/drop-g2.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/drop/drop-g1.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/drop/drop-default.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/drop/drop-named-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Exists with one constant SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/exists/manifest#exists01
    @Test
    public void datasparql11existsmanifestexists01exists01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/exists/exists01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11existsmanifestexists01exists01.xml",
                "-q", "src/test/resources/sparql11/exists/exists01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/exists/exists01.srx"), Path.of("src/test/resources/datasparql11existsmanifestexists01exists01.xml"));
        assertTrue(comparison);
    }

    // Exists with ground triple SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/exists/manifest#exists02
    @Test
    public void datasparql11existsmanifestexists02exists02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/exists/exists01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11existsmanifestexists02exists02.xml",
                "-q", "src/test/resources/sparql11/exists/exists02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/exists/exists02.srx"), Path.of("src/test/resources/datasparql11existsmanifestexists02exists02.xml"));
        assertTrue(comparison);
    }

    // Exists within graph pattern SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/exists/manifest#exists03
    // Checks that exists is interpreted within named graph
    @Test
    public void datasparql11existsmanifestexists03exists03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/exists/exists01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11existsmanifestexists03exists03.xml",
                "-q", "src/test/resources/sparql11/exists/exists03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/exists/exists03.srx"), Path.of("src/test/resources/datasparql11existsmanifestexists03exists03.xml"));
        assertTrue(comparison);
    }

    // Nested positive exists SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/exists/manifest#exists04
    @Test
    public void datasparql11existsmanifestexists04exists04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/exists/exists01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11existsmanifestexists04exists04.xml",
                "-q", "src/test/resources/sparql11/exists/exists04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/exists/exists04.srx"), Path.of("src/test/resources/datasparql11existsmanifestexists04exists04.xml"));
        assertTrue(comparison);
    }

    // Nested negative exists in positive exists SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/exists/manifest#exists05
    @Test
    public void datasparql11existsmanifestexists05exists05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/exists/exists01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11existsmanifestexists05exists05.xml",
                "-q", "src/test/resources/sparql11/exists/exists05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/exists/exists05.srx"), Path.of("src/test/resources/datasparql11existsmanifestexists05exists05.xml"));
        assertTrue(comparison);
    }

    // ABS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#abs01
    @Test
    public void datasparql11functionsmanifestabs01abs01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestabs01abs01.xml",
                "-q", "src/test/resources/sparql11/functions/abs01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/abs01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestabs01abs01.xml"));
        assertTrue(comparison);
    }

    // BNODE(str) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#bnode01
    @Test
    public void datasparql11functionsmanifestbnode01bnode01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestbnode01bnode01.xml",
                "-q", "src/test/resources/sparql11/functions/bnode01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/bnode01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestbnode01bnode01.xml"));
        assertTrue(comparison);
    }

    // BNODE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#bnode02
    @Test
    public void datasparql11functionsmanifestbnode02bnode02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestbnode02bnode02.xml",
                "-q", "src/test/resources/sparql11/functions/bnode02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/bnode02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestbnode02bnode02.xml"));
        assertTrue(comparison);
    }

    // CEIL() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#ceil01
    @Test
    public void datasparql11functionsmanifestceil01ceil01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestceil01ceil01.xml",
                "-q", "src/test/resources/sparql11/functions/ceil01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/ceil01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestceil01ceil01.xml"));
        assertTrue(comparison);
    }

    // COALESCE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#coalesce01
    @Test
    public void datasparql11functionsmanifestcoalesce01coalesce01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-coalesce.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestcoalesce01coalesce01.xml",
                "-q", "src/test/resources/sparql11/functions/coalesce01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/coalesce01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestcoalesce01coalesce01.xml"));
        assertTrue(comparison);
    }

    // CONCAT() without parameter SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#concat-empty
    @Test
    public void datasparql11functionsmanifestconcatemptyconcatempty() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestconcatemptyconcatempty.xml",
                "-q", "src/test/resources/sparql11/functions/concat-empty.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/concat-empty.srx"), Path.of("src/test/resources/datasparql11functionsmanifestconcatemptyconcatempty.xml"));
        assertTrue(comparison);
    }

    // CONCAT() with a single parameter SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#concat-single
    @Test
    public void datasparql11functionsmanifestconcatsingleconcatsingle() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestconcatsingleconcatsingle.xml",
                "-q", "src/test/resources/sparql11/functions/concat-single.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/concat-single.srx"), Path.of("src/test/resources/datasparql11functionsmanifestconcatsingleconcatsingle.xml"));
        assertTrue(comparison);
    }

    // CONCAT() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#concat01
    @Test
    public void datasparql11functionsmanifestconcat01concat01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestconcat01concat01.xml",
                "-q", "src/test/resources/sparql11/functions/concat01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/concat01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestconcat01concat01.xml"));
        assertTrue(comparison);
    }

    // CONCAT() 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#concat02
    @Test
    public void datasparql11functionsmanifestconcat02concat02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestconcat02concat02.xml",
                "-q", "src/test/resources/sparql11/functions/concat02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/concat02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestconcat02concat02.xml"));
        assertTrue(comparison);
    }

    // CONTAINS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#contains01
    @Test
    public void datasparql11functionsmanifestcontains01contains01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestcontains01contains01.xml",
                "-q", "src/test/resources/sparql11/functions/contains01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/contains01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestcontains01contains01.xml"));
        assertTrue(comparison);
    }

    // DAY() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#day
    @Test
    public void datasparql11functionsmanifestdayday() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestdayday.xml",
                "-q", "src/test/resources/sparql11/functions/day-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/day-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestdayday.xml"));
        assertTrue(comparison);
    }

    // ENCODE_FOR_URI() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#encode01
    @Test
    public void datasparql11functionsmanifestencode01encode01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestencode01encode01.xml",
                "-q", "src/test/resources/sparql11/functions/encode01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/encode01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestencode01encode01.xml"));
        assertTrue(comparison);
    }

    // ENCODE_FOR_URI() on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#encode01-non-bmp
    @Test
    public void datasparql11functionsmanifestencode01nonbmpencode01nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestencode01nonbmpencode01nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/encode01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/encode01-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestencode01nonbmpencode01nonbmp.xml"));
        assertTrue(comparison);
    }

    // STRENDS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#ends01
    @Test
    public void datasparql11functionsmanifestends01ends01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestends01ends01.xml",
                "-q", "src/test/resources/sparql11/functions/ends01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/ends01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestends01ends01.xml"));
        assertTrue(comparison);
    }

    // FLOOR() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#floor01
    @Test
    public void datasparql11functionsmanifestfloor01floor01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestfloor01floor01.xml",
                "-q", "src/test/resources/sparql11/functions/floor01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/floor01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestfloor01floor01.xml"));
        assertTrue(comparison);
    }

    // HOURS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#hours
    @Test
    public void datasparql11functionsmanifesthourshours() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifesthourshours.xml",
                "-q", "src/test/resources/sparql11/functions/hours-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/hours-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifesthourshours.xml"));
        assertTrue(comparison);
    }

    // IF() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#if01
    @Test
    public void datasparql11functionsmanifestif01if01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestif01if01.xml",
                "-q", "src/test/resources/sparql11/functions/if01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/if01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestif01if01.xml"));
        assertTrue(comparison);
    }

    // IF() error propogation SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#if02
    @Test
    public void datasparql11functionsmanifestif02if02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestif02if02.xml",
                "-q", "src/test/resources/sparql11/functions/if02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/if02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestif02if02.xml"));
        assertTrue(comparison);
    }

    // IN 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#in01
    @Test
    public void datasparql11functionsmanifestin01in01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestin01in01.xml",
                "-q", "src/test/resources/sparql11/functions/in01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/in01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestin01in01.xml"));
        assertTrue(comparison);
    }

    // IN 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#in02
    @Test
    public void datasparql11functionsmanifestin02in02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestin02in02.xml",
                "-q", "src/test/resources/sparql11/functions/in02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/in02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestin02in02.xml"));
        assertTrue(comparison);
    }

    // IRI()/URI() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#iri01
    @Test
    public void datasparql11functionsmanifestiri01iri01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestiri01iri01.xml",
                "-q", "src/test/resources/sparql11/functions/iri01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/iri01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestiri01iri01.xml"));
        assertTrue(comparison);
    }

    // isNumeric() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#isnumeric01
    @Test
    public void datasparql11functionsmanifestisnumeric01isnumeric01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestisnumeric01isnumeric01.xml",
                "-q", "src/test/resources/sparql11/functions/isnumeric01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/isnumeric01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestisnumeric01isnumeric01.xml"));
        assertTrue(comparison);
    }

    // LCASE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#lcase01
    @Test
    public void datasparql11functionsmanifestlcase01lcase01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestlcase01lcase01.xml",
                "-q", "src/test/resources/sparql11/functions/lcase01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/lcase01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestlcase01lcase01.xml"));
        assertTrue(comparison);
    }

    // LCASE() on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#lcase01-non-bmp
    @Test
    public void datasparql11functionsmanifestlcase01nonbmplcase01nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestlcase01nonbmplcase01nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/lcase01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/lcase01-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestlcase01nonbmplcase01nonbmp.xml"));
        assertTrue(comparison);
    }

    // STRLEN() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#length01
    @Test
    public void datasparql11functionsmanifestlength01length01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestlength01length01.xml",
                "-q", "src/test/resources/sparql11/functions/length01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/length01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestlength01length01.xml"));
        assertTrue(comparison);
    }

    // STRLEN() on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#length01-non-bmp
    @Test
    public void datasparql11functionsmanifestlength01nonbmplength01nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestlength01nonbmplength01nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/length01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/length01-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestlength01nonbmplength01nonbmp.xml"));
        assertTrue(comparison);
    }

    // MD5() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#md5-01
    @Test
    public void datasparql11functionsmanifestmd501md501() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestmd501md501.xml",
                "-q", "src/test/resources/sparql11/functions/md5-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/md5-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestmd501md501.xml"));
        assertTrue(comparison);
    }

    // MD5() over Unicode data SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#md5-02
    @Test
    public void datasparql11functionsmanifestmd502md502() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestmd502md502.xml",
                "-q", "src/test/resources/sparql11/functions/md5-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/md5-02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestmd502md502.xml"));
        assertTrue(comparison);
    }

    // MINUTES() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#minutes
    @Test
    public void datasparql11functionsmanifestminutesminutes() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestminutesminutes.xml",
                "-q", "src/test/resources/sparql11/functions/minutes-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/minutes-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestminutesminutes.xml"));
        assertTrue(comparison);
    }

    // MONTH() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#month
    @Test
    public void datasparql11functionsmanifestmonthmonth() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestmonthmonth.xml",
                "-q", "src/test/resources/sparql11/functions/month-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/month-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestmonthmonth.xml"));
        assertTrue(comparison);
    }

    // NOT IN 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#notin01
    @Test
    public void datasparql11functionsmanifestnotin01notin01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestnotin01notin01.xml",
                "-q", "src/test/resources/sparql11/functions/notin01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/notin01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestnotin01notin01.xml"));
        assertTrue(comparison);
    }

    // NOT IN 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#notin02
    @Test
    public void datasparql11functionsmanifestnotin02notin02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestnotin02notin02.xml",
                "-q", "src/test/resources/sparql11/functions/notin02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/notin02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestnotin02notin02.xml"));
        assertTrue(comparison);
    }

    // NOW() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#now01
    @Test
    public void datasparql11functionsmanifestnow01now01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestnow01now01.xml",
                "-q", "src/test/resources/sparql11/functions/now01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/now01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestnow01now01.xml"));
        assertTrue(comparison);
    }

    // plus-1-corrected SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#plus-1-corrected
    // plus operator on ?x + ?y on string and numeric values
    @Test
    public void datasparql11functionsmanifestplus1correctedplus1corrected() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-builtin-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestplus1correctedplus1corrected.xml",
                "-q", "src/test/resources/sparql11/functions/plus-1-corrected.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/plus-1.srx"), Path.of("src/test/resources/datasparql11functionsmanifestplus1correctedplus1corrected.xml"));
        assertTrue(comparison);
    }

    // plus-2-corrected SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#plus-2-corrected
    // plus operator in combination with str(), i.e.  str(?x) + str(?y), on string and numeric values
    @Test
    public void datasparql11functionsmanifestplus2correctedplus2corrected() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-builtin-3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestplus2correctedplus2corrected.xml",
                "-q", "src/test/resources/sparql11/functions/plus-2-corrected.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/plus-2.srx"), Path.of("src/test/resources/datasparql11functionsmanifestplus2correctedplus2corrected.xml"));
        assertTrue(comparison);
    }

    // RAND() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#rand01
    @Test
    public void datasparql11functionsmanifestrand01rand01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestrand01rand01.xml",
                "-q", "src/test/resources/sparql11/functions/rand01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/rand01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestrand01rand01.xml"));
        assertTrue(comparison);
    }

    // REPLACE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#replace01
    @Test
    public void datasparql11functionsmanifestreplace01replace01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestreplace01replace01.xml",
                "-q", "src/test/resources/sparql11/functions/replace01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/replace01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestreplace01replace01.xml"));
        assertTrue(comparison);
    }

    // REPLACE() with overlapping pattern SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#replace02
    @Test
    public void datasparql11functionsmanifestreplace02replace02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestreplace02replace02.xml",
                "-q", "src/test/resources/sparql11/functions/replace02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/replace02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestreplace02replace02.xml"));
        assertTrue(comparison);
    }

    // REPLACE() with captured substring SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#replace03
    @Test
    public void datasparql11functionsmanifestreplace03replace03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestreplace03replace03.xml",
                "-q", "src/test/resources/sparql11/functions/replace03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/replace03.srx"), Path.of("src/test/resources/datasparql11functionsmanifestreplace03replace03.xml"));
        assertTrue(comparison);
    }

    // ROUND() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#round01
    @Test
    public void datasparql11functionsmanifestround01round01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestround01round01.xml",
                "-q", "src/test/resources/sparql11/functions/round01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/round01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestround01round01.xml"));
        assertTrue(comparison);
    }

    // SECONDS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#seconds
    @Test
    public void datasparql11functionsmanifestsecondsseconds() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsecondsseconds.xml",
                "-q", "src/test/resources/sparql11/functions/seconds-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/seconds-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsecondsseconds.xml"));
        assertTrue(comparison);
    }

    // SHA1() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha1-01
    @Test
    public void datasparql11functionsmanifestsha101sha101() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha101sha101.xml",
                "-q", "src/test/resources/sparql11/functions/sha1-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha1-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha101sha101.xml"));
        assertTrue(comparison);
    }

    // SHA1() on Unicode data SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha1-02
    @Test
    public void datasparql11functionsmanifestsha102sha102() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/hash-unicode.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha102sha102.xml",
                "-q", "src/test/resources/sparql11/functions/sha1-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha1-02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha102sha102.xml"));
        assertTrue(comparison);
    }

    // SHA256() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha256-01
    @Test
    public void datasparql11functionsmanifestsha25601sha25601() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha25601sha25601.xml",
                "-q", "src/test/resources/sparql11/functions/sha256-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha256-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha25601sha25601.xml"));
        assertTrue(comparison);
    }

    // SHA256() on Unicode data SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha256-02
    @Test
    public void datasparql11functionsmanifestsha25602sha25602() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/hash-unicode.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha25602sha25602.xml",
                "-q", "src/test/resources/sparql11/functions/sha256-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha256-02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha25602sha25602.xml"));
        assertTrue(comparison);
    }

    // SHA512() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha512-01
    @Test
    public void datasparql11functionsmanifestsha51201sha51201() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha51201sha51201.xml",
                "-q", "src/test/resources/sparql11/functions/sha512-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha512-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha51201sha51201.xml"));
        assertTrue(comparison);
    }

    // SHA512() on Unicode data SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#sha512-02
    @Test
    public void datasparql11functionsmanifestsha51202sha51202() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/hash-unicode.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsha51202sha51202.xml",
                "-q", "src/test/resources/sparql11/functions/sha512-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/sha512-02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsha51202sha51202.xml"));
        assertTrue(comparison);
    }

    // STRSTARTS() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#starts01
    @Test
    public void datasparql11functionsmanifeststarts01starts01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststarts01starts01.xml",
                "-q", "src/test/resources/sparql11/functions/starts01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/starts01.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststarts01starts01.xml"));
        assertTrue(comparison);
    }

    // STRAFTER() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strafter01a
    @Test
    public void datasparql11functionsmanifeststrafter01astrafter01a() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrafter01astrafter01a.xml",
                "-q", "src/test/resources/sparql11/functions/strafter01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strafter01a.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrafter01astrafter01a.xml"));
        assertTrue(comparison);
    }

    // STRAFTER() datatyping SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strafter02
    @Test
    public void datasparql11functionsmanifeststrafter02strafter02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrafter02strafter02.xml",
                "-q", "src/test/resources/sparql11/functions/strafter02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strafter02.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrafter02strafter02.xml"));
        assertTrue(comparison);
    }

    // STRBEFORE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strbefore01a
    @Test
    public void datasparql11functionsmanifeststrbefore01astrbefore01a() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrbefore01astrbefore01a.xml",
                "-q", "src/test/resources/sparql11/functions/strbefore01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strbefore01a.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrbefore01astrbefore01a.xml"));
        assertTrue(comparison);
    }

    // STRBEFORE() datatyping SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strbefore02
    @Test
    public void datasparql11functionsmanifeststrbefore02strbefore02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data4.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrbefore02strbefore02.xml",
                "-q", "src/test/resources/sparql11/functions/strbefore02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strbefore02.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrbefore02strbefore02.xml"));
        assertTrue(comparison);
    }

    // STRDT() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strdt01
    @Test
    public void datasparql11functionsmanifeststrdt01strdt01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrdt01strdt01.xml",
                "-q", "src/test/resources/sparql11/functions/strdt01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strdt01.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrdt01strdt01.xml"));
        assertTrue(comparison);
    }

    // STRDT(STR()) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strdt02
    @Test
    public void datasparql11functionsmanifeststrdt02strdt02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrdt02strdt02.xml",
                "-q", "src/test/resources/sparql11/functions/strdt02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strdt02.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrdt02strdt02.xml"));
        assertTrue(comparison);
    }

    // STRDT() TypeErrors (updated for RDF 1.1) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strdt03-rdf11
    @Test
    public void datasparql11functionsmanifeststrdt03rdf11strdt03rdf11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrdt03rdf11strdt03rdf11.xml",
                "-q", "src/test/resources/sparql11/functions/strdt03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strdt03-rdf11.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrdt03rdf11strdt03rdf11.xml"));
        assertTrue(comparison);
    }

    // STRLANG() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strlang01
    @Test
    public void datasparql11functionsmanifeststrlang01strlang01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrlang01strlang01.xml",
                "-q", "src/test/resources/sparql11/functions/strlang01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strlang01.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrlang01strlang01.xml"));
        assertTrue(comparison);
    }

    // STRLANG(STR()) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strlang02
    @Test
    public void datasparql11functionsmanifeststrlang02strlang02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrlang02strlang02.xml",
                "-q", "src/test/resources/sparql11/functions/strlang02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strlang02.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrlang02strlang02.xml"));
        assertTrue(comparison);
    }

    // STRLANG() TypeErrors (updated for RDF 1.1) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#strlang03-rdf11
    @Test
    public void datasparql11functionsmanifeststrlang03rdf11strlang03rdf11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststrlang03rdf11strlang03rdf11.xml",
                "-q", "src/test/resources/sparql11/functions/strlang03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/strlang03-rdf11.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststrlang03rdf11strlang03rdf11.xml"));
        assertTrue(comparison);
    }

    // STRUUID() pattern match SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#struuid01
    @Test
    public void datasparql11functionsmanifeststruuid01struuid01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-empty.nt",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifeststruuid01struuid01.xml",
                "-q", "src/test/resources/sparql11/functions/struuid01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/struuid01.srx"), Path.of("src/test/resources/datasparql11functionsmanifeststruuid01struuid01.xml"));
        assertTrue(comparison);
    }

    // SUBSTR() (3-argument) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#substring01
    @Test
    public void datasparql11functionsmanifestsubstring01substring01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsubstring01substring01.xml",
                "-q", "src/test/resources/sparql11/functions/substring01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/substring01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsubstring01substring01.xml"));
        assertTrue(comparison);
    }

    // SUBSTR() (3-argument) on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#substring01-non-bmp
    @Test
    public void datasparql11functionsmanifestsubstring01nonbmpsubstring01nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsubstring01nonbmpsubstring01nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/substring01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/substring01-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsubstring01nonbmpsubstring01nonbmp.xml"));
        assertTrue(comparison);
    }

    // SUBSTR() (2-argument) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#substring02
    @Test
    public void datasparql11functionsmanifestsubstring02substring02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsubstring02substring02.xml",
                "-q", "src/test/resources/sparql11/functions/substring02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/substring02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsubstring02substring02.xml"));
        assertTrue(comparison);
    }

    // SUBSTR() (2-argument) on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#substring02-non-bmp
    @Test
    public void datasparql11functionsmanifestsubstring02nonbmpsubstring02nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestsubstring02nonbmpsubstring02nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/substring02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/substring02-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestsubstring02nonbmpsubstring02nonbmp.xml"));
        assertTrue(comparison);
    }

    // TIMEZONE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#timezone
    @Test
    public void datasparql11functionsmanifesttimezonetimezone() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifesttimezonetimezone.xml",
                "-q", "src/test/resources/sparql11/functions/timezone-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/timezone-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifesttimezonetimezone.xml"));
        assertTrue(comparison);
    }

    // TZ() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#tz
    @Test
    public void datasparql11functionsmanifesttztz() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifesttztz.xml",
                "-q", "src/test/resources/sparql11/functions/tz-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/tz-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifesttztz.xml"));
        assertTrue(comparison);
    }

    // UCASE() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#ucase01
    @Test
    public void datasparql11functionsmanifestucase01ucase01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestucase01ucase01.xml",
                "-q", "src/test/resources/sparql11/functions/ucase01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/ucase01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestucase01ucase01.xml"));
        assertTrue(comparison);
    }

    // UCASE() on non-BMP unicode strings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#ucase01-non-bmp
    @Test
    public void datasparql11functionsmanifestucase01nonbmpucase01nonbmp() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data5.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestucase01nonbmpucase01nonbmp.xml",
                "-q", "src/test/resources/sparql11/functions/ucase01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/ucase01-non-bmp.srx"), Path.of("src/test/resources/datasparql11functionsmanifestucase01nonbmpucase01nonbmp.xml"));
        assertTrue(comparison);
    }

    // UUID() pattern match SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#uuid01
    @Test
    public void datasparql11functionsmanifestuuid01uuid01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-empty.nt",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestuuid01uuid01.xml",
                "-q", "src/test/resources/sparql11/functions/uuid01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/uuid01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestuuid01uuid01.xml"));
        assertTrue(comparison);
    }

    // UUID() per binding SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#uuid02
    // UUID() calls generate results per invocation, not per query
    @Test
    public void datasparql11functionsmanifestuuid02uuid02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data-empty.nt",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestuuid02uuid02.xml",
                "-q", "src/test/resources/sparql11/functions/uuid02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/uuid02.srx"), Path.of("src/test/resources/datasparql11functionsmanifestuuid02uuid02.xml"));
        assertTrue(comparison);
    }

    // YEAR() SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/functions/manifest#year
    @Test
    public void datasparql11functionsmanifestyearyear() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/functions/data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11functionsmanifestyearyear.xml",
                "-q", "src/test/resources/sparql11/functions/year-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/functions/year-01.srx"), Path.of("src/test/resources/datasparql11functionsmanifestyearyear.xml"));
        assertTrue(comparison);
    }

    // Group-1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/grouping/manifest#group01
    // Simple grouping
    @Test
    public void datasparql11groupingmanifestgroup01group01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/grouping/group-data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11groupingmanifestgroup01group01.xml",
                "-q", "src/test/resources/sparql11/grouping/group01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/grouping/group01.srx"), Path.of("src/test/resources/datasparql11groupingmanifestgroup01group01.xml"));
        assertTrue(comparison);
    }

    // Group-3 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/grouping/manifest#group03
    // Grouping with an unbound
    @Test
    public void datasparql11groupingmanifestgroup03group03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/grouping/group-data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11groupingmanifestgroup03group03.xml",
                "-q", "src/test/resources/sparql11/grouping/group03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/grouping/group03.srx"), Path.of("src/test/resources/datasparql11groupingmanifestgroup03group03.xml"));
        assertTrue(comparison);
    }

    // Group-4 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/grouping/manifest#group04
    // Grouping with expression
    @Test
    public void datasparql11groupingmanifestgroup04group04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/grouping/group-data-1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11groupingmanifestgroup04group04.xml",
                "-q", "src/test/resources/sparql11/grouping/group04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/grouping/group04.srx"), Path.of("src/test/resources/datasparql11groupingmanifestgroup04group04.xml"));
        assertTrue(comparison);
    }

    // Group-5 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/grouping/manifest#group05
    // Grouping with unbound
    @Test
    public void datasparql11groupingmanifestgroup05group05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/grouping/group-data-2.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11groupingmanifestgroup05group05.xml",
                "-q", "src/test/resources/sparql11/grouping/group05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/grouping/group05.srx"), Path.of("src/test/resources/datasparql11groupingmanifestgroup05group05.xml"));
        assertTrue(comparison);
    }

    // Group-6 SPARQL Negative Syntax Test
    // projection of ungrouped variable
    @Test
    public void datasparql11groupingmanifestgroup06group06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/grouping/group06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // Group-7 SPARQL Negative Syntax Test
    // projection of ungrouped variable, more complex example than Group-6
    @Test
    public void datasparql11groupingmanifestgroup07group07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/grouping/group07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // jsonres01 - JSON Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/json-res/manifest#jsonres01
    // SELECT * WHERE { ?S ?P ?O }
    @Test
    public void datasparql11jsonresmanifestjsonres01jsonres01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/json-res/data.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11jsonresmanifestjsonres01jsonres01.json",
                "-q", "src/test/resources/sparql11/json-res/jsonres01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/json-res/jsonres01.srj"), Path.of("src/test/resources/datasparql11jsonresmanifestjsonres01jsonres01.json"));
        assertTrue(comparison);
    }

    // jsonres02 - JSON Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/json-res/manifest#jsonres02
    // SELECT with OPTIONAL (i.e. not all vars bound in all results)
    @Test
    public void datasparql11jsonresmanifestjsonres02jsonres02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/json-res/data.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11jsonresmanifestjsonres02jsonres02.json",
                "-q", "src/test/resources/sparql11/json-res/jsonres02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/json-res/jsonres02.srj"), Path.of("src/test/resources/datasparql11jsonresmanifestjsonres02jsonres02.json"));
        assertTrue(comparison);
    }

    // jsonres03 - JSON Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/json-res/manifest#jsonres03
    // ASK - answer: true
    @Test
    public void datasparql11jsonresmanifestjsonres03jsonres03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/json-res/data.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11jsonresmanifestjsonres03jsonres03.json",
                "-q", "src/test/resources/sparql11/json-res/jsonres03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/json-res/jsonres03.srj"), Path.of("src/test/resources/datasparql11jsonresmanifestjsonres03jsonres03.json"));
        assertTrue(comparison);
    }

    // jsonres04 - JSON Result Format SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/json-res/manifest#jsonres04
    // ASK - answer: false
    @Test
    public void datasparql11jsonresmanifestjsonres04jsonres04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/json-res/data.ttl",
                "-if", "turtle",
                "-of", "json",
                "-o", "src/test/resources/datasparql11jsonresmanifestjsonres04jsonres04.json",
                "-q", "src/test/resources/sparql11/json-res/jsonres04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.jsonFilesAreEqual(Path.of("src/test/resources/sparql11/json-res/jsonres04.srj"), Path.of("src/test/resources/datasparql11jsonresmanifestjsonres04jsonres04.json"));
        assertTrue(comparison);
    }

    // MOVE 1 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move01
    // Move the default graph to an existing graph
    @Test
    public void datasparql11movemanifestmove01move01() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE 2 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move02
    // Move the default graph to a non-existing graph
    @Test
    public void datasparql11movemanifestmove02move02() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-01.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE 3 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move03
    // Move a named graph to an existing graph
    @Test
    public void datasparql11movemanifestmove03move03() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/move/move-02.ttl");
        kbRef.setNamedGraph("http://example.org/g2", refGraph0);

        Graph refGraph1 = Graph.create();
        Load refGraph1Loader = Load.create(refGraph1);
        refGraph1Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph1);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE 4 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move04
    // Move a named graph to a non-existing graph
    @Test
    public void datasparql11movemanifestmove04move04() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbResult.setNamedGraph("http://example.org/g2", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-03.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE 6 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move06
    // Move an existing graph to the default graph
    @Test
    public void datasparql11movemanifestmove06move06() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/move/move-01.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-06.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE 7 SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/move/manifest#move07
    // Move a graph to itself
    @Test
    public void datasparql11movemanifestmove07move07() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph refGraph0 = Graph.create();
        Load refGraph0Loader = Load.create(refGraph0);
        refGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbRef.setNamedGraph("http://example.org/g1", refGraph0);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/move/move-default.ttl");

        Graph resultGraph0 = Graph.create();
        Load resultGraph0Loader = Load.create(resultGraph0);
        resultGraph0Loader.parse("src/test/resources/sparql11/move/move-01.ttl");
        kbResult.setNamedGraph("http://example.org/g1", resultGraph0);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/move/move-07.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // Positive EXISTS 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#exists-01
    @Test
    public void datasparql11negationmanifestexists01exists01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestexists01exists01.xml",
                "-q", "src/test/resources/sparql11/negation/exists-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/exists-01.srx"), Path.of("src/test/resources/datasparql11negationmanifestexists01exists01.xml"));
        assertTrue(comparison);
    }

    // Positive EXISTS 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#exists-02
    @Test
    public void datasparql11negationmanifestexists02exists02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestexists02exists02.xml",
                "-q", "src/test/resources/sparql11/negation/exists-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/exists-02.srx"), Path.of("src/test/resources/datasparql11negationmanifestexists02exists02.xml"));
        assertTrue(comparison);
    }

    // Subtraction with MINUS from a fully bound minuend SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#full-minuend
    @Test
    public void datasparql11negationmanifestfullminuendfullminuend() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/full-minuend.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestfullminuendfullminuend.xml",
                "-q", "src/test/resources/sparql11/negation/full-minuend.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/full-minuend.srx"), Path.of("src/test/resources/datasparql11negationmanifestfullminuendfullminuend.xml"));
        assertTrue(comparison);
    }

    // Subtraction with MINUS from a partially bound minuend SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#partial-minuend
    @Test
    public void datasparql11negationmanifestpartialminuendpartialminuend() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/part-minuend.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestpartialminuendpartialminuend.xml",
                "-q", "src/test/resources/sparql11/negation/part-minuend.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/part-minuend.srx"), Path.of("src/test/resources/datasparql11negationmanifestpartialminuendpartialminuend.xml"));
        assertTrue(comparison);
    }

    // Calculate which sets have the same elements SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#set-equals-1
    @Test
    public void datasparql11negationmanifestsetequals1setequals1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsetequals1setequals1.xml",
                "-q", "src/test/resources/sparql11/negation/set-equals-1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/set-equals-1.srx"), Path.of("src/test/resources/datasparql11negationmanifestsetequals1setequals1.xml"));
        assertTrue(comparison);
    }

    // Calculate which sets are subsets of others (include A subsetOf A) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#subset-01
    @Test
    public void datasparql11negationmanifestsubset01subset01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsubset01subset01.xml",
                "-q", "src/test/resources/sparql11/negation/subset-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/subset-01.srx"), Path.of("src/test/resources/datasparql11negationmanifestsubset01subset01.xml"));
        assertTrue(comparison);
    }

    // Calculate which sets are subsets of others (exclude A subsetOf A) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#subset-02
    @Test
    public void datasparql11negationmanifestsubset02subset02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsubset02subset02.xml",
                "-q", "src/test/resources/sparql11/negation/subset-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/subset-02.srx"), Path.of("src/test/resources/datasparql11negationmanifestsubset02subset02.xml"));
        assertTrue(comparison);
    }

    // Calculate proper subset SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#subset-03
    @Test
    public void datasparql11negationmanifestsubset03subset03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/set-data.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsubset03subset03.xml",
                "-q", "src/test/resources/sparql11/negation/subset-03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/subset-03.srx"), Path.of("src/test/resources/datasparql11negationmanifestsubset03subset03.xml"));
        assertTrue(comparison);
    }

    // Subsets by exclusion (MINUS) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#subset-by-exclusion-minus-1
    @Test
    public void datasparql11negationmanifestsubsetbyexclusionminus1subsetbyexclusionminus1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/subsetByExcl.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsubsetbyexclusionminus1subsetbyexclusionminus1.xml",
                "-q", "src/test/resources/sparql11/negation/subsetByExcl02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/subsetByExcl02.srx"), Path.of("src/test/resources/datasparql11negationmanifestsubsetbyexclusionminus1subsetbyexclusionminus1.xml"));
        assertTrue(comparison);
    }

    // Subsets by exclusion (NOT EXISTS) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#subset-by-exclusion-nex-1
    @Test
    public void datasparql11negationmanifestsubsetbyexclusionnex1subsetbyexclusionnex1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/subsetByExcl.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifestsubsetbyexclusionnex1subsetbyexclusionnex1.xml",
                "-q", "src/test/resources/sparql11/negation/subsetByExcl01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/subsetByExcl01.srx"), Path.of("src/test/resources/datasparql11negationmanifestsubsetbyexclusionnex1subsetbyexclusionnex1.xml"));
        assertTrue(comparison);
    }

    // Medical, temporal proximity by exclusion (NOT EXISTS) SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/negation/manifest#temporal-proximity-by-exclusion-nex-1
    @Test
    public void datasparql11negationmanifesttemporalproximitybyexclusionnex1temporalproximitybyexclusionnex1() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/negation/temporalProximity01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11negationmanifesttemporalproximitybyexclusionnex1temporalproximitybyexclusionnex1.xml",
                "-q", "src/test/resources/sparql11/negation/temporalProximity01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/negation/temporalProximity01.srx"), Path.of("src/test/resources/datasparql11negationmanifesttemporalproximitybyexclusionnex1temporalproximitybyexclusionnex1.xml"));
        assertTrue(comparison);
    }

    // Expression is equality SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp01
    @Test
    public void datasparql11projectexpressionmanifestprojexp01projexp01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp01projexp01.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp01.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp01projexp01.xml"));
        assertTrue(comparison);
    }

    // Expression raise an error SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp02
    @Test
    public void datasparql11projectexpressionmanifestprojexp02projexp02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp02.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp02projexp02.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp02.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp02projexp02.xml"));
        assertTrue(comparison);
    }

    // Reuse a project expression variable in select SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp03
    @Test
    public void datasparql11projectexpressionmanifestprojexp03projexp03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp03.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp03projexp03.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp03.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp03projexp03.xml"));
        assertTrue(comparison);
    }

    // Reuse a project expression variable in order by SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp04
    @Test
    public void datasparql11projectexpressionmanifestprojexp04projexp04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp04.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp04projexp04.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp04.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp04projexp04.xml"));
        assertTrue(comparison);
    }

    // Expression may return no value SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp05
    @Test
    public void datasparql11projectexpressionmanifestprojexp05projexp05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp05.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp05projexp05.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp05.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp05projexp05.xml"));
        assertTrue(comparison);
    }

    // Expression has undefined variable SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp06
    @Test
    public void datasparql11projectexpressionmanifestprojexp06projexp06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp06.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp06projexp06.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp06.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp06projexp06.xml"));
        assertTrue(comparison);
    }

    // Expression has variable that may be unbound SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/project-expression/manifest#projexp07
    @Test
    public void datasparql11projectexpressionmanifestprojexp07projexp07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/project-expression/projexp07.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11projectexpressionmanifestprojexp07projexp07.xml",
                "-q", "src/test/resources/sparql11/project-expression/projexp07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/project-expression/projexp07.srx"), Path.of("src/test/resources/datasparql11projectexpressionmanifestprojexp07projexp07.xml"));
        assertTrue(comparison);
    }

    // Negated Property Set with both direct and inverse properties SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#nps_direct_and_inverse
    @Test
    public void datasparql11propertypathmanifestnps_direct_and_inversenps_direct_and_inverse() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/nps_direct_and_inverse.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestnps_direct_and_inversenps_direct_and_inverse.xml",
                "-q", "src/test/resources/sparql11/property-path/nps_direct_and_inverse.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/nps_direct_and_inverse.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestnps_direct_and_inversenps_direct_and_inverse.xml"));
        assertTrue(comparison);
    }

    // Negated Property Set with inverse properties SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#nps_inverse
    @Test
    public void datasparql11propertypathmanifestnps_inversenps_inverse() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/nps_inverse.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestnps_inversenps_inverse.xml",
                "-q", "src/test/resources/sparql11/property-path/nps_inverse.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/nps_inverse.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestnps_inversenps_inverse.xml"));
        assertTrue(comparison);
    }

    // (pp01) Simple path SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp01
    @Test
    public void datasparql11propertypathmanifestpp01pp01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp01pp01.xml",
                "-q", "src/test/resources/sparql11/property-path/pp01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp01.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp01pp01.xml"));
        assertTrue(comparison);
    }

    // (pp02) Star path SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp02
    @Test
    public void datasparql11propertypathmanifestpp02pp02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp01.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp02pp02.xml",
                "-q", "src/test/resources/sparql11/property-path/pp02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp02.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp02pp02.xml"));
        assertTrue(comparison);
    }

    // (pp03) Simple path with loop SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp03
    @Test
    public void datasparql11propertypathmanifestpp03pp03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp03.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp03pp03.xml",
                "-q", "src/test/resources/sparql11/property-path/pp03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp03.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp03pp03.xml"));
        assertTrue(comparison);
    }

    // (pp06) Path with two graphs SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp06
    @Test
    public void datasparql11propertypathmanifestpp06pp06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp06pp06.xml",
                "-q", "src/test/resources/sparql11/property-path/pp06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp06.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp06pp06.xml"));
        assertTrue(comparison);
    }

    // (pp07) Path with one graph SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp07
    @Test
    public void datasparql11propertypathmanifestpp07pp07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp07pp07.xml",
                "-q", "src/test/resources/sparql11/property-path/pp06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp07.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp07pp07.xml"));
        assertTrue(comparison);
    }

    // (pp08) Reverse path SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp08
    @Test
    public void datasparql11propertypathmanifestpp08pp08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp08.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp08pp08.xml",
                "-q", "src/test/resources/sparql11/property-path/pp08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp08.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp08pp08.xml"));
        assertTrue(comparison);
    }

    // (pp09) Reverse sequence path SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp09
    @Test
    public void datasparql11propertypathmanifestpp09pp09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp09.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp09pp09.xml",
                "-q", "src/test/resources/sparql11/property-path/pp09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp09.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp09pp09.xml"));
        assertTrue(comparison);
    }

    // (pp10) Path with negation SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp10
    @Test
    public void datasparql11propertypathmanifestpp10pp10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp10.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp10pp10.xml",
                "-q", "src/test/resources/sparql11/property-path/pp10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp10.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp10pp10.xml"));
        assertTrue(comparison);
    }

    // (pp11) Simple path and two paths to same target node SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp11
    @Test
    public void datasparql11propertypathmanifestpp11pp11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp11.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp11pp11.xml",
                "-q", "src/test/resources/sparql11/property-path/pp11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp11.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp11pp11.xml"));
        assertTrue(comparison);
    }

    // (pp12) Variable length path and two paths to same target node SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp12
    @Test
    public void datasparql11propertypathmanifestpp12pp12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp11.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp12pp12.xml",
                "-q", "src/test/resources/sparql11/property-path/pp12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp12.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp12pp12.xml"));
        assertTrue(comparison);
    }

    // (pp14) Star path over foaf:knows SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp14
    @Test
    public void datasparql11propertypathmanifestpp14pp14() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp14.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp14pp14.xml",
                "-q", "src/test/resources/sparql11/property-path/pp14.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp14.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp14pp14.xml"));
        assertTrue(comparison);
    }

    // (pp16) Duplicate paths and cycles through foaf:knows* SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp16
    @Test
    public void datasparql11propertypathmanifestpp16pp16() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp16.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp16pp16.xml",
                "-q", "src/test/resources/sparql11/property-path/pp14.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp16.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp16pp16.xml"));
        assertTrue(comparison);
    }

    // (pp21) Diamond -- :p+ SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp21
    @Test
    public void datasparql11propertypathmanifestpp21pp21() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/data-diamond.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp21pp21.xml",
                "-q", "src/test/resources/sparql11/property-path/path-2-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/diamond-2.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp21pp21.xml"));
        assertTrue(comparison);
    }

    // (pp23) Diamond, with tail -- :p+ SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp23
    @Test
    public void datasparql11propertypathmanifestpp23pp23() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/data-diamond-tail.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp23pp23.xml",
                "-q", "src/test/resources/sparql11/property-path/path-2-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/diamond-tail-2.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp23pp23.xml"));
        assertTrue(comparison);
    }

    // (pp25) Diamond, with loop -- :p+ SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp25
    @Test
    public void datasparql11propertypathmanifestpp25pp25() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/data-diamond-loop.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp25pp25.xml",
                "-q", "src/test/resources/sparql11/property-path/path-2-2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/diamond-loop-2.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp25pp25.xml"));
        assertTrue(comparison);
    }

    // (pp28a) Diamond, with loop -- (:p/:p)? SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp28a
    @Test
    public void datasparql11propertypathmanifestpp28app28a() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/data-diamond-loop.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp28app28a.xml",
                "-q", "src/test/resources/sparql11/property-path/path-3-3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/diamond-loop-5a.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp28app28a.xml"));
        assertTrue(comparison);
    }

    // (pp30) Operator precedence 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp30
    @Test
    public void datasparql11propertypathmanifestpp30pp30() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/path-p1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp30pp30.xml",
                "-q", "src/test/resources/sparql11/property-path/path-p1.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-p1.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp30pp30.xml"));
        assertTrue(comparison);
    }

    // (pp31) Operator precedence 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp31
    @Test
    public void datasparql11propertypathmanifestpp31pp31() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/path-p1.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp31pp31.xml",
                "-q", "src/test/resources/sparql11/property-path/path-p2.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-p2.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp31pp31.xml"));
        assertTrue(comparison);
    }

    // (pp32) Operator precedence 3 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp32
    @Test
    public void datasparql11propertypathmanifestpp32pp32() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/path-p3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp32pp32.xml",
                "-q", "src/test/resources/sparql11/property-path/path-p3.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-p3.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp32pp32.xml"));
        assertTrue(comparison);
    }

    // (pp33) Operator precedence 4 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp33
    @Test
    public void datasparql11propertypathmanifestpp33pp33() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/path-p3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp33pp33.xml",
                "-q", "src/test/resources/sparql11/property-path/path-p4.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-p4.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp33pp33.xml"));
        assertTrue(comparison);
    }

    // (pp34) Named Graph 1 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp34
    @Test
    public void datasparql11propertypathmanifestpp34pp34() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp34pp34.xml",
                "-q", "src/test/resources/sparql11/property-path/path-ng-01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-ng-01.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp34pp34.xml"));
        assertTrue(comparison);
    }

    // (pp35) Named Graph 2 SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp35
    @Test
    public void datasparql11propertypathmanifestpp35pp35() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp35pp35.xml",
                "-q", "src/test/resources/sparql11/property-path/path-ng-02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/path-ng-01.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp35pp35.xml"));
        assertTrue(comparison);
    }

    // (pp36) Arbitrary path with bound endpoints SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp36
    @Test
    public void datasparql11propertypathmanifestpp36pp36() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/clique3.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp36pp36.xml",
                "-q", "src/test/resources/sparql11/property-path/pp36.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp36.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp36pp36.xml"));
        assertTrue(comparison);
    }

    // (pp37) Nested (*)* SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#pp37
    // Test case as per http://lists.w3.org/Archives/Public/public-rdf-dawg-comments/2012Feb/0006.html
    @Test
    public void datasparql11propertypathmanifestpp37pp37() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/pp37.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestpp37pp37.xml",
                "-q", "src/test/resources/sparql11/property-path/pp37.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/pp37.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestpp37pp37.xml"));
        assertTrue(comparison);
    }

    // ZeroOrX property paths should only return terms in the graph and not also terms defined in the query SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/property-path/manifest#values_and_path
    @Test
    public void datasparql11propertypathmanifestvalues_and_pathvalues_and_path() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/property-path/empty.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11propertypathmanifestvalues_and_pathvalues_and_path.xml",
                "-q", "src/test/resources/sparql11/property-path/values_and_path.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/property-path/values_and_path.srx"), Path.of("src/test/resources/datasparql11propertypathmanifestvalues_and_pathvalues_and_path.xml"));
        assertTrue(comparison);
    }

    // sq01 - Subquery within graph pattern SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery01
    @Test
    public void datasparql11subquerymanifestsubquery01subquery01() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery01subquery01.xml",
                "-q", "src/test/resources/sparql11/subquery/sq01.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq01.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery01subquery01.xml"));
        assertTrue(comparison);
    }

    // sq02 - Subquery within graph pattern, graph variable is bound SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery02
    @Test
    public void datasparql11subquerymanifestsubquery02subquery02() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery02subquery02.xml",
                "-q", "src/test/resources/sparql11/subquery/sq02.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq02.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery02subquery02.xml"));
        assertTrue(comparison);
    }

    // sq03 - Subquery within graph pattern, graph variable is not bound SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery03
    @Test
    public void datasparql11subquerymanifestsubquery03subquery03() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery03subquery03.xml",
                "-q", "src/test/resources/sparql11/subquery/sq03.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq03.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery03subquery03.xml"));
        assertTrue(comparison);
    }

    // sq04 - Subquery within graph pattern, default graph does not apply SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery04
    @Test
    public void datasparql11subquerymanifestsubquery04subquery04() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq04.rdf",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery04subquery04.xml",
                "-q", "src/test/resources/sparql11/subquery/sq04.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq04.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery04subquery04.xml"));
        assertTrue(comparison);
    }

    // sq05 - Subquery within graph pattern, from named applies SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery05
    @Test
    public void datasparql11subquerymanifestsubquery05subquery05() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery05subquery05.xml",
                "-q", "src/test/resources/sparql11/subquery/sq05.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq05.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery05subquery05.xml"));
        assertTrue(comparison);
    }

    // sq06 - Subquery with graph pattern, from named applies SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery06
    @Test
    public void datasparql11subquerymanifestsubquery06subquery06() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq05.rdf",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery06subquery06.xml",
                "-q", "src/test/resources/sparql11/subquery/sq06.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq06.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery06subquery06.xml"));
        assertTrue(comparison);
    }

    // sq07 - Subquery with from SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery07
    @Test
    public void datasparql11subquerymanifestsubquery07subquery07() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery07subquery07.xml",
                "-q", "src/test/resources/sparql11/subquery/sq07.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq07.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery07subquery07.xml"));
        assertTrue(comparison);
    }

    // sq08 - Subquery with aggregate SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery08
    @Test
    public void datasparql11subquerymanifestsubquery08subquery08() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq08.rdf",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery08subquery08.xml",
                "-q", "src/test/resources/sparql11/subquery/sq08.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq08.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery08subquery08.xml"));
        assertTrue(comparison);
    }

    // sq09 - Nested Subqueries SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery09
    @Test
    public void datasparql11subquerymanifestsubquery09subquery09() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq09.rdf",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery09subquery09.xml",
                "-q", "src/test/resources/sparql11/subquery/sq09.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq09.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery09subquery09.xml"));
        assertTrue(comparison);
    }

    // sq10 - Subquery with exists SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery10
    @Test
    public void datasparql11subquerymanifestsubquery10subquery10() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq10.rdf",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery10subquery10.xml",
                "-q", "src/test/resources/sparql11/subquery/sq10.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq10.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery10subquery10.xml"));
        assertTrue(comparison);
    }

    // sq11 - Subquery limit per resource SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery11
    // This query limits results per number of orders, rather than by number of rows
    @Test
    public void datasparql11subquerymanifestsubquery11subquery11() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq11.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery11subquery11.xml",
                "-q", "src/test/resources/sparql11/subquery/sq11.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq11.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery11subquery11.xml"));
        assertTrue(comparison);
    }

    // sq12 - Subquery in CONSTRUCT with built-ins SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery12
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    // This query constructs full names from first and last names
    @Test
    public void datasparql11subquerymanifestsubquery12subquery12() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq12.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery12subquery12.ttl",
                "-q", "src/test/resources/sparql11/subquery/sq12.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/subquery/sq12_out.ttl"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery12subquery12.ttl"));
        assertTrue(comparison);
    }

    // sq13 - Subqueries don't inject bindings SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery13
    // The result of this subquery is a Kartesian product of all orders, rather than paris of orders sharing products, since subqueries are evaluated independent from bindings from outside the subquery
    @Test
    public void datasparql11subquerymanifestsubquery13subquery13() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq13.ttl",
                "-if", "turtle",
                "-of", "xml",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery13subquery13.xml",
                "-q", "src/test/resources/sparql11/subquery/sq13.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareXMLSparqlResultFiles(Path.of("src/test/resources/sparql11/subquery/sq13.srx"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery13subquery13.xml"));
        assertTrue(comparison);
    }

    // sq14 - limit by resource SPARQL Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/subquery/manifest#subquery14
    // FIXME Turtle SPARQL result format is non-standard. See http://www.w3.org/2001/sw/DataAccess/tests/result-set#
    @Test
    public void datasparql11subquerymanifestsubquery14subquery14() throws IOException, NoSuchAlgorithmException, InterruptedException, XPathExpressionException, ParserConfigurationException, SAXException {
        // Load action file
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sparql11/subquery/sq14.ttl",
                "-if", "turtle",
                "-of", "turtle",
                "-o", "src/test/resources/datasparql11subquerymanifestsubquery14subquery14.ttl",
                "-q", "src/test/resources/sparql11/subquery/sq14.rq")
            .start();
        assertEquals(0, command.waitFor());
        boolean comparison = TestUtils.compareFilesLineByLine(Path.of("src/test/resources/sparql11/subquery/sq14-out.ttl"), Path.of("src/test/resources/datasparql11subquerymanifestsubquery14subquery14.ttl"));
        assertTrue(comparison);
    }

    // syntax-select-expr-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_1test_1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-select-expr-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-05.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_10test_10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-06.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_11test_11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-07.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_12test_12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-08.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_13test_13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-09.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_14test_14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-10.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_15test_15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-11.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_16test_16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-12.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_17test_17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-13.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_18test_18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-14.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_19test_19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-14.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-select-expr-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_2test_2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-select-expr-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-15.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_20test_20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-15.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-subquery-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_21test_21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-subquery-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-subquery-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_22test_22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-subquery-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-subquery-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_23test_23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-subquery-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-not-exists-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_24test_24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-not-exists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-not-exists-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_25test_25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-not-exists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-not-exists-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_26test_26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-not-exists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-exists-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_27test_27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-exists-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-exists-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_28test_28() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-exists-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-exists-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_29test_29() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-exists-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-select-expr-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_3test_3() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-select-expr-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-minus-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_30test_30() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-minus-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-oneof-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_31test_31() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-oneof-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-oneof-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_32test_32() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-oneof-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-oneof-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_33test_33() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-oneof-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bindingBINDscopes-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_34test_34() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bindings-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bindings-02a.rq with VALUES clause SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_35atest_35a() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bindings-02a.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bindings-03a.rq with VALUES clause SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_36atest_36a() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bindings-03a.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bindings-05a.rq with VALUES clause SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_38atest_38a() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bindings-05a.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-select-expr-04.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_4test_4() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-select-expr-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-bind-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_40test_40() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bind-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-construct-where-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_41test_41() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-construct-where-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-construct-where-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_42test_42() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-construct-where-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-01.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_43test_43() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-02.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_44test_44() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-03.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_45test_45() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-04.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_46test_46() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-05.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_47test_47() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-06.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_48test_48() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-07.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_49test_49() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-select-expr-05.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_5test_5() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-select-expr-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-08.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_50test_50() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-bindings-09.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_51test_51() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-bindings-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // PrefixName with hex-encoded colons SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_53test_53() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/qname-escape-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // PrefixName with unescaped colons SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_54test_54() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/qname-escape-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope1.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_55test_55() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope1.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope2.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_56test_56() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope2.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope3.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_57test_57() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope3.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope4.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_58test_58() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope4.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope5.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_59test_59() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope5.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_6test_6() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-BINDscope6.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_60test_60() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope6.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-BINDscope7.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_61atest_61a() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope7.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-BINDscope8.rq SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_62atest_62a() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-BINDscope8.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-propertyPaths-01.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_63test_63() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-propertyPaths-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-SELECTscope1.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_64test_64() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-SELECTscope1.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-SELECTscope2 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_65test_65() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-SELECTscope2.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-SELECTscope3.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_66test_66() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-SELECTscope3.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-02.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_7test_7() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-03.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_8test_8() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-aggregate-04.rq SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_9test_9() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syntax-aggregate-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // Too few values in a VALUE clause compared to the number of variables SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_bad_values_too_fewtest_bad_values_too_few() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-values-too-few.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // Too many values in a VALUE clause compared to the number of variables SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_bad_values_too_manytest_bad_values_too_many() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-values-too-many.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // utf8 literal using codepoints at notable unicode boundaries SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_boundaries_04test_codepoint_boundaries_04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/1val1STRING_LITERAL1_with_UTF8_boundaries.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // 'slash'u and 'slash'u unicode codepoint escaping in literal using codepoints at notable unicode boundaries SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_boundaries_escaped_05test_codepoint_boundaries_escaped_05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/1val1STRING_LITERAL1_with_UTF8_boundaries_escaped.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // 'slash'u unicode codepoint escaping in literal SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_escape_01test_codepoint_escape_01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-codepoint-escape-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // Invalid multi-pass codepoint escaping ('slash'u then 'slash'u) SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_escape_bad_02test_codepoint_escape_bad_02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-codepoint-escape-bad-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // Invalid multi-pass codepoint escaping ('slash'u then 'slash'u) SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_escape_bad_03test_codepoint_escape_bad_03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-codepoint-escape-bad-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // 'slash'u unicode codepoint escaping in literal using partial surrogate pair SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_codepoint_invalid_escaped_bad_06test_codepoint_invalid_escaped_bad_06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-invalid-codepoint-escaped-bad-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-pname-01 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_01test_pn_01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-02 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_02test_pn_02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-03 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_03test_pn_03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-04 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_04test_pn_04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-05 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_05test_pn_05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-06 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_06test_pn_06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-07 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_07test_pn_07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-08 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_08test_pn_08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-pname-09 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_09test_pn_09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pname-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syn-bad-pname-01 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_01test_pn_bad_01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-01.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-02 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_02test_pn_bad_02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-02.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-03 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_03test_pn_bad_03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-03.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-04 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_04test_pn_bad_04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-04.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-05 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_05test_pn_bad_05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-05.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-06 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_06test_pn_bad_06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-06.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-07 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_07test_pn_bad_07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-07.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-08 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_08test_pn_bad_08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-08.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-09 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_09test_pn_bad_09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-09.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-10 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_10test_pn_bad_10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-10.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-11 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_11test_pn_bad_11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-11.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-12 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_12test_pn_bad_12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-12.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-bad-pname-13 SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pn_bad_13test_pn_bad_13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-bad-pname-13.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syn-pp-in-collection SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxquerymanifesttest_pp_colltest_pp_coll() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-query/syn-pp-in-collection.rq"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-01.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_1test_1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-01.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-10.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_10test_10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-10.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-11.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_11test_11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-11.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-12.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_12test_12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-12.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-13.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_13test_13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-13.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-14.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_14test_14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-14.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-15.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_15test_15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-15.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-16.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_16test_16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-16.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-17.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_17test_17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-17.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-18.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_18test_18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-18.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-19.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_19test_19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-19.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-02.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_2test_2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-02.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-20.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_20test_20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-20.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-21.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_21test_21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-21.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-22.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_22test_22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-22.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-23.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_23test_23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-23.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-24.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_24test_24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-24.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-25.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_25test_25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-25.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-26.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_26test_26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-26.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-27.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_27test_27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-27.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-28.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_28test_28() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-28.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-29.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_29test_29() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-29.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-03.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_3test_3() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-03.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-30.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_30test_30() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-30.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-31.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_31test_31() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-31.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-32.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_32test_32() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-32.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-33.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_33test_33() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-33.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-34.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_34test_34() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-34.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-35.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_35test_35() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-35.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-36.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_36test_36() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-36.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-37.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_37test_37() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-37.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-38.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_38test_38() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-38.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-39.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_39test_39() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-39.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-04.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_4test_4() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-04.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-40.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_40test_40() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-40.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-bad-01.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_41test_41() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-01.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-02.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_42test_42() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-02.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-03.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_43test_43() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-03.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-04.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_44test_44() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-04.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-05.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_45test_45() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-05.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-06.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_46test_46() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-06.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-07.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_47test_47() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-07.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-08.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_48test_48() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-08.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-09.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_49test_49() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-09.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-05.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_5test_5() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-05.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-bad-10.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_50test_50() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-10.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-11.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_51test_51() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-11.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-bad-12.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_52test_52() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-bad-12.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-53.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_53test_53() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-53.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-54.ru SPARQL Negative Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_54test_54() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-54.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // syntax-update-06.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_6test_6() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-06.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-07.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_7test_7() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-07.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-08.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_8test_8() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-08.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-09.ru SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate1manifesttest_9test_9() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-1/syntax-update-09.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // syntax-update-other-01 SPARQL Positive Syntax Test
    @Test
    public void datasparql11syntaxupdate2manifestsyntaxupdateother01syntaxupdateother01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/sparql/sparql11/syntax-update-2/large-request-01.ru"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", "src/test/resources/sampleData.ttl",
                "-if", "turtle",
                "-q", localActionFile.toString())
            .start();
        assertEquals(0, command.waitFor());
    }

    // ADD SILENT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#add-silent
    // add a non-existent graph
    @Test
    public void datasparql11updatesilentmanifestaddsilentaddsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/add-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // ADD SILENT TO DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#add-to-default-silent
    // add a non-existent graph to default graph
    @Test
    public void datasparql11updatesilentmanifestaddtodefaultsilentaddtodefaultsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/add-to-default-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CLEAR SILENT DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#clear-default-silent
    // Clearing the already empty default graph. (This operation would also succeed without SILENT)
    @Test
    public void datasparql11updatesilentmanifestcleardefaultsilentcleardefaultsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/clear-default-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CLEAR SILENT GRAPH iri SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#clear-silent
    // Clearing a non-existent named graph
    @Test
    public void datasparql11updatesilentmanifestclearsilentclearsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/update-silent/spo.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/update-silent/spo.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/clear-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY SILENT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#copy-silent
    // copy a non-existent graph
    @Test
    public void datasparql11updatesilentmanifestcopysilentcopysilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/copy-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // COPY SILENT TO DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#copy-to-default-silent
    // copy a non-existent graph to default graph
    @Test
    public void datasparql11updatesilentmanifestcopytodefaultsilentcopytodefaultsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/copy-to-default-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // CREATE SILENT iri SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#create-silent
    // Creation of an already existent named graph
    @Test
    public void datasparql11updatesilentmanifestcreatesilentcreatesilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/create-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP SILENT DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#drop-default-silent
    // Clearing the already empty default graph. (This operation would also succeed withou SILENT)
    @Test
    public void datasparql11updatesilentmanifestdropdefaultsilentdropdefaultsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/drop-default-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // DROP SILENT GRAPH iri SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#drop-silent
    // Clearing a non-existent named graph
    @Test
    public void datasparql11updatesilentmanifestdropsilentdropsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);
        refLoader.parse("src/test/resources/sparql11/update-silent/spo.ttl");


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);
        resultLoader.parse("src/test/resources/sparql11/update-silent/spo.ttl");

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/drop-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // LOAD SILENT INTO SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#load-into-silent
    // Loading a non-existent named graph
    @Test
    public void datasparql11updatesilentmanifestloadintosilentloadintosilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/load-silent-into.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // LOAD SILENT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#load-silent
    // Loading a non-existent graph
    @Test
    public void datasparql11updatesilentmanifestloadsilentloadsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/load-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE SILENT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#move-silent
    // move a non-existent graph
    @Test
    public void datasparql11updatesilentmanifestmovesilentmovesilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/move-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

    // MOVE SILENT TO DEFAULT SPARQL Update Evaluation Test
    // http://www.w3.org/2009/sparql/docs/tests/data-sparql11/update-silent/manifest#move-to-default-silent
    // move a non-existent graph to default graph
    @Test
    public void datasparql11updatesilentmanifestmovetodefaultsilentmovetodefaultsilent() throws LoadException, EngineException, FileNotFoundException, IOException {


        GraphStore kbRef = GraphStore.create();
        Load refLoader = Load.create(kbRef);


        GraphStore kbResult = GraphStore.create();
        Load resultLoader = Load.create(kbResult);

        QueryProcess resultQueryProcess = QueryProcess.create(kbRef);
        String query0String = TestUtils.getFileTextContent("src/test/resources/sparql11/update-silent/move-to-default-silent.ru");
        resultQueryProcess.query(query0String);

        assertEquals(0, TestUtils.graphStoreContentCompare(kbRef, kbResult));
}

}