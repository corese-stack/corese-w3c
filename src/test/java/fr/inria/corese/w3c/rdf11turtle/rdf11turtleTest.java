package fr.inria.corese.w3c.rdf11turtle;

import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.NoSuchAlgorithmException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-25, Time: 16:31:56 Europe/Paris
 */
public class rdf11turtleTest {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/rdf11turtle/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            Files.createDirectories(testReportPath.getParent());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.createDirectories(testReportPath.getParent());
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // HYPHEN_MINUS_in_localName
    // HYPHEN-MINUS in local name
    @Test
    public void rdf11rdfturtlemanifestttlhyphen_minus_in_localnamehyphen_minus_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/HYPHEN_MINUS_in_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/HYPHEN_MINUS_in_localName.nt"));
        
        Path convertedActionFilePath = Path.of("HYPHEN_MINUS_in_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("HYPHEN_MINUS_in_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("HYPHEN_MINUS_in_localName.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/HYPHEN_MINUS_in_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/HYPHEN_MINUS_in_localName.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-01
    // IRI resolution (RFC3986 original cases)
    @Test
    public void rdf11rdfturtlemanifestttliriresolution01iriresolution01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-01.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-01.nt"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-01.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-01.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-01.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-01.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-01.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-02
    // IRI resolution (RFC3986 using base IRI with trailing slash)
    @Test
    public void rdf11rdfturtlemanifestttliriresolution02iriresolution02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-02.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-02.nt"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-02.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-02.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-02.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-02.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-02.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-07
    // IRI resolution (RFC3986 using base IRI with file path)
    @Test
    public void rdf11rdfturtlemanifestttliriresolution07iriresolution07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-07.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-07.nt"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-07.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-07.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-07.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-07.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-07.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI-resolution-08
    // IRI resolution (miscellaneous cases)
    @Test
    public void rdf11rdfturtlemanifestttliriresolution08iriresolution08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-08.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-08.nt"));
        
        Path convertedActionFilePath = Path.of("IRI-resolution-08.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI-resolution-08.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI-resolution-08.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-08.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI-resolution-08.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRIREF_datatype
    // IRIREF datatype ""^^<t>
    @Test
    public void rdf11rdfturtlemanifestttliriref_datatypeiriref_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt"));
        
        Path convertedActionFilePath = Path.of("IRIREF_datatype.ttl");
        Path canonConvertedActionFilePath = Path.of("IRIREF_datatype.ttl");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_subject
    // IRI subject
    @Test
    public void rdf11rdfturtlemanifestttliri_subjectiri_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_subject.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("IRI_subject.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI_subject.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_subject.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_all_punctuation
    // IRI with all punctuation
    @Test
    public void rdf11rdfturtlemanifestttliri_with_all_punctuationiri_with_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_all_punctuation.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_all_punctuation.nt"));
        
        Path convertedActionFilePath = Path.of("IRI_with_all_punctuation.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI_with_all_punctuation.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_with_all_punctuation.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_all_punctuation.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_all_punctuation.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_eight_digit_numeric_escape
    // IRI with eight digit numeric escape ('slash'u)
    @Test
    public void rdf11rdfturtlemanifestttliri_with_eight_digit_numeric_escapeiri_with_eight_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_eight_digit_numeric_escape.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("IRI_with_eight_digit_numeric_escape.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI_with_eight_digit_numeric_escape.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_eight_digit_numeric_escape.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // IRI_with_four_digit_numeric_escape
    // IRI with four digit numeric escape ('slash'u)
    @Test
    public void rdf11rdfturtlemanifestttliri_with_four_digit_numeric_escapeiri_with_four_digit_numeric_escape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_four_digit_numeric_escape.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("IRI_with_four_digit_numeric_escape.ttl");
        Path canonConvertedActionFilePath = Path.of("IRI_with_four_digit_numeric_escape.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_with_four_digit_numeric_escape.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1
    // LITERAL1 'x'
    @Test
    public void rdf11rdfturtlemanifestttlliteral1literal1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL1.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL1.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_controls
    // LITERAL1_all_controls '\x00\x01\x02\x03\x04...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral1_all_controlsliteral1_all_controls() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_controls.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_controls.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_all_controls.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_all_controls.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_all_controls.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_controls.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_controls.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_all_punctuation
    // LITERAL1_all_punctuation '!"#$%&()...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral1_all_punctuationliteral1_all_punctuation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_punctuation.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_punctuation.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_all_punctuation.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_all_punctuation.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_all_punctuation.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_punctuation.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_all_punctuation.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_ascii_boundaries
    // LITERAL1_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x26\x28...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral1_ascii_boundariesliteral1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_ascii_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_ascii_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_ascii_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_ascii_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1_ascii_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_ascii_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_ascii_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL1_with_UTF8_boundaries
    // LITERAL1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral1_with_utf8_boundariesliteral1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_with_UTF8_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL1_with_UTF8_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL1_with_UTF8_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1_with_UTF8_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2
    // LITERAL2 "x"
    @Test
    public void rdf11rdfturtlemanifestttlliteral2literal2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL2.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL2.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_ascii_boundaries
    // LITERAL2_ascii_boundaries '\x00\x09\x0b\x0c\x0e\x21\x23...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral2_ascii_boundariesliteral2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_ascii_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_ascii_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL2_ascii_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL2_ascii_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL2_ascii_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_ascii_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_ascii_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL2_with_UTF8_boundaries
    // LITERAL2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral2_with_utf8_boundariesliteral2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_with_UTF8_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL2_with_UTF8_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL2_with_UTF8_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL2_with_UTF8_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1
    // LITERAL_LONG1 '''x'''
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long1literal_long1() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_ascii_boundaries
    // LITERAL_LONG1_ascii_boundaries '\x00\x26\x28...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long1_ascii_boundariesliteral_long1_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_ascii_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_ascii_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_ascii_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_ascii_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_ascii_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_1_squote
    // LITERAL_LONG1 with 1 squote '''a'b'''
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long1_with_1_squoteliteral_long1_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_1_squote.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_1_squote.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_1_squote.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_1_squote.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_with_1_squote.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_1_squote.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_1_squote.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_2_squotes
    // LITERAL_LONG1 with 2 squotes '''a''b'''
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long1_with_2_squotesliteral_long1_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_2_squotes.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_2_squotes.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_2_squotes.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_2_squotes.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG1_with_2_squotes.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_2_squotes.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_2_squotes.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG1_with_UTF8_boundaries
    // LITERAL_LONG1_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long1_with_utf8_boundariesliteral_long1_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_UTF8_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG1_with_UTF8_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG1_with_UTF8_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG1_with_UTF8_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2
    // LITERAL_LONG2 """x"""
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2literal_long2() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL1.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL1.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_ascii_boundaries
    // LITERAL_LONG2_ascii_boundaries '\x00\x21\x23...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2_ascii_boundariesliteral_long2_ascii_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_ascii_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_ascii_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_ascii_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_ascii_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_ascii_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_1_squote
    // LITERAL_LONG2 with 1 squote """a"b"""
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2_with_1_squoteliteral_long2_with_1_squote() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_1_squote.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_1_squote.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_1_squote.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_1_squote.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_1_squote.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_1_squote.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_1_squote.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_2_squotes
    // LITERAL_LONG2 with 2 squotes """a""b"""
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2_with_2_squotesliteral_long2_with_2_squotes() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_2_squotes.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_2_squotes.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_2_squotes.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_2_squotes.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_2_squotes.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_2_squotes.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_2_squotes.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_REVERSE_SOLIDUS
    // REVERSE SOLIDUS at end of LITERAL_LONG2
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2_with_reverse_solidusliteral_long2_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_REVERSE_SOLIDUS.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_LONG2_with_REVERSE_SOLIDUS.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_REVERSE_SOLIDUS.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // LITERAL_LONG2_with_UTF8_boundaries
    // LITERAL_LONG2_with_UTF8_boundaries '\x80\x7ff\x800\xfff...'
    @Test
    public void rdf11rdfturtlemanifestttlliteral_long2_with_utf8_boundariesliteral_long2_with_utf8_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_UTF8_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("LITERAL_LONG2_with_UTF8_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("LITERAL_LONG2_with_UTF8_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("LITERAL_with_UTF8_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_LONG2_with_UTF8_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/LITERAL_with_UTF8_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_base
    // SPARQL-style base
    @Test
    public void rdf11rdfturtlemanifestttlsparql_style_basesparql_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/SPARQL_style_base.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("SPARQL_style_base.ttl");
        Path canonConvertedActionFilePath = Path.of("SPARQL_style_base.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/SPARQL_style_base.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // SPARQL_style_prefix
    // SPARQL-style prefix
    @Test
    public void rdf11rdfturtlemanifestttlsparql_style_prefixsparql_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/SPARQL_style_prefix.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("SPARQL_style_prefix.ttl");
        Path canonConvertedActionFilePath = Path.of("SPARQL_style_prefix.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/SPARQL_style_prefix.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_object
    // anonymous blank node object
    @Test
    public void rdf11rdfturtlemanifestttlanonymous_blank_node_objectanonymous_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/anonymous_blank_node_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("anonymous_blank_node_object.ttl");
        Path canonConvertedActionFilePath = Path.of("anonymous_blank_node_object.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/anonymous_blank_node_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // anonymous_blank_node_subject
    // anonymous blank node subject
    @Test
    public void rdf11rdfturtlemanifestttlanonymous_blank_node_subjectanonymous_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/anonymous_blank_node_subject.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt"));
        
        Path convertedActionFilePath = Path.of("anonymous_blank_node_subject.ttl");
        Path canonConvertedActionFilePath = Path.of("anonymous_blank_node_subject.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_subject.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/anonymous_blank_node_subject.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_a_predicate
    // bareword a predicate
    @Test
    public void rdf11rdfturtlemanifestttlbareword_a_predicatebareword_a_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_a_predicate.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_a_predicate.nt"));
        
        Path convertedActionFilePath = Path.of("bareword_a_predicate.ttl");
        Path canonConvertedActionFilePath = Path.of("bareword_a_predicate.ttl");
        Path canonConvertedResultFilePath = Path.of("bareword_a_predicate.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_a_predicate.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_a_predicate.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_decimal
    // bareword decimal
    @Test
    public void rdf11rdfturtlemanifestttlbareword_decimalbareword_decimal() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_decimal.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_decimal.nt"));
        
        Path convertedActionFilePath = Path.of("bareword_decimal.ttl");
        Path canonConvertedActionFilePath = Path.of("bareword_decimal.ttl");
        Path canonConvertedResultFilePath = Path.of("bareword_decimal.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_decimal.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_decimal.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_double
    // bareword double
    @Test
    public void rdf11rdfturtlemanifestttlbareword_doublebareword_double() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_double.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_double.nt"));
        
        Path convertedActionFilePath = Path.of("bareword_double.ttl");
        Path canonConvertedActionFilePath = Path.of("bareword_double.ttl");
        Path canonConvertedResultFilePath = Path.of("bareword_double.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_double.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_double.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // bareword_integer
    // bareword integer
    @Test
    public void rdf11rdfturtlemanifestttlbareword_integerbareword_integer() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_integer.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt"));
        
        Path convertedActionFilePath = Path.of("bareword_integer.ttl");
        Path canonConvertedActionFilePath = Path.of("bareword_integer.ttl");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/bareword_integer.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_object
    // blankNodePropertyList as object <s> <p> [ … ] .
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_as_objectblanknodepropertylist_as_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_object.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_object.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_object_containing_objectList
    // blankNodePropertyList as object containing objectList <s> <p> [ <p2> <o>,<o2> ] .
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_as_object_containing_objectlistblanknodepropertylist_as_object_containing_objectlist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_object_containing_objectList_of_two_objects
    // blankNodePropertyList as object containing objectList of two objects <s> <p> [ <p2 <o> ] , <o2> .
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_as_object_containing_objectlist_of_two_objectsblanknodepropertylist_as_object_containing_objectlist_of_two_objects() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList_of_two_objects.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList_of_two_objects.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList_of_two_objects.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList_of_two_objects.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_object_containing_objectList_of_two_objects.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList_of_two_objects.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_object_containing_objectList_of_two_objects.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_as_subject
    // blankNodePropertyList as subject [ … ] <p> <o> .
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_as_subjectblanknodepropertylist_as_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_subject.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_subject.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_as_subject.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_as_subject.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_as_subject.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_subject.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_as_subject.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_containing_collection
    // blankNodePropertyList containing collection [ <p1> ( … ) ]
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_containing_collectionblanknodepropertylist_containing_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_containing_collection.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_containing_collection.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_containing_collection.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_containing_collection.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_containing_collection.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_containing_collection.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_containing_collection.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // blankNodePropertyList_with_multiple_triples
    // blankNodePropertyList with multiple triples [ <s> <p> ; <s2> <p2> ]
    @Test
    public void rdf11rdfturtlemanifestttlblanknodepropertylist_with_multiple_triplesblanknodepropertylist_with_multiple_triples() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_with_multiple_triples.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_with_multiple_triples.nt"));
        
        Path convertedActionFilePath = Path.of("blankNodePropertyList_with_multiple_triples.ttl");
        Path canonConvertedActionFilePath = Path.of("blankNodePropertyList_with_multiple_triples.ttl");
        Path canonConvertedResultFilePath = Path.of("blankNodePropertyList_with_multiple_triples.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_with_multiple_triples.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/blankNodePropertyList_with_multiple_triples.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_object
    // collection object
    @Test
    public void rdf11rdfturtlemanifestttlcollection_objectcollection_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_object.nt"));
        
        Path convertedActionFilePath = Path.of("collection_object.ttl");
        Path canonConvertedActionFilePath = Path.of("collection_object.ttl");
        Path canonConvertedResultFilePath = Path.of("collection_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // collection_subject
    // collection subject
    @Test
    public void rdf11rdfturtlemanifestttlcollection_subjectcollection_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_subject.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_subject.nt"));
        
        Path convertedActionFilePath = Path.of("collection_subject.ttl");
        Path canonConvertedActionFilePath = Path.of("collection_subject.ttl");
        Path canonConvertedResultFilePath = Path.of("collection_subject.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_subject.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/collection_subject.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_PNAME_NS
    // comment following PNAME_NS
    @Test
    public void rdf11rdfturtlemanifestttlcomment_following_pname_nscomment_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_PNAME_NS.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_PNAME_NS.nt"));
        
        Path convertedActionFilePath = Path.of("comment_following_PNAME_NS.ttl");
        Path canonConvertedActionFilePath = Path.of("comment_following_PNAME_NS.ttl");
        Path canonConvertedResultFilePath = Path.of("comment_following_PNAME_NS.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_PNAME_NS.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_PNAME_NS.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // comment_following_localName
    // comment following localName
    @Test
    public void rdf11rdfturtlemanifestttlcomment_following_localnamecomment_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("comment_following_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("comment_following_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/comment_following_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // default_namespace_IRI
    // default namespace IRI (:ln)
    @Test
    public void rdf11rdfturtlemanifestttldefault_namespace_iridefault_namespace_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/default_namespace_IRI.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("default_namespace_IRI.ttl");
        Path canonConvertedActionFilePath = Path.of("default_namespace_IRI.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/default_namespace_IRI.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // double_lower_case_e
    // double lower case e
    @Test
    public void rdf11rdfturtlemanifestttldouble_lower_case_edouble_lower_case_e() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/double_lower_case_e.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/double_lower_case_e.nt"));
        
        Path convertedActionFilePath = Path.of("double_lower_case_e.ttl");
        Path canonConvertedActionFilePath = Path.of("double_lower_case_e.ttl");
        Path canonConvertedResultFilePath = Path.of("double_lower_case_e.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/double_lower_case_e.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/double_lower_case_e.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // empty_collection
    // empty collection ()
    @Test
    public void rdf11rdfturtlemanifestttlempty_collectionempty_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/empty_collection.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/empty_collection.nt"));
        
        Path convertedActionFilePath = Path.of("empty_collection.ttl");
        Path canonConvertedActionFilePath = Path.of("empty_collection.ttl");
        Path canonConvertedResultFilePath = Path.of("empty_collection.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/empty_collection.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/empty_collection.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // first
    // first, not last, non-empty nested collection
    @Test
    public void rdf11rdfturtlemanifestttlfirstfirst() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/first.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/first.nt"));
        
        Path convertedActionFilePath = Path.of("first.ttl");
        Path canonConvertedActionFilePath = Path.of("first.ttl");
        Path canonConvertedResultFilePath = Path.of("first.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/first.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/first.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_object
    // labeled blank node object
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_objectlabeled_blank_node_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_object.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_object.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_subject
    // labeled blank node subject
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_subjectlabeled_blank_node_subject() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_subject.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_subject.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_subject.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_PN_CHARS_BASE_character_boundaries
    // labeled blank node with PN_CHARS_BASE character boundaries (_:AZazÀÖØöø...)
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_with_pn_chars_base_character_boundarieslabeled_blank_node_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_digit
    // labeled blank node with_leading_digit (_:0)
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_with_leading_digitlabeled_blank_node_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_leading_digit.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_leading_digit.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_leading_digit.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_leading_digit.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_leading_underscore
    // labeled blank node with_leading_underscore (_:_)
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_with_leading_underscorelabeled_blank_node_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_leading_underscore.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_leading_underscore.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_leading_underscore.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_leading_underscore.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // labeled_blank_node_with_non_leading_extras
    // labeled blank node with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdfturtlemanifestttllabeled_blank_node_with_non_leading_extraslabeled_blank_node_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_non_leading_extras.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt"));
        
        Path convertedActionFilePath = Path.of("labeled_blank_node_with_non_leading_extras.ttl");
        Path canonConvertedActionFilePath = Path.of("labeled_blank_node_with_non_leading_extras.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_with_non_leading_extras.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG
    // langtagged LONG """x"""@en
    @Test
    public void rdf11rdfturtlemanifestttllangtagged_longlangtagged_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.nt"));
        
        Path convertedActionFilePath = Path.of("langtagged_LONG.ttl");
        Path canonConvertedActionFilePath = Path.of("langtagged_LONG.ttl");
        Path canonConvertedResultFilePath = Path.of("langtagged_non_LONG.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_LONG_with_subtag
    // langtagged LONG with subtag """Cheers"""@en-UK
    @Test
    public void rdf11rdfturtlemanifestttllangtagged_long_with_subtaglangtagged_long_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG_with_subtag.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG_with_subtag.nt"));
        
        Path convertedActionFilePath = Path.of("langtagged_LONG_with_subtag.ttl");
        Path canonConvertedActionFilePath = Path.of("langtagged_LONG_with_subtag.ttl");
        Path canonConvertedResultFilePath = Path.of("langtagged_LONG_with_subtag.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG_with_subtag.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_LONG_with_subtag.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // langtagged_non_LONG
    // langtagged non-LONG "x"@en
    @Test
    public void rdf11rdfturtlemanifestttllangtagged_non_longlangtagged_non_long() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.nt"));
        
        Path convertedActionFilePath = Path.of("langtagged_non_LONG.ttl");
        Path canonConvertedActionFilePath = Path.of("langtagged_non_LONG.ttl");
        Path canonConvertedResultFilePath = Path.of("langtagged_non_LONG.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/langtagged_non_LONG.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // lantag_with_subtag
    // lantag with subtag "x"@en-us
    @Test
    public void rdf11rdfturtlemanifestttllantag_with_subtaglantag_with_subtag() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/lantag_with_subtag.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/lantag_with_subtag.nt"));
        
        Path convertedActionFilePath = Path.of("lantag_with_subtag.ttl");
        Path canonConvertedActionFilePath = Path.of("lantag_with_subtag.ttl");
        Path canonConvertedResultFilePath = Path.of("lantag_with_subtag.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/lantag_with_subtag.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/lantag_with_subtag.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // last
    // last, not first, non-empty nested collection
    @Test
    public void rdf11rdfturtlemanifestttllastlast() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/last.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/last.nt"));
        
        Path convertedActionFilePath = Path.of("last.ttl");
        Path canonConvertedActionFilePath = Path.of("last.ttl");
        Path canonConvertedResultFilePath = Path.of("last.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/last.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/last.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_false
    // literal false
    @Test
    public void rdf11rdfturtlemanifestttlliteral_falseliteral_false() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_false.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_false.nt"));
        
        Path convertedActionFilePath = Path.of("literal_false.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_false.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_false.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_false.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_false.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_true
    // literal true
    @Test
    public void rdf11rdfturtlemanifestttlliteral_trueliteral_true() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_true.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_true.nt"));
        
        Path convertedActionFilePath = Path.of("literal_true.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_true.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_true.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_true.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_true.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_BACKSPACE
    // literal with BACKSPACE
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_backspaceliteral_with_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_BACKSPACE.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_BACKSPACE.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_BACKSPACE.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CARRIAGE_RETURN
    // literal with CARRIAGE RETURN
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_carriage_returnliteral_with_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_CARRIAGE_RETURN.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_CARRIAGE_RETURN.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_CARRIAGE_RETURN.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_CHARACTER_TABULATION
    // literal with CHARACTER TABULATION
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_character_tabulationliteral_with_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_CHARACTER_TABULATION.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_CHARACTER_TABULATION.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_CHARACTER_TABULATION.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_FORM_FEED
    // literal with FORM FEED
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_form_feedliteral_with_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_FORM_FEED.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_FORM_FEED.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_FORM_FEED.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_LINE_FEED
    // literal with LINE FEED
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_line_feedliteral_with_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_LINE_FEED.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_LINE_FEED.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_LINE_FEED.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_REVERSE_SOLIDUS
    // literal with REVERSE SOLIDUS
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_reverse_solidusliteral_with_reverse_solidus() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_REVERSE_SOLIDUS.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_REVERSE_SOLIDUS.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_REVERSE_SOLIDUS.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_REVERSE_SOLIDUS.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_REVERSE_SOLIDUS.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_REVERSE_SOLIDUS.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_REVERSE_SOLIDUS.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_BACKSPACE
    // literal with escaped BACKSPACE
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_escaped_backspaceliteral_with_escaped_backspace() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_BACKSPACE.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_BACKSPACE.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_BACKSPACE.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_BACKSPACE.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_BACKSPACE.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_BACKSPACE.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CARRIAGE_RETURN
    // literal with escaped CARRIAGE RETURN
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_escaped_carriage_returnliteral_with_escaped_carriage_return() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_CARRIAGE_RETURN.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_CARRIAGE_RETURN.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_CARRIAGE_RETURN.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_CARRIAGE_RETURN.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_CARRIAGE_RETURN.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CARRIAGE_RETURN.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_CHARACTER_TABULATION
    // literal with escaped CHARACTER TABULATION
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_escaped_character_tabulationliteral_with_escaped_character_tabulation() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_CHARACTER_TABULATION.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_CHARACTER_TABULATION.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_CHARACTER_TABULATION.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_CHARACTER_TABULATION.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_CHARACTER_TABULATION.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_CHARACTER_TABULATION.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_FORM_FEED
    // literal with escaped FORM FEED
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_escaped_form_feedliteral_with_escaped_form_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_FORM_FEED.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_FORM_FEED.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_FORM_FEED.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_FORM_FEED.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_FORM_FEED.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_FORM_FEED.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_escaped_LINE_FEED
    // literal with escaped LINE FEED
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_escaped_line_feedliteral_with_escaped_line_feed() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_LINE_FEED.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_escaped_LINE_FEED.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_escaped_LINE_FEED.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_LINE_FEED.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_escaped_LINE_FEED.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_LINE_FEED.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape4
    // literal with numeric escape4 'slash'u
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_numeric_escape4literal_with_numeric_escape4() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_numeric_escape4.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_numeric_escape4.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_numeric_escape4.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // literal_with_numeric_escape8
    // literal with numeric escape8 'slash'u
    @Test
    public void rdf11rdfturtlemanifestttlliteral_with_numeric_escape8literal_with_numeric_escape8() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape8.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.nt"));
        
        Path convertedActionFilePath = Path.of("literal_with_numeric_escape8.ttl");
        Path canonConvertedActionFilePath = Path.of("literal_with_numeric_escape8.ttl");
        Path canonConvertedResultFilePath = Path.of("literal_with_numeric_escape4.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape8.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/literal_with_numeric_escape4.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_assigned_nfc_pn_chars_base_character_boundarieslocalname_with_assigned_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries
    // localName with assigned, NFC-normalized, basic-multilingual-plane PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_assigned_nfc_bmp_pn_chars_base_character_boundarieslocalname_with_assigned_nfc_bmp_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_digit
    // localName with leading digit (p:_)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_leading_digitlocalname_with_leading_digit() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_digit.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_digit.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_leading_digit.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_leading_digit.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_leading_digit.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_digit.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_digit.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_leading_underscore
    // localName with leading underscore (p:_)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_leading_underscorelocalname_with_leading_underscore() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_underscore.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_underscore.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_leading_underscore.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_leading_underscore.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_leading_underscore.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_underscore.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_leading_underscore.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_nfc_PN_CHARS_BASE_character_boundaries
    // localName with nfc-normalize PN CHARS BASE character boundaries (p:AZazÀÖØöø...)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_nfc_pn_chars_base_character_boundarieslocalname_with_nfc_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_nfc_PN_CHARS_BASE_character_boundaries.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_nfc_PN_CHARS_BASE_character_boundaries.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localName_with_non_leading_extras
    // localName with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_non_leading_extraslocalname_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_non_leading_extras.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_non_leading_extras.nt"));
        
        Path convertedActionFilePath = Path.of("localName_with_non_leading_extras.ttl");
        Path canonConvertedActionFilePath = Path.of("localName_with_non_leading_extras.ttl");
        Path canonConvertedResultFilePath = Path.of("localName_with_non_leading_extras.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_non_leading_extras.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localName_with_non_leading_extras.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // localname_with_COLON
    // localname with COLON
    @Test
    public void rdf11rdfturtlemanifestttllocalname_with_colonlocalname_with_colon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localname_with_COLON.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localname_with_COLON.nt"));
        
        Path convertedActionFilePath = Path.of("localname_with_COLON.ttl");
        Path canonConvertedActionFilePath = Path.of("localname_with_COLON.ttl");
        Path canonConvertedResultFilePath = Path.of("localname_with_COLON.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localname_with_COLON.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/localname_with_COLON.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // negative_numeric
    // negative numeric
    @Test
    public void rdf11rdfturtlemanifestttlnegative_numericnegative_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/negative_numeric.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/negative_numeric.nt"));
        
        Path convertedActionFilePath = Path.of("negative_numeric.ttl");
        Path canonConvertedActionFilePath = Path.of("negative_numeric.ttl");
        Path canonConvertedResultFilePath = Path.of("negative_numeric.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/negative_numeric.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/negative_numeric.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_blankNodePropertyLists
    // nested blankNodePropertyLists [ <p1> [ <p2> <o2> ] ; <p3> <o3> ]
    @Test
    public void rdf11rdfturtlemanifestttlnested_blanknodepropertylistsnested_blanknodepropertylists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_blankNodePropertyLists.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_blankNodePropertyLists.nt"));
        
        Path convertedActionFilePath = Path.of("nested_blankNodePropertyLists.ttl");
        Path canonConvertedActionFilePath = Path.of("nested_blankNodePropertyLists.ttl");
        Path canonConvertedResultFilePath = Path.of("nested_blankNodePropertyLists.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_blankNodePropertyLists.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_blankNodePropertyLists.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // nested_collection
    // nested collection (())
    @Test
    public void rdf11rdfturtlemanifestttlnested_collectionnested_collection() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_collection.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_collection.nt"));
        
        Path convertedActionFilePath = Path.of("nested_collection.ttl");
        Path canonConvertedActionFilePath = Path.of("nested_collection.ttl");
        Path canonConvertedResultFilePath = Path.of("nested_collection.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_collection.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/nested_collection.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_PNAME_NS
    // number sign following PNAME_NS
    @Test
    public void rdf11rdfturtlemanifestttlnumber_sign_following_pname_nsnumber_sign_following_pname_ns() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_PNAME_NS.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_PNAME_NS.nt"));
        
        Path convertedActionFilePath = Path.of("number_sign_following_PNAME_NS.ttl");
        Path canonConvertedActionFilePath = Path.of("number_sign_following_PNAME_NS.ttl");
        Path canonConvertedResultFilePath = Path.of("number_sign_following_PNAME_NS.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_PNAME_NS.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_PNAME_NS.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // number_sign_following_localName
    // number sign following localName
    @Test
    public void rdf11rdfturtlemanifestttlnumber_sign_following_localnamenumber_sign_following_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_localName.nt"));
        
        Path convertedActionFilePath = Path.of("number_sign_following_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("number_sign_following_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("number_sign_following_localName.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/number_sign_following_localName.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // numeric_with_leading_0
    // numeric with leading 0
    @Test
    public void rdf11rdfturtlemanifestttlnumeric_with_leading_0numeric_with_leading_0() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/numeric_with_leading_0.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/numeric_with_leading_0.nt"));
        
        Path convertedActionFilePath = Path.of("numeric_with_leading_0.ttl");
        Path canonConvertedActionFilePath = Path.of("numeric_with_leading_0.ttl");
        Path canonConvertedResultFilePath = Path.of("numeric_with_leading_0.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/numeric_with_leading_0.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/numeric_with_leading_0.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // objectList_with_two_objects
    // objectList with two objects … <o1>,<o2>
    @Test
    public void rdf11rdfturtlemanifestttlobjectlist_with_two_objectsobjectlist_with_two_objects() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/objectList_with_two_objects.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/objectList_with_two_objects.nt"));
        
        Path convertedActionFilePath = Path.of("objectList_with_two_objects.ttl");
        Path canonConvertedActionFilePath = Path.of("objectList_with_two_objects.ttl");
        Path canonConvertedResultFilePath = Path.of("objectList_with_two_objects.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/objectList_with_two_objects.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/objectList_with_two_objects.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_base
    // old-style base
    @Test
    public void rdf11rdfturtlemanifestttlold_style_baseold_style_base() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/old_style_base.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("old_style_base.ttl");
        Path canonConvertedActionFilePath = Path.of("old_style_base.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/old_style_base.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // old_style_prefix
    // old-style prefix
    @Test
    public void rdf11rdfturtlemanifestttlold_style_prefixold_style_prefix() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/old_style_prefix.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("old_style_prefix.ttl");
        Path canonConvertedActionFilePath = Path.of("old_style_prefix.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/old_style_prefix.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // percent_escaped_localName
    // percent-escaped local name
    @Test
    public void rdf11rdfturtlemanifestttlpercent_escaped_localnamepercent_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/percent_escaped_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/percent_escaped_localName.nt"));
        
        Path convertedActionFilePath = Path.of("percent_escaped_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("percent_escaped_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("percent_escaped_localName.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/percent_escaped_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/percent_escaped_localName.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // positive_numeric
    // positive numeric
    @Test
    public void rdf11rdfturtlemanifestttlpositive_numericpositive_numeric() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/positive_numeric.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/positive_numeric.nt"));
        
        Path convertedActionFilePath = Path.of("positive_numeric.ttl");
        Path canonConvertedActionFilePath = Path.of("positive_numeric.ttl");
        Path canonConvertedResultFilePath = Path.of("positive_numeric.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/positive_numeric.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/positive_numeric.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // predicateObjectList_with_blankNodePropertyList_as_object
    // predicateObjectList_with_blankNodePropertyList_as_object <s> <p> [ <p2> <o> ] ; <p3> [ <p4> <o2> , <o3> ]
    @Test
    public void rdf11rdfturtlemanifestttlpredicateobjectlist_with_blanknodepropertylist_as_objectpredicateobjectlist_with_blanknodepropertylist_as_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_blankNodePropertyList_as_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_blankNodePropertyList_as_object.nt"));
        
        Path convertedActionFilePath = Path.of("predicateObjectList_with_blankNodePropertyList_as_object.ttl");
        Path canonConvertedActionFilePath = Path.of("predicateObjectList_with_blankNodePropertyList_as_object.ttl");
        Path canonConvertedResultFilePath = Path.of("predicateObjectList_with_blankNodePropertyList_as_object.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_blankNodePropertyList_as_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_blankNodePropertyList_as_object.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // predicateObjectList_with_two_objectLists
    // predicateObjectList with two objectLists … <o1>,<o2>
    @Test
    public void rdf11rdfturtlemanifestttlpredicateobjectlist_with_two_objectlistspredicateobjectlist_with_two_objectlists() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.nt"));
        
        Path convertedActionFilePath = Path.of("predicateObjectList_with_two_objectLists.ttl");
        Path canonConvertedActionFilePath = Path.of("predicateObjectList_with_two_objectLists.ttl");
        Path canonConvertedResultFilePath = Path.of("predicateObjectList_with_two_objectLists.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_only_IRI
    // prefix-only IRI (p:)
    @Test
    public void rdf11rdfturtlemanifestttlprefix_only_iriprefix_only_iri() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_only_IRI.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("prefix_only_IRI.ttl");
        Path canonConvertedActionFilePath = Path.of("prefix_only_IRI.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_only_IRI.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_reassigned_and_used
    // prefix reassigned and used
    @Test
    public void rdf11rdfturtlemanifestttlprefix_reassigned_and_usedprefix_reassigned_and_used() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_reassigned_and_used.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_reassigned_and_used.nt"));
        
        Path convertedActionFilePath = Path.of("prefix_reassigned_and_used.ttl");
        Path canonConvertedActionFilePath = Path.of("prefix_reassigned_and_used.ttl");
        Path canonConvertedResultFilePath = Path.of("prefix_reassigned_and_used.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_reassigned_and_used.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_reassigned_and_used.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_PN_CHARS_BASE_character_boundaries
    // prefix with PN CHARS BASE character boundaries (prefix: AZazÀÖØöø...:)
    @Test
    public void rdf11rdfturtlemanifestttlprefix_with_pn_chars_base_character_boundariesprefix_with_pn_chars_base_character_boundaries() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_with_PN_CHARS_BASE_character_boundaries.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("prefix_with_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedActionFilePath = Path.of("prefix_with_PN_CHARS_BASE_character_boundaries.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_with_PN_CHARS_BASE_character_boundaries.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefix_with_non_leading_extras
    // prefix with_non_leading_extras (_:a·̀ͯ‿.⁀)
    @Test
    public void rdf11rdfturtlemanifestttlprefix_with_non_leading_extrasprefix_with_non_leading_extras() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_with_non_leading_extras.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("prefix_with_non_leading_extras.ttl");
        Path canonConvertedActionFilePath = Path.of("prefix_with_non_leading_extras.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefix_with_non_leading_extras.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_object
    // prefixed IRI object
    @Test
    public void rdf11rdfturtlemanifestttlprefixed_iri_objectprefixed_iri_object() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_IRI_object.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("prefixed_IRI_object.ttl");
        Path canonConvertedActionFilePath = Path.of("prefixed_IRI_object.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_IRI_object.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_IRI_predicate
    // prefixed IRI predicate
    @Test
    public void rdf11rdfturtlemanifestttlprefixed_iri_predicateprefixed_iri_predicate() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_IRI_predicate.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt"));
        
        Path convertedActionFilePath = Path.of("prefixed_IRI_predicate.ttl");
        Path canonConvertedActionFilePath = Path.of("prefixed_IRI_predicate.ttl");
        Path canonConvertedResultFilePath = Path.of("IRI_spo.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_IRI_predicate.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRI_spo.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // prefixed_name_datatype
    // prefixed name datatype ""^^p:t
    @Test
    public void rdf11rdfturtlemanifestttlprefixed_name_datatypeprefixed_name_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_name_datatype.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt"));
        
        Path convertedActionFilePath = Path.of("prefixed_name_datatype.ttl");
        Path canonConvertedActionFilePath = Path.of("prefixed_name_datatype.ttl");
        Path canonConvertedResultFilePath = Path.of("IRIREF_datatype.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/prefixed_name_datatype.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/IRIREF_datatype.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_at_end
    // repeated semis at end <s> <p> <o> ;; <p2> <o2> .
    @Test
    public void rdf11rdfturtlemanifestttlrepeated_semis_at_endrepeated_semis_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_at_end.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.nt"));
        
        Path convertedActionFilePath = Path.of("repeated_semis_at_end.ttl");
        Path canonConvertedActionFilePath = Path.of("repeated_semis_at_end.ttl");
        Path canonConvertedResultFilePath = Path.of("predicateObjectList_with_two_objectLists.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_at_end.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/predicateObjectList_with_two_objectLists.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // repeated_semis_not_at_end
    // repeated semis not at end <s> <p> <o> ;;.
    @Test
    public void rdf11rdfturtlemanifestttlrepeated_semis_not_at_endrepeated_semis_not_at_end() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_not_at_end.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_not_at_end.nt"));
        
        Path convertedActionFilePath = Path.of("repeated_semis_not_at_end.ttl");
        Path canonConvertedActionFilePath = Path.of("repeated_semis_not_at_end.ttl");
        Path canonConvertedResultFilePath = Path.of("repeated_semis_not_at_end.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_not_at_end.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/repeated_semis_not_at_end.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // reserved_escaped_localName
    // reserved-escaped local name
    @Test
    public void rdf11rdfturtlemanifestttlreserved_escaped_localnamereserved_escaped_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/reserved_escaped_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/reserved_escaped_localName.nt"));
        
        Path convertedActionFilePath = Path.of("reserved_escaped_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("reserved_escaped_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("reserved_escaped_localName.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/reserved_escaped_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/reserved_escaped_localName.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // sole_blankNodePropertyList
    // sole blankNodePropertyList [ <p> <o> ] .
    @Test
    public void rdf11rdfturtlemanifestttlsole_blanknodepropertylistsole_blanknodepropertylist() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/sole_blankNodePropertyList.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt"));
        
        Path convertedActionFilePath = Path.of("sole_blankNodePropertyList.ttl");
        Path canonConvertedActionFilePath = Path.of("sole_blankNodePropertyList.ttl");
        Path canonConvertedResultFilePath = Path.of("labeled_blank_node_subject.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/sole_blankNodePropertyList.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/labeled_blank_node_subject.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-bad-01
    // Bad IRI : good escape, bad charcater (negative evaluation test)
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalbad01turtleevalbad01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-bad-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-eval-bad-02
    // Bad IRI : hex 3C is < (negative evaluation test)
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalbad02turtleevalbad02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-bad-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-eval-bad-03
    // Bad IRI : hex 3E is  (negative evaluation test)
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalbad03turtleevalbad03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-bad-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-eval-bad-04
    // Bad IRI : {abc} (negative evaluation test)
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalbad04turtleevalbad04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-bad-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-eval-lists-01
    // empty list
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists01turtleevallists01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-01.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-01.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-01.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-01.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-01.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-01.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-01.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-lists-02
    // mixed list
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists02turtleevallists02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-02.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-02.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-02.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-02.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-02.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-02.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-02.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-lists-03
    // isomorphic list as subject and object
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists03turtleevallists03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-03.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-03.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-03.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-03.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-03.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-03.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-03.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-lists-04
    // lists of lists
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists04turtleevallists04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-04.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-04.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-04.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-04.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-04.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-04.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-04.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-lists-05
    // mixed lists with embedded lists
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists05turtleevallists05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-05.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-05.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-05.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-05.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-05.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-05.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-05.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-lists-06
    // list containing blank node with abbreviated term
    @Test
    public void rdf11rdfturtlemanifestttlturtleevallists06turtleevallists06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-06.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-06.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-lists-06.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-lists-06.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-lists-06.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-06.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-lists-06.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-struct-01
    // triple with IRIs
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalstruct01turtleevalstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-01.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-01.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-struct-01.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-struct-01.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-struct-01.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-01.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-01.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-eval-struct-02
    // triple with IRIs and embedded whitespace
    @Test
    public void rdf11rdfturtlemanifestttlturtleevalstruct02turtleevalstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-02.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-02.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-eval-struct-02.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-eval-struct-02.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-eval-struct-02.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-02.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-eval-struct-02.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-01
    // Blank subject
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm01turtlesubm01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-01.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-01.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-01.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-01.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-01.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-01.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-01.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-02
    // @prefix and qnames
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm02turtlesubm02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-02.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-02.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-02.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-02.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-02.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-02.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-02.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-03
    // , operator
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm03turtlesubm03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-03.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-03.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-03.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-03.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-03.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-03.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-03.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-04
    // ; operator
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm04turtlesubm04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-04.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-04.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-04.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-04.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-04.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-04.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-04.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-05
    // empty [] as subject and object
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm05turtlesubm05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-05.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-05.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-05.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-05.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-05.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-05.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-05.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-06
    // non-empty [] as subject and object
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm06turtlesubm06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-06.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-06.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-06.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-06.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-06.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-06.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-06.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-07
    // 'a' as predicate
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm07turtlesubm07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-07.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-07.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-07.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-07.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-07.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-07.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-07.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-08
    // simple collection
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm08turtlesubm08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-08.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-08.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-08.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-08.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-08.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-08.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-08.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-09
    // empty collection
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm09turtlesubm09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-09.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-09.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-09.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-09.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-09.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-09.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-09.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-10
    // integer datatyped literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm10turtlesubm10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-10.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-10.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-10.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-10.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-10.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-10.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-10.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-11
    // decimal integer canonicalization
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm11turtlesubm11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-11.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-11.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-11.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-11.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-11.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-11.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-11.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-12
    // - and _ in names and qnames
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm12turtlesubm12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-12.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-12.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-12.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-12.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-12.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-12.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-12.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-13
    // tests for rdf:_<numbers> and other qnames starting with _
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm13turtlesubm13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-13.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-13.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-13.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-13.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-13.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-13.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-13.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-14
    // bare : allowed
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm14turtlesubm14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-14.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-14.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-14.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-14.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-14.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-14.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-14.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-15
    // simple long literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm15turtlesubm15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-15.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-15.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-15.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-15.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-15.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-15.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-15.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-16
    // long literals with escapes
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm16turtlesubm16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-16.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-16.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-16.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-16.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-16.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-16.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-16.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-17
    // floating point number
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm17turtlesubm17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-17.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-17.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-17.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-17.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-17.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-17.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-17.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-18
    // empty literals, normal and long variant
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm18turtlesubm18() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-18.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-18.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-18.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-18.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-18.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-18.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-18.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-19
    // positive integer, decimal and doubles
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm19turtlesubm19() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-19.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-19.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-19.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-19.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-19.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-19.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-19.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-20
    // negative integer, decimal and doubles
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm20turtlesubm20() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-20.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-20.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-20.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-20.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-20.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-20.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-20.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-21
    // long literal ending in double quote
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm21turtlesubm21() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-21.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-21.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-21.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-21.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-21.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-21.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-21.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-22
    // boolean literals
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm22turtlesubm22() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-22.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-22.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-22.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-22.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-22.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-22.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-22.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-23
    // comments
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm23turtlesubm23() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-23.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-23.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-23.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-23.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-23.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-23.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-23.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-24
    // no final mewline
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm24turtlesubm24() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-24.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-24.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-24.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-24.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-24.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-24.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-24.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-25
    // repeating a @prefix changes pname definition
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm25turtlesubm25() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-25.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-25.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-25.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-25.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-25.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-25.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-25.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-26
    // Variations on decimal canonicalization
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm26turtlesubm26() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-26.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-26.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-26.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-26.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-26.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-26.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-26.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-subm-27
    // Repeating @base changes base for relative IRI lookup
    @Test
    public void rdf11rdfturtlemanifestttlturtlesubm27turtlesubm27() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-27.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-27.nt"));
        
        Path convertedActionFilePath = Path.of("turtle-subm-27.ttl");
        Path canonConvertedActionFilePath = Path.of("turtle-subm-27.ttl");
        Path canonConvertedResultFilePath = Path.of("turtle-subm-27.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-27.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-subm-27.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // turtle-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadliteral2_with_langtag_and_datatypeturtlesyntaxbadliteral2_with_langtag_and_datatype() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-LITERAL2_with_langtag_and_datatype.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-base-01
    // @base without URI (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadbase01turtlesyntaxbadbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-base-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-base-02
    // @base in wrong case (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadbase02turtlesyntaxbadbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-base-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-base-03
    // BASE without URI (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadbase03turtlesyntaxbadbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-base-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-blank-label-dot-end
    // Blank node label must not end in dot
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadblanklabeldotendturtlesyntaxbadblanklabeldotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-blank-label-dot-end.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-bnode-01
    // Colon in bnode label not allowed (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadbnode01turtlesyntaxbadbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-bnode-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-bnode-02
    // Colon in bnode label not allowed (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadbnode02turtlesyntaxbadbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-bnode-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "ntriples",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-esc-01
    // Bad string escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadesc01turtlesyntaxbadesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-esc-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-esc-02
    // Bad string escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadesc02turtlesyntaxbadesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-esc-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-esc-03
    // Bad string escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadesc03turtlesyntaxbadesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-esc-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-esc-04
    // Bad string escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadesc04turtlesyntaxbadesc04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-esc-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-kw-01
    // 'A' is not a keyword (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadkw01turtlesyntaxbadkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-kw-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-kw-02
    // 'a' cannot be used as subject (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadkw02turtlesyntaxbadkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-kw-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-kw-03
    // 'a' cannot be used as object (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadkw03turtlesyntaxbadkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-kw-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-kw-04
    // 'true' cannot be used as subject (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadkw04turtlesyntaxbadkw04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-kw-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-kw-05
    // 'true' cannot be used as object (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadkw05turtlesyntaxbadkw05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-kw-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-lang-01
    // langString with bad lang (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadlang01turtlesyntaxbadlang01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-lang-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-ln-dash-start
    // Local name must not begin with dash
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadlndashstartturtlesyntaxbadlndashstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-ln-dash-start.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-ln-escape
    // Bad hex escape in local name
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadlnescapeturtlesyntaxbadlnescape() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-ln-escape.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-ln-escape-start
    // Bad hex escape at start of local name
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadlnescapestartturtlesyntaxbadlnescapestart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-ln-escape-start.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-missing-ns-dot-end
    // Prefix must not end in dot (error in triple, not prefix directive like turtle-syntax-bad-ns-dot-end)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadmissingnsdotendturtlesyntaxbadmissingnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-missing-ns-dot-end.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-missing-ns-dot-start
    // Prefix must not start with dot (error in triple, not prefix directive like turtle-syntax-bad-ns-dot-end)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadmissingnsdotstartturtlesyntaxbadmissingnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-missing-ns-dot-start.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-01
    // {} fomulae not in Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras01turtlesyntaxbadn3extras01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-02
    // = is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras02turtlesyntaxbadn3extras02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-03
    // N3 paths not in Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras03turtlesyntaxbadn3extras03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-04
    // N3 paths not in Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras04turtlesyntaxbadn3extras04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-05
    // N3 is...of not in Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras05turtlesyntaxbadn3extras05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-06
    // N3 paths not in Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras06turtlesyntaxbadn3extras06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-07
    // @keywords is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras07turtlesyntaxbadn3extras07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-08
    // @keywords is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras08turtlesyntaxbadn3extras08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-09
    // => is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras09turtlesyntaxbadn3extras09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-10
    // <= is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras10turtlesyntaxbadn3extras10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-10.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-11
    // @forSome is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras11turtlesyntaxbadn3extras11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-11.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-12
    // @forAll is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras12turtlesyntaxbadn3extras12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-12.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-n3-extras-13
    // @keywords is not Turtle (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadn3extras13turtlesyntaxbadn3extras13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-n3-extras-13.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-ns-dot-end
    // Prefix must not end in dot
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnsdotendturtlesyntaxbadnsdotend() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-ns-dot-end.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-ns-dot-start
    // Prefix must not start with dot
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnsdotstartturtlesyntaxbadnsdotstart() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-ns-dot-start.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-num-01
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnum01turtlesyntaxbadnum01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-num-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-num-02
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnum02turtlesyntaxbadnum02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-num-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-num-03
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnum03turtlesyntaxbadnum03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-num-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-num-04
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnum04turtlesyntaxbadnum04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-num-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-num-05
    // Bad number format (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnum05turtlesyntaxbadnum05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-num-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-number-dot-in-anon
    // Dot delimeter may not appear in anonymous nodes
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadnumberdotinanonturtlesyntaxbadnumberdotinanon() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-number-dot-in-anon.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-pname-01
    // '~' must be escaped in pname (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadpname01turtlesyntaxbadpname01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-pname-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-pname-02
    // Bad %-sequence in pname (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadpname02turtlesyntaxbadpname02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-pname-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-pname-03
    // Bad unicode escape in pname (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadpname03turtlesyntaxbadpname03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-pname-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-prefix-01
    // No prefix (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadprefix01turtlesyntaxbadprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-prefix-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-prefix-02
    // No prefix (2) (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadprefix02turtlesyntaxbadprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-prefix-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-prefix-03
    // @prefix without URI (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadprefix03turtlesyntaxbadprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-prefix-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-prefix-04
    // @prefix without prefix name (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadprefix04turtlesyntaxbadprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-prefix-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-prefix-05
    // @prefix without ':' (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadprefix05turtlesyntaxbadprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-prefix-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-01
    // mismatching string literal open/close (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring01turtlesyntaxbadstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-02
    // mismatching string literal open/close (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring02turtlesyntaxbadstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-03
    // mismatching string literal long/short (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring03turtlesyntaxbadstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-04
    // mismatching long string literal open/close (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring04turtlesyntaxbadstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-05
    // Long literal with missing end (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring05turtlesyntaxbadstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-06
    // Long literal with extra quote (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring06turtlesyntaxbadstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-string-07
    // Long literal with extra squote (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstring07turtlesyntaxbadstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-string-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-01
    // Turtle is not TriG (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct01turtlesyntaxbadstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-02
    // Turtle is not N3 (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct02turtlesyntaxbadstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-03
    // Turtle is not NQuads (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct03turtlesyntaxbadstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-04
    // Turtle does not allow literals-as-subjects (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct04turtlesyntaxbadstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-05
    // Turtle does not allow literals-as-predicates (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct05turtlesyntaxbadstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-06
    // Turtle does not allow bnodes-as-predicates (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct06turtlesyntaxbadstruct06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-07
    // Turtle does not allow labeled bnodes-as-predicates (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct07turtlesyntaxbadstruct07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-08
    // missing '.' (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct08turtlesyntaxbadstruct08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-09
    // extra '.' (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct09turtlesyntaxbadstruct09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-10
    // extra '.' (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct10turtlesyntaxbadstruct10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-10.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-11
    // trailing ';' no '.' (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct11turtlesyntaxbadstruct11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-11.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-12
    // subject, predicate, no object (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct12turtlesyntaxbadstruct12() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-12.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-13
    // subject, predicate, no object (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct13turtlesyntaxbadstruct13() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-13.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-14
    // literal as subject (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct14turtlesyntaxbadstruct14() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-14.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-15
    // literal as predicate (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct15turtlesyntaxbadstruct15() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-15.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-16
    // bnode as predicate (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct16turtlesyntaxbadstruct16() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-16.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-struct-17
    // labeled bnode as predicate (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbadstruct17turtlesyntaxbadstruct17() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-struct-17.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-uri-01
    // Bad IRI : space (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbaduri01turtlesyntaxbaduri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-uri-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-uri-02
    // Bad IRI : bad escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbaduri02turtlesyntaxbaduri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-uri-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-uri-03
    // Bad IRI : bad long escape (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbaduri03turtlesyntaxbaduri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-uri-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-uri-04
    // Bad IRI : character escapes not allowed (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbaduri04turtlesyntaxbaduri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-uri-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-bad-uri-05
    // Bad IRI : character escapes not allowed (2) (negative test)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbaduri05turtlesyntaxbaduri05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bad-uri-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertNotEquals(0, command.waitFor());
    }

    // turtle-syntax-base-01
    // @base
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbase01turtlesyntaxbase01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-base-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-base-02
    // BASE
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbase02turtlesyntaxbase02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-base-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-base-03
    // @base with relative IRIs
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbase03turtlesyntaxbase03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-base-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-base-04
    // base with relative IRIs
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbase04turtlesyntaxbase04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-base-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-blank-label
    // Characters allowed in blank node labels
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxblanklabelturtlesyntaxblanklabel() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-blank-label.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-01
    // bnode subject
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode01turtlesyntaxbnode01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-02
    // bnode object
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode02turtlesyntaxbnode02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-03
    // bnode property list object
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode03turtlesyntaxbnode03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-04
    // bnode property list object (2)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode04turtlesyntaxbnode04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-05
    // bnode property list subject
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode05turtlesyntaxbnode05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-06
    // labeled bnode subject
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode06turtlesyntaxbnode06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-07
    // labeled bnode subject and object
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode07turtlesyntaxbnode07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-08
    // bare bnode property list
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode08turtlesyntaxbnode08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-09
    // bnode property list
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode09turtlesyntaxbnode09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-bnode-10
    // mixed bnode property list and triple
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxbnode10turtlesyntaxbnode10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-bnode-10.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-datatypes-01
    // xsd:byte literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxdatatypes01turtlesyntaxdatatypes01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-datatypes-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-datatypes-02
    // integer as xsd:string
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxdatatypes02turtlesyntaxdatatypes02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-datatypes-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-file-01
    // Empty file
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxfile01turtlesyntaxfile01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-file-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-file-02
    // Only comment
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxfile02turtlesyntaxfile02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-file-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-file-03
    // One comment, one empty line
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxfile03turtlesyntaxfile03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-file-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-kw-01
    // boolean literal (true)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxkw01turtlesyntaxkw01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-kw-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-kw-02
    // boolean literal (false)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxkw02turtlesyntaxkw02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-kw-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-kw-03
    // 'a' as keyword
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxkw03turtlesyntaxkw03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-kw-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-ln-colons
    // Colons in pname local names
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxlncolonsturtlesyntaxlncolons() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-ln-colons.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-ln-dots
    // Dots in pname local names
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxlndotsturtlesyntaxlndots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-ln-dots.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-ns-dots
    // Dots in namespace names
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnsdotsturtlesyntaxnsdots() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-ns-dots.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-01
    // integer literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber01turtlesyntaxnumber01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-02
    // negative integer literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber02turtlesyntaxnumber02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-03
    // positive integer literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber03turtlesyntaxnumber03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-04
    // decimal literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber04turtlesyntaxnumber04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-05
    // decimal literal (no leading digits)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber05turtlesyntaxnumber05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-06
    // negative decimal literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber06turtlesyntaxnumber06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-07
    // positive decimal literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber07turtlesyntaxnumber07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-08
    // integer literal with decimal lexical confusion
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber08turtlesyntaxnumber08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-09
    // double literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber09turtlesyntaxnumber09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-10
    // negative double literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber10turtlesyntaxnumber10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-10.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-number-11
    // double literal no fraction
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxnumber11turtlesyntaxnumber11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-number-11.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-pname-esc-01
    // pname with back-slash escapes
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxpnameesc01turtlesyntaxpnameesc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-pname-esc-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-pname-esc-02
    // pname with back-slash escapes (2)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxpnameesc02turtlesyntaxpnameesc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-pname-esc-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-pname-esc-03
    // pname with back-slash escapes (3)
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxpnameesc03turtlesyntaxpnameesc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-pname-esc-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-01
    // @prefix
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix01turtlesyntaxprefix01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-02
    // PreFIX
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix02turtlesyntaxprefix02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-03
    // Empty PREFIX
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix03turtlesyntaxprefix03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-04
    // Empty @prefix with % escape
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix04turtlesyntaxprefix04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-05
    // @prefix with no suffix
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix05turtlesyntaxprefix05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-06
    // colon is a legal pname character
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix06turtlesyntaxprefix06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-07
    // dash is a legal pname character
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix07turtlesyntaxprefix07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-08
    // underscore is a legal pname character
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix08turtlesyntaxprefix08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-prefix-09
    // percents in pnames
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxprefix09turtlesyntaxprefix09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-prefix-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-str-esc-01
    // string literal with escaped newline
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstresc01turtlesyntaxstresc01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-str-esc-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-str-esc-02
    // string literal with Unicode escape
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstresc02turtlesyntaxstresc02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-str-esc-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-str-esc-03
    // string literal with long Unicode escape
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstresc03turtlesyntaxstresc03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-str-esc-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-01
    // string literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring01turtlesyntaxstring01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-02
    // langString literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring02turtlesyntaxstring02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-03
    // langString literal with region
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring03turtlesyntaxstring03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-04
    // squote string literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring04turtlesyntaxstring04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-05
    // squote langString literal
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring05turtlesyntaxstring05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-06
    // squote langString literal with region
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring06turtlesyntaxstring06() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-06.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-07
    // long string literal with embedded single- and double-quotes
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring07turtlesyntaxstring07() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-07.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-08
    // long string literal with embedded newline
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring08turtlesyntaxstring08() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-08.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-09
    // squote long string literal with embedded single- and double-quotes
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring09turtlesyntaxstring09() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-09.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-10
    // long langString literal with embedded newline
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring10turtlesyntaxstring10() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-10.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-string-11
    // squote long langString literal with embedded newline
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstring11turtlesyntaxstring11() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-string-11.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-struct-01
    // object list
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstruct01turtlesyntaxstruct01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-struct-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-struct-02
    // predicate list with object list
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstruct02turtlesyntaxstruct02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-struct-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-struct-03
    // predicate list with object list and dangling ';'
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstruct03turtlesyntaxstruct03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-struct-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-struct-04
    // predicate list with multiple ;;
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstruct04turtlesyntaxstruct04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-struct-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-struct-05
    // predicate list with multiple ;;
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxstruct05turtlesyntaxstruct05() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-struct-05.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-uri-01
    // Only IRIs
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxuri01turtlesyntaxuri01() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-uri-01.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-uri-02
    // IRIs with Unicode escape
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxuri02turtlesyntaxuri02() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-uri-02.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-uri-03
    // IRIs with long Unicode escape
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxuri03turtlesyntaxuri03() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-uri-03.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // turtle-syntax-uri-04
    // Legal IRIs
    @Test
    public void rdf11rdfturtlemanifestttlturtlesyntaxuri04turtlesyntaxuri04() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/turtle-syntax-uri-04.ttl"));
        Process command = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "sparql",
                "-i", localActionFile.toString(),
                "-if", "turtle",
                "-of", "csv",
                "-q", "src/test/resources/sparqlSelectBasic.rq")
            .start();
        assertEquals(0, command.waitFor());
    }

    // two_LITERAL_LONG2s
    // two LITERAL_LONG2s testing quote delimiter overrun
    @Test
    public void rdf11rdfturtlemanifestttltwo_literal_long2stwo_literal_long2s() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/two_LITERAL_LONG2s.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/two_LITERAL_LONG2s.nt"));
        
        Path convertedActionFilePath = Path.of("two_LITERAL_LONG2s.ttl");
        Path canonConvertedActionFilePath = Path.of("two_LITERAL_LONG2s.ttl");
        Path canonConvertedResultFilePath = Path.of("two_LITERAL_LONG2s.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/two_LITERAL_LONG2s.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/two_LITERAL_LONG2s.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

    // underscore_in_localName
    // underscore in local name
    @Test
    public void rdf11rdfturtlemanifestttlunderscore_in_localnameunderscore_in_localname() throws IOException, NoSuchAlgorithmException, InterruptedException {
        // Load action file
        Path localActionFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/underscore_in_localName.ttl"));
        Path localResultFile = TestFileManager.getLocalFilePath(URI.create("https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/underscore_in_localName.nt"));
        
        Path convertedActionFilePath = Path.of("underscore_in_localName.ttl");
        Path canonConvertedActionFilePath = Path.of("underscore_in_localName.ttl");
        Path canonConvertedResultFilePath = Path.of("underscore_in_localName.nt");

        // Converting the action file
        Process actionConversionCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "convert",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/underscore_in_localName.ttl",
                "-if", "turtle",
                "-of", "ntriples",
                "-o", convertedActionFilePath.toString())
            .start();
        int actionConversionExitCode = actionConversionCommand.waitFor();

        // Canonicalization of the given result file
        Process resultCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", "https://w3c.github.io/rdf-tests/rdf/rdf11/rdf-turtle/underscore_in_localName.nt",
                "-if", "ntriples",
                "-o", canonConvertedResultFilePath.toString())
            .start();
        int resultCanonicalizationExitCode = resultCanonicalizationCommand.waitFor();

        // Canonicalization of the conversion result file
        Process convertedActionCanonicalizationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "canonicalize",
                "-i", convertedActionFilePath.toString(),
                "-if", "ntriples",
                "-o", canonConvertedActionFilePath.toString())
            .start();
        int convertedActionCanonicalizationExitCode = convertedActionCanonicalizationCommand.waitFor();

        // Comparison of the content of the file
        boolean comparisonResult = TestUtils.compareFilesLineByLine(canonConvertedActionFilePath, canonConvertedResultFilePath);

        assertEquals(0, resultCanonicalizationExitCode);
        assertEquals(0, actionConversionExitCode);
        assertEquals(0, convertedActionCanonicalizationExitCode);
        assertTrue(comparisonResult);
    }

}