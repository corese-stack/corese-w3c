package fr.inria.corese.w3c.shacl;

import fr.inria.corese.core.Graph;
import fr.inria.corese.core.GraphStore;
import fr.inria.corese.core.load.Load;
import fr.inria.corese.core.load.LoadException;
import fr.inria.corese.core.query.QueryProcess;
import fr.inria.corese.core.sparql.exceptions.EngineException;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestFileManager;
import fr.inria.corese.w3cJunitTestsGenerator.w3cTests.TestUtils;
import org.junit.AssumptionViolatedException;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Auto-generated JUnit test file for the W3C test suite: https://raw.githubusercontent.com/w3c/data-shapes/refs/heads/gh-pages/data-shapes-test-suite/tests/manifest.ttl
 * This file was automatically generated by JUnitTestFileGenerator.java.
 * Generation date: 2024-10-21, Time: 14:54:28 Europe/Paris
 */
public class shaclTest {

    private static final String TEST_REPORT_FILE = Paths.get(System.getProperty("user.dir")).resolve("test/java/fr/inria/corese/w3c/shacl/testReport.csv").toString();
    private static final String MANIFEST_URI = "https://raw.githubusercontent.com/w3c/data-shapes/refs/heads/gh-pages/data-shapes-test-suite/tests/manifest";
    private static final String EARL = "http://www.w3.org/ns/earl#";

    /**
     * Writes the test report to the file testReport.csv.
     *
     * @param testName The name of the test.
     * @param success  The status of the test.
     */
    private void writeTestReport(String testName, String success) {
        try {
            Path testReportPath = Paths.get(TEST_REPORT_FILE);
            Files.createDirectories(testReportPath.getParent());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssXXX");
            Files.write(testReportPath, (MANIFEST_URI + "#" + testName + "," + dtf.format(ZonedDateTime.now()) + "," + EARL + success + "\n").getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Rule
    public TestWatcher watcher = new TestWatcher() {

        @Override
        protected void failed(Throwable e, Description description) {
            writeTestReport(description.getMethodName(), "failed");
        }

        @Override
        protected void succeeded(Description description) {
            writeTestReport(description.getMethodName(), "passed");
        }

        @Override
        protected void skipped(AssumptionViolatedException e, Description description) {
            writeTestReport(description.getMethodName(), "untested");
        }
    };

        // Create and clear the test report file
        @BeforeClass
        public static void createTestReportFile() {
            try {
                Path testReportPath = Paths.get(TEST_REPORT_FILE);
                Files.createDirectories(testReportPath.getParent());
                Files.write(testReportPath, "".getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    // corecomplexpersonexample
    @Test
    public void corecomplexpersonexample() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/complex/personexample.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/complex/personexample.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corecomplexpersonexampleReport.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/complex/personexample.ttl",
                "-s", "src/test/resources/core/complex/personexample.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/complex/personexample.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corecomplexshaclshacl
    @Test
    public void corecomplexshaclshacl() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/complex/shacl-shacl-data-shapes.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/complex/shacl-shacl-data-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corecomplexshaclshaclReport.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/complex/shacl-shacl-data-shapes.ttl",
                "-s", "src/test/resources/core/complex/shacl-shacl-data-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        QueryProcess exec = QueryProcess.create(resultGraph);
        boolean checkIfValidationIsSuccessfull = ! exec.query(TestUtils.generateSHACLSuccessfullValidationReport()).isEmpty();
        assertTrue(checkIfValidationIsSuccessfull);
    }

    // coremiscdeactivated001
    @Test
    public void coremiscdeactivated001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/deactivated-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/deactivated-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coremiscdeactivated001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/misc/deactivated-001.ttl",
                "-s", "src/test/resources/core/misc/deactivated-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        QueryProcess exec = QueryProcess.create(resultGraph);
        boolean checkIfValidationIsSuccessfull = ! exec.query(TestUtils.generateSHACLSuccessfullValidationReport()).isEmpty();
        assertTrue(checkIfValidationIsSuccessfull);
    }

    // coremiscdeactivated002
    @Test
    public void coremiscdeactivated002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/deactivated-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/deactivated-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coremiscdeactivated002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/misc/deactivated-002.ttl",
                "-s", "src/test/resources/core/misc/deactivated-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/misc/deactivated-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coremiscmessage001
    // Note: This test verifies that the sh:message is copied into sh:resultMessage.   		To pass this test, the test harness needs to preserve all sh:resultMessage triples   		that are mentioned in the 'expected' results graph.
    @Test
    public void coremiscmessage001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/message-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/message-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coremiscmessage001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/misc/message-001.ttl",
                "-s", "src/test/resources/core/misc/message-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/misc/message-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coremiscseverity001
    @Test
    public void coremiscseverity001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/severity-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/severity-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coremiscseverity001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/misc/severity-001.ttl",
                "-s", "src/test/resources/core/misc/severity-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/misc/severity-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coremiscseverity002
    @Test
    public void coremiscseverity002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/severity-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/misc/severity-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coremiscseverity002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/misc/severity-002.ttl",
                "-s", "src/test/resources/core/misc/severity-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/misc/severity-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeand001
    @Test
    public void corenodeand001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/and-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/and-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeand001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/and-001.ttl",
                "-s", "src/test/resources/core/node/and-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/and-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeand002
    @Test
    public void corenodeand002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/and-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/and-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeand002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/and-002.ttl",
                "-s", "src/test/resources/core/node/and-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/and-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeclass001
    @Test
    public void corenodeclass001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeclass001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/class-001.ttl",
                "-s", "src/test/resources/core/node/class-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/class-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeclass002
    @Test
    public void corenodeclass002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeclass002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/class-002.ttl",
                "-s", "src/test/resources/core/node/class-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/class-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeclass003
    @Test
    public void corenodeclass003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/class-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeclass003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/class-003.ttl",
                "-s", "src/test/resources/core/node/class-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/class-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeclosed001
    @Test
    public void corenodeclosed001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/closed-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/closed-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeclosed001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/closed-001.ttl",
                "-s", "src/test/resources/core/node/closed-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/closed-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeclosed002
    @Test
    public void corenodeclosed002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/closed-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/closed-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeclosed002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/closed-002.ttl",
                "-s", "src/test/resources/core/node/closed-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/closed-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodedatatype001
    @Test
    public void corenodedatatype001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/datatype-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/datatype-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodedatatype001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/datatype-001.ttl",
                "-s", "src/test/resources/core/node/datatype-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/datatype-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodedatatype002
    @Test
    public void corenodedatatype002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/datatype-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/datatype-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodedatatype002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/datatype-002.ttl",
                "-s", "src/test/resources/core/node/datatype-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/datatype-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodedisjoint001
    @Test
    public void corenodedisjoint001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/disjoint-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/disjoint-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodedisjoint001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/disjoint-001.ttl",
                "-s", "src/test/resources/core/node/disjoint-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/disjoint-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeequals001
    @Test
    public void corenodeequals001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/equals-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/equals-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeequals001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/equals-001.ttl",
                "-s", "src/test/resources/core/node/equals-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/equals-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodehasvalue001
    @Test
    public void corenodehasvalue001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/hasValue-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/hasValue-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodehasvalue001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/hasValue-001.ttl",
                "-s", "src/test/resources/core/node/hasValue-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/hasValue-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodein001
    @Test
    public void corenodein001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/in-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/in-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodein001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/in-001.ttl",
                "-s", "src/test/resources/core/node/in-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/in-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodelanguagein001
    @Test
    public void corenodelanguagein001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/languageIn-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/languageIn-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodelanguagein001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/languageIn-001.ttl",
                "-s", "src/test/resources/core/node/languageIn-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/languageIn-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemaxexclusive001
    @Test
    public void corenodemaxexclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxExclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxExclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemaxexclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/maxExclusive-001.ttl",
                "-s", "src/test/resources/core/node/maxExclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/maxExclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemaxinclusive001
    @Test
    public void corenodemaxinclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxInclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxInclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemaxinclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/maxInclusive-001.ttl",
                "-s", "src/test/resources/core/node/maxInclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/maxInclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemaxlength001
    @Test
    public void corenodemaxlength001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxLength-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/maxLength-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemaxlength001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/maxLength-001.ttl",
                "-s", "src/test/resources/core/node/maxLength-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/maxLength-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeminexclusive001
    @Test
    public void corenodeminexclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minExclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minExclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeminexclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/minExclusive-001.ttl",
                "-s", "src/test/resources/core/node/minExclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/minExclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemininclusive001
    @Test
    public void corenodemininclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemininclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/minInclusive-001.ttl",
                "-s", "src/test/resources/core/node/minInclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/minInclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemininclusive002
    @Test
    public void corenodemininclusive002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemininclusive002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/minInclusive-002.ttl",
                "-s", "src/test/resources/core/node/minInclusive-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/minInclusive-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodemininclusive003
    @Test
    public void corenodemininclusive003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minInclusive-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodemininclusive003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/minInclusive-003.ttl",
                "-s", "src/test/resources/core/node/minInclusive-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/minInclusive-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeminlength001
    @Test
    public void corenodeminlength001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minLength-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/minLength-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeminlength001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/minLength-001.ttl",
                "-s", "src/test/resources/core/node/minLength-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/minLength-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodenode001
    @Test
    public void corenodenode001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/node-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/node-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodenode001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/node-001.ttl",
                "-s", "src/test/resources/core/node/node-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/node-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodenodekind001
    @Test
    public void corenodenodekind001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/nodeKind-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/nodeKind-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodenodekind001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/nodeKind-001.ttl",
                "-s", "src/test/resources/core/node/nodeKind-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/nodeKind-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodenot001
    @Test
    public void corenodenot001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/not-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/not-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodenot001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/not-001.ttl",
                "-s", "src/test/resources/core/node/not-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/not-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodenot002
    @Test
    public void corenodenot002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/not-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/not-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodenot002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/not-002.ttl",
                "-s", "src/test/resources/core/node/not-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/not-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodeor001
    @Test
    public void corenodeor001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/or-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/or-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodeor001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/or-001.ttl",
                "-s", "src/test/resources/core/node/or-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/or-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodepattern001
    @Test
    public void corenodepattern001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/pattern-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/pattern-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodepattern001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/pattern-001.ttl",
                "-s", "src/test/resources/core/node/pattern-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/pattern-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodepattern002
    @Test
    public void corenodepattern002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/pattern-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/pattern-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodepattern002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/pattern-002.ttl",
                "-s", "src/test/resources/core/node/pattern-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/pattern-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodequalified001
    @Test
    public void corenodequalified001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/qualified-001-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/qualified-001-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodequalified001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/qualified-001-data.ttl",
                "-s", "src/test/resources/core/node/qualified-001-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/qualified-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodexone001
    @Test
    public void corenodexone001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/xone-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/xone-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodexone001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/xone-001.ttl",
                "-s", "src/test/resources/core/node/xone-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/xone-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corenodexoneduplicate
    @Test
    public void corenodexoneduplicate() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/xone-duplicate-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/node/xone-duplicate-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corenodexoneduplicateReport.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/node/xone-duplicate-data.ttl",
                "-s", "src/test/resources/core/node/xone-duplicate-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/node/xone-duplicate.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathalternative001
    @Test
    public void corepathpathalternative001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-alternative-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-alternative-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathalternative001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-alternative-001.ttl",
                "-s", "src/test/resources/core/path/path-alternative-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-alternative-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathcomplex001
    @Test
    public void corepathpathcomplex001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-complex-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-complex-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathcomplex001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-complex-001.ttl",
                "-s", "src/test/resources/core/path/path-complex-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-complex-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathcomplex002
    @Test
    public void corepathpathcomplex002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-complex-002-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-complex-002-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathcomplex002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-complex-002-data.ttl",
                "-s", "src/test/resources/core/path/path-complex-002-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-complex-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathinverse001
    @Test
    public void corepathpathinverse001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-inverse-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-inverse-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathinverse001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-inverse-001.ttl",
                "-s", "src/test/resources/core/path/path-inverse-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-inverse-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathoneormore001
    @Test
    public void corepathpathoneormore001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-oneOrMore-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-oneOrMore-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathoneormore001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-oneOrMore-001.ttl",
                "-s", "src/test/resources/core/path/path-oneOrMore-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-oneOrMore-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathsequence001
    @Test
    public void corepathpathsequence001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathsequence001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-sequence-001.ttl",
                "-s", "src/test/resources/core/path/path-sequence-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-sequence-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathsequence002
    @Test
    public void corepathpathsequence002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathsequence002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-sequence-002.ttl",
                "-s", "src/test/resources/core/path/path-sequence-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-sequence-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathsequenceduplicate001
    @Test
    public void corepathpathsequenceduplicate001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-duplicate-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-sequence-duplicate-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathsequenceduplicate001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-sequence-duplicate-001.ttl",
                "-s", "src/test/resources/core/path/path-sequence-duplicate-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-sequence-duplicate-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathstrange001
    @Test
    public void corepathpathstrange001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-strange-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-strange-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathstrange001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-strange-001.ttl",
                "-s", "src/test/resources/core/path/path-strange-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-strange-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathstrange002
    @Test
    public void corepathpathstrange002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-strange-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-strange-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathstrange002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-strange-002.ttl",
                "-s", "src/test/resources/core/path/path-strange-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-strange-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathunused001
    @Test
    public void corepathpathunused001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-unused-001-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-unused-001-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathunused001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-unused-001-data.ttl",
                "-s", "src/test/resources/core/path/path-unused-001-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-unused-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathzeroormore001
    @Test
    public void corepathpathzeroormore001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-zeroOrMore-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-zeroOrMore-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathzeroormore001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-zeroOrMore-001.ttl",
                "-s", "src/test/resources/core/path/path-zeroOrMore-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-zeroOrMore-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepathpathzeroorone001
    @Test
    public void corepathpathzeroorone001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-zeroOrOne-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/path/path-zeroOrOne-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepathpathzeroorone001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/path/path-zeroOrOne-001.ttl",
                "-s", "src/test/resources/core/path/path-zeroOrOne-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/path/path-zeroOrOne-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyand001
    @Test
    public void corepropertyand001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/and-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/and-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyand001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/and-001.ttl",
                "-s", "src/test/resources/core/property/and-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/and-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyclass001
    @Test
    public void corepropertyclass001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/class-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/class-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyclass001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/class-001.ttl",
                "-s", "src/test/resources/core/property/class-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/class-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertydatatype001
    @Test
    public void corepropertydatatype001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertydatatype001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/datatype-001.ttl",
                "-s", "src/test/resources/core/property/datatype-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/datatype-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertydatatype002
    @Test
    public void corepropertydatatype002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertydatatype002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/datatype-002.ttl",
                "-s", "src/test/resources/core/property/datatype-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/datatype-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertydatatype003
    @Test
    public void corepropertydatatype003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertydatatype003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/datatype-003.ttl",
                "-s", "src/test/resources/core/property/datatype-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/datatype-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertydatatypeillformed
    @Test
    public void corepropertydatatypeillformed() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-ill-formed-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/datatype-ill-formed-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertydatatypeillformedReport.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/datatype-ill-formed-data.ttl",
                "-s", "src/test/resources/core/property/datatype-ill-formed-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/datatype-ill-formed.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertydisjoint001
    @Test
    public void corepropertydisjoint001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/disjoint-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/disjoint-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertydisjoint001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/disjoint-001.ttl",
                "-s", "src/test/resources/core/property/disjoint-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/disjoint-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyequals001
    @Test
    public void corepropertyequals001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/equals-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/equals-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyequals001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/equals-001.ttl",
                "-s", "src/test/resources/core/property/equals-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/equals-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyhasvalue001
    @Test
    public void corepropertyhasvalue001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/hasValue-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/hasValue-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyhasvalue001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/hasValue-001.ttl",
                "-s", "src/test/resources/core/property/hasValue-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/hasValue-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyin001
    @Test
    public void corepropertyin001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/in-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/in-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyin001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/in-001.ttl",
                "-s", "src/test/resources/core/property/in-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/in-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertylanguagein001
    @Test
    public void corepropertylanguagein001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/languageIn-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/languageIn-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertylanguagein001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/languageIn-001.ttl",
                "-s", "src/test/resources/core/property/languageIn-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/languageIn-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertylessthan001
    @Test
    public void corepropertylessthan001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThan-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThan-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertylessthan001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/lessThan-001.ttl",
                "-s", "src/test/resources/core/property/lessThan-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/lessThan-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertylessthan002
    @Test
    public void corepropertylessthan002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThan-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThan-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertylessthan002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/lessThan-002.ttl",
                "-s", "src/test/resources/core/property/lessThan-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/lessThan-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertylessthanorequals001
    @Test
    public void corepropertylessthanorequals001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThanOrEquals-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/lessThanOrEquals-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertylessthanorequals001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/lessThanOrEquals-001.ttl",
                "-s", "src/test/resources/core/property/lessThanOrEquals-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/lessThanOrEquals-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymaxcount001
    @Test
    public void corepropertymaxcount001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxCount-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxCount-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymaxcount001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/maxCount-001.ttl",
                "-s", "src/test/resources/core/property/maxCount-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/maxCount-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymaxcount002
    @Test
    public void corepropertymaxcount002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxCount-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxCount-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymaxcount002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/maxCount-002.ttl",
                "-s", "src/test/resources/core/property/maxCount-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/maxCount-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymaxexclusive001
    @Test
    public void corepropertymaxexclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxExclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxExclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymaxexclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/maxExclusive-001.ttl",
                "-s", "src/test/resources/core/property/maxExclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/maxExclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymaxinclusive001
    @Test
    public void corepropertymaxinclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxInclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxInclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymaxinclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/maxInclusive-001.ttl",
                "-s", "src/test/resources/core/property/maxInclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/maxInclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymaxlength001
    @Test
    public void corepropertymaxlength001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxLength-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/maxLength-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymaxlength001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/maxLength-001.ttl",
                "-s", "src/test/resources/core/property/maxLength-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/maxLength-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymincount001
    @Test
    public void corepropertymincount001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minCount-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minCount-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymincount001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/minCount-001.ttl",
                "-s", "src/test/resources/core/property/minCount-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/minCount-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertymincount002
    @Test
    public void corepropertymincount002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minCount-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minCount-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertymincount002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/minCount-002.ttl",
                "-s", "src/test/resources/core/property/minCount-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        QueryProcess exec = QueryProcess.create(resultGraph);
        boolean checkIfValidationIsSuccessfull = ! exec.query(TestUtils.generateSHACLSuccessfullValidationReport()).isEmpty();
        assertTrue(checkIfValidationIsSuccessfull);
    }

    // corepropertyminexclusive001
    @Test
    public void corepropertyminexclusive001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minExclusive-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minExclusive-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyminexclusive001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/minExclusive-001.ttl",
                "-s", "src/test/resources/core/property/minExclusive-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/minExclusive-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyminexclusive002
    @Test
    public void corepropertyminexclusive002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minExclusive-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minExclusive-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyminexclusive002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/minExclusive-002.ttl",
                "-s", "src/test/resources/core/property/minExclusive-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/minExclusive-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyminlength001
    @Test
    public void corepropertyminlength001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minLength-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/minLength-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyminlength001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/minLength-001.ttl",
                "-s", "src/test/resources/core/property/minLength-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/minLength-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertynode001
    @Test
    public void corepropertynode001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/node-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/node-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertynode001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/node-001.ttl",
                "-s", "src/test/resources/core/property/node-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/node-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertynode002
    @Test
    public void corepropertynode002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/node-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/node-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertynode002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/node-002.ttl",
                "-s", "src/test/resources/core/property/node-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/node-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertynodekind001
    @Test
    public void corepropertynodekind001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/nodeKind-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/nodeKind-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertynodekind001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/nodeKind-001.ttl",
                "-s", "src/test/resources/core/property/nodeKind-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/nodeKind-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertynot001
    @Test
    public void corepropertynot001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/not-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/not-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertynot001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/not-001.ttl",
                "-s", "src/test/resources/core/property/not-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/not-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyor001
    @Test
    public void corepropertyor001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/or-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/or-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyor001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/or-001.ttl",
                "-s", "src/test/resources/core/property/or-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/or-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyordatatypes001
    @Test
    public void corepropertyordatatypes001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/or-datatypes-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/or-datatypes-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyordatatypes001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/or-datatypes-001.ttl",
                "-s", "src/test/resources/core/property/or-datatypes-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/or-datatypes-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertypattern001
    @Test
    public void corepropertypattern001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/pattern-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/pattern-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertypattern001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/pattern-001.ttl",
                "-s", "src/test/resources/core/property/pattern-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/pattern-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertypattern002
    @Test
    public void corepropertypattern002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/pattern-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/pattern-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertypattern002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/pattern-002.ttl",
                "-s", "src/test/resources/core/property/pattern-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/pattern-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyproperty001
    @Test
    public void corepropertyproperty001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/property-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/property-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyproperty001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/property-001.ttl",
                "-s", "src/test/resources/core/property/property-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/property-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyqualifiedmincountdisjoint001
    @Test
    public void corepropertyqualifiedmincountdisjoint001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedMinCountDisjoint-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedMinCountDisjoint-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyqualifiedmincountdisjoint001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/qualifiedMinCountDisjoint-001.ttl",
                "-s", "src/test/resources/core/property/qualifiedMinCountDisjoint-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/qualifiedMinCountDisjoint-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyqualifiedvalueshape001
    @Test
    public void corepropertyqualifiedvalueshape001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedValueShape-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedValueShape-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyqualifiedvalueshape001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/qualifiedValueShape-001.ttl",
                "-s", "src/test/resources/core/property/qualifiedValueShape-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/qualifiedValueShape-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyqualifiedvalueshapesdisjoint001
    @Test
    public void corepropertyqualifiedvalueshapesdisjoint001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedValueShapesDisjoint-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/qualifiedValueShapesDisjoint-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyqualifiedvalueshapesdisjoint001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/qualifiedValueShapesDisjoint-001.ttl",
                "-s", "src/test/resources/core/property/qualifiedValueShapesDisjoint-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/qualifiedValueShapesDisjoint-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyuniquelang001
    @Test
    public void corepropertyuniquelang001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/uniqueLang-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/uniqueLang-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyuniquelang001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/uniqueLang-001.ttl",
                "-s", "src/test/resources/core/property/uniqueLang-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/property/uniqueLang-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corepropertyuniquelang002
    @Test
    public void corepropertyuniquelang002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/uniqueLang-002-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/property/uniqueLang-002-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corepropertyuniquelang002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/property/uniqueLang-002-data.ttl",
                "-s", "src/test/resources/core/property/uniqueLang-002-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        QueryProcess exec = QueryProcess.create(resultGraph);
        boolean checkIfValidationIsSuccessfull = ! exec.query(TestUtils.generateSHACLSuccessfullValidationReport()).isEmpty();
        assertTrue(checkIfValidationIsSuccessfull);
    }

    // coretargetsmultipletargets001
    @Test
    public void coretargetsmultipletargets001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/multipleTargets-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/multipleTargets-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetsmultipletargets001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/multipleTargets-001.ttl",
                "-s", "src/test/resources/core/targets/multipleTargets-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/multipleTargets-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetclass001
    @Test
    public void coretargetstargetclass001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetClass-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetClass-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetclass001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetClass-001.ttl",
                "-s", "src/test/resources/core/targets/targetClass-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetClass-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetclassimplicit001
    @Test
    public void coretargetstargetclassimplicit001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetClassImplicit-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetClassImplicit-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetclassimplicit001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetClassImplicit-001.ttl",
                "-s", "src/test/resources/core/targets/targetClassImplicit-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetClassImplicit-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetnode001
    @Test
    public void coretargetstargetnode001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetNode-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetNode-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetnode001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetNode-001.ttl",
                "-s", "src/test/resources/core/targets/targetNode-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetNode-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetobjectsof001
    @Test
    public void coretargetstargetobjectsof001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetObjectsOf-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetObjectsOf-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetobjectsof001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetObjectsOf-001.ttl",
                "-s", "src/test/resources/core/targets/targetObjectsOf-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetObjectsOf-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetsubjectsof001
    @Test
    public void coretargetstargetsubjectsof001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetSubjectsOf-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetSubjectsOf-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetsubjectsof001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetSubjectsOf-001.ttl",
                "-s", "src/test/resources/core/targets/targetSubjectsOf-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetSubjectsOf-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // coretargetstargetsubjectsof002
    @Test
    public void coretargetstargetsubjectsof002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetSubjectsOf-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/targets/targetSubjectsOf-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/coretargetstargetsubjectsof002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/targets/targetSubjectsOf-002.ttl",
                "-s", "src/test/resources/core/targets/targetSubjectsOf-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/targets/targetSubjectsOf-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // corevalidationreportsshared
    @Test
    public void corevalidationreportsshared() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/validation-reports/shared-data.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/core/validation-reports/shared-shapes.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/corevalidationreportssharedReport.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/core/validation-reports/shared-data.ttl",
                "-s", "src/test/resources/core/validation-reports/shared-shapes.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/core/validation-reports/shared.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlcomponentoptional001
    @Test
    public void sparqlcomponentoptional001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/optional-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/optional-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlcomponentoptional001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/component/optional-001.ttl",
                "-s", "src/test/resources/sparql/component/optional-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/component/optional-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlcomponentpropertyvalidatorselect001
    @Test
    public void sparqlcomponentpropertyvalidatorselect001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/propertyValidator-select-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/propertyValidator-select-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlcomponentpropertyvalidatorselect001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/component/propertyValidator-select-001.ttl",
                "-s", "src/test/resources/sparql/component/propertyValidator-select-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/component/propertyValidator-select-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlcomponentvalidator001
    @Test
    public void sparqlcomponentvalidator001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/validator-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/component/validator-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlcomponentvalidator001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/component/validator-001.ttl",
                "-s", "src/test/resources/sparql/component/validator-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/component/validator-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlnodeprefixes001
    @Test
    public void sparqlnodeprefixes001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/prefixes-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/prefixes-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlnodeprefixes001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/node/prefixes-001.ttl",
                "-s", "src/test/resources/sparql/node/prefixes-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/node/prefixes-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlnodesparql001
    @Test
    public void sparqlnodesparql001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlnodesparql001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/node/sparql-001.ttl",
                "-s", "src/test/resources/sparql/node/sparql-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/node/sparql-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlnodesparql002
    @Test
    public void sparqlnodesparql002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlnodesparql002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/node/sparql-002.ttl",
                "-s", "src/test/resources/sparql/node/sparql-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/node/sparql-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlnodesparql003
    @Test
    public void sparqlnodesparql003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/node/sparql-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlnodesparql003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/node/sparql-003.ttl",
                "-s", "src/test/resources/sparql/node/sparql-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/node/sparql-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding001
    @Test
    public void sparqlprebindingprebinding001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-001.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding002
    @Test
    public void sparqlprebindingprebinding002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-002.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding003
    @Test
    public void sparqlprebindingprebinding003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-003.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding004
    @Test
    public void sparqlprebindingprebinding004() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-004.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-004.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding004Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-004.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-004.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-004.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding005
    @Test
    public void sparqlprebindingprebinding005() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-005.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-005.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding005Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-005.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-005.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-005.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding006
    @Test
    public void sparqlprebindingprebinding006() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-006.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-006.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding006Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-006.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-006.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-006.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingprebinding007
    @Test
    public void sparqlprebindingprebinding007() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-007.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/pre-binding-007.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingprebinding007Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/pre-binding-007.ttl",
                "-s", "src/test/resources/sparql/pre-binding/pre-binding-007.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/pre-binding-007.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingshapesgraph001
    @Test
    public void sparqlprebindingshapesgraph001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/shapesGraph-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/shapesGraph-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingshapesgraph001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/shapesGraph-001.ttl",
                "-s", "src/test/resources/sparql/pre-binding/shapesGraph-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/shapesGraph-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql001
    @Test
    public void sparqlprebindingunsupportedsparql001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-001.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql002
    @Test
    public void sparqlprebindingunsupportedsparql002() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-002.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-002.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql002Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-002.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-002.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-002.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql003
    @Test
    public void sparqlprebindingunsupportedsparql003() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-003.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-003.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql003Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-003.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-003.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-003.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql004
    @Test
    public void sparqlprebindingunsupportedsparql004() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-004.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-004.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql004Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-004.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-004.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-004.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql005
    @Test
    public void sparqlprebindingunsupportedsparql005() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-005.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-005.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql005Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-005.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-005.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-005.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlprebindingunsupportedsparql006
    @Test
    public void sparqlprebindingunsupportedsparql006() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-006.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/pre-binding/unsupported-sparql-006.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlprebindingunsupportedsparql006Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/pre-binding/unsupported-sparql-006.ttl",
                "-s", "src/test/resources/sparql/pre-binding/unsupported-sparql-006.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/pre-binding/unsupported-sparql-006.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

    // sparqlpropertysparql001
    @Test
    public void sparqlpropertysparql001() throws IOException, InterruptedException, LoadException, EngineException {
        // Load action file
        Path localDataFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/property/sparql-001.ttl"));
        Path localShapeFile = TestFileManager.getLocalFilePath(URI.create("src/test/resources/sparql/property/sparql-001.ttl"));
        Path validationReportFilePath = Path.of("src/test/resources/sparqlpropertysparql001Report.ttl");

        // Validation of the data file with the shape file
        Process actionValidationCommand = new ProcessBuilder().inheritIO().command(
                "java", "-jar", "src/test/resources/corese-command.jar", "shacl",
                "-i", "src/test/resources/sparql/property/sparql-001.ttl",
                "-s", "src/test/resources/sparql/property/sparql-001.ttl",
                "-a", "turtle",
                "-o", validationReportFilePath.toString())
            .start();
        int validationExitCode = actionValidationCommand.waitFor();
        assertEquals(0, validationExitCode);

        GraphStore graphStore = GraphStore.create();
        Graph referenceGraph = new Graph();
        referenceGraph.init();
        Load referenceLoader = Load.create(referenceGraph);
        referenceLoader.parse(localDataFile.toString());
        referenceLoader.parse(localShapeFile.toString());
        referenceLoader.parse("src/test/resources/sparql/property/sparql-001.ttl");

        Graph resultGraph = Graph.create();
        resultGraph.init();
        Load resultLoader = Load.create(resultGraph);
        resultLoader.parse(validationReportFilePath.toString());
        graphStore.setNamedGraph("http://corese.inria.fr/reference", referenceGraph);
        graphStore.setNamedGraph("http://corese.inria.fr/result", resultGraph);

        QueryProcess exec = QueryProcess.create(graphStore);
        boolean checkIfRefAreInResultSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfRefAreInResultSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreInRefSPARQLQuery = ! exec.query(TestUtils.generateSHACLCheckIfResultsAreInRefSPARQLQuery()).isEmpty();
        boolean checkIfResultsAreNotInRefSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfResultsAreNotInRefSPARQLQuery()).isEmpty();
        boolean checkIfRefAreNotInResultSPARQLQuery = exec.query(TestUtils.generateSHACLCheckIfRefAreNotInResultSPARQLQuery()).isEmpty();

        assertTrue(checkIfRefAreInResultSPARQLQuery);
        assertTrue(checkIfResultsAreInRefSPARQLQuery);
        assertTrue(checkIfResultsAreNotInRefSPARQLQuery);
        assertTrue(checkIfRefAreNotInResultSPARQLQuery);
    }

}